/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./cspy_types');
import DkNotifyConstant = ttypes.DkNotifyConstant
import DkCoreStatusConstants = ttypes.DkCoreStatusConstants
import DkLoggingCategoryConstant = ttypes.DkLoggingCategoryConstant
import BasicExprType = ttypes.BasicExprType
import DEBUGGER_SERVICE = ttypes.DEBUGGER_SERVICE
import DEBUGEVENT_SERVICE = ttypes.DEBUGEVENT_SERVICE
import CONTEXT_MANAGER_SERVICE = ttypes.CONTEXT_MANAGER_SERVICE
import MEMORY_SERVICE = ttypes.MEMORY_SERVICE
import SessionConfiguration = ttypes.SessionConfiguration
import DebugEvent = ttypes.DebugEvent
import InspectionContextChangedEvent = ttypes.InspectionContextChangedEvent
import BaseContextChangedEvent = ttypes.BaseContextChangedEvent
import LogEvent = ttypes.LogEvent
import Thread = ttypes.Thread
import ExprValue = ttypes.ExprValue
import ModuleData = ttypes.ModuleData
import NamedLocationMask = ttypes.NamedLocationMask
import NamedLocation = ttypes.NamedLocation
import ExtraDebugFile = ttypes.ExtraDebugFile
import ModuleLoadingOptions = ttypes.ModuleLoadingOptions
import ResetStyles = ttypes.ResetStyles
import DebugSettings = ttypes.DebugSettings
import HeartbeatService = require('./HeartbeatService');

/**
 * Main C-SPY service.
 */
declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Returns the version of the debugger as a string.
   */
  getVersionString(): Q.Promise<string>;

  /**
   * Returns the version of the debugger as a string.
   */
  getVersionString(callback?: (error: void, response: string)=>void): void;

  /**
   * Starts a debug session. Normally the very first thing which is
   * invoked in the lifecycle of a debug session. Responsible to
   * prepare the debugger to be able to load a module.
   */
  startSession(sessionConfig: SessionConfiguration): Q.Promise<void>;

  /**
   * Starts a debug session. Normally the very first thing which is
   * invoked in the lifecycle of a debug session. Responsible to
   * prepare the debugger to be able to load a module.
   */
  startSession(sessionConfig: SessionConfiguration, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Stops the debug session. When this method returns, the event
   * kDkDoShutdown should have been triggered.
   * 
   * @deprecated This method should not be called by clients directly. Use <tt>exit()</tt> instead.
   */
  stopSession(): Q.Promise<void>;

  /**
   * Stops the debug session. When this method returns, the event
   * kDkDoShutdown should have been triggered.
   * 
   * @deprecated This method should not be called by clients directly. Use <tt>exit()</tt> instead.
   */
  stopSession(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Get user settings from the EW
   */
  getDebugSettings(): Q.Promise<DebugSettings>;

  /**
   * Get user settings from the EW
   */
  getDebugSettings(callback?: (error: shared_ttypes.CSpyException, response: DebugSettings)=>void): void;

  /**
   * Set user settings of the debugger session.
   */
  setDebugSettings(settings: DebugSettings): Q.Promise<void>;

  /**
   * Set user settings of the debugger session.
   */
  setDebugSettings(settings: DebugSettings, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Cause CSpyServer to terminate. Will call stopSession() if necessary.
   * <p>Note: we currently do not support calling startSession() again after
   * stopSession(), e.g. there can only be a single "start - stop - exit" cycle
   * per process. This is due to limitations in the semantics of dlclose()
   * on POSIX system. stopSession() is thus deprecated and should not be called
   * directly from clients.
   */
  exit(): Q.Promise<void>;

  /**
   * Cause CSpyServer to terminate. Will call stopSession() if necessary.
   * <p>Note: we currently do not support calling startSession() again after
   * stopSession(), e.g. there can only be a single "start - stop - exit" cycle
   * per process. This is due to limitations in the semantics of dlclose()
   * on POSIX system. stopSession() is thus deprecated and should not be called
   * directly from clients.
   */
  exit(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Returns true if the debugger is "online", i.e. has a program loaded
   * and can be expected to receive commands. This is roughly defined as
   * between kDkLoadModule and kDkDoShutdown. Note that this can only be
   * an approximation, as the state of the debugger may change between
   * checking this flag and acting on it. It should only be used to provide
   * hints to the user such as UI element state.
   */
  isOnline(): Q.Promise<boolean>;

  /**
   * Returns true if the debugger is "online", i.e. has a program loaded
   * and can be expected to receive commands. This is roughly defined as
   * between kDkLoadModule and kDkDoShutdown. Note that this can only be
   * an approximation, as the state of the debugger may change between
   * checking this flag and acting on it. It should only be used to provide
   * hints to the user such as UI element state.
   */
  isOnline(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  /**
   * Loads a module. See loadModuleWithOptions.
   */
  loadModule(filename: string): Q.Promise<void>;

  /**
   * Loads a module. See loadModuleWithOptions.
   */
  loadModule(filename: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Loads a module with additional loading options.
   */
  loadModuleWithOptions(filename: string, options: ModuleLoadingOptions): Q.Promise<void>;

  /**
   * Loads a module with additional loading options.
   */
  loadModuleWithOptions(filename: string, options: ModuleLoadingOptions, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Performs flashloading.
   * <p>TODO flashloading should be hidden behind loadModule().
   * TODO the executable and arguments parameters are unused
   * (leftovers from the old CDP-based debugger API?)
   */
  flashModule(boardFile: string, executable: string, argument_list: string[], extraExecutables: string[]): Q.Promise<void>;

  /**
   * Performs flashloading.
   * <p>TODO flashloading should be hidden behind loadModule().
   * TODO the executable and arguments parameters are unused
   * (leftovers from the old CDP-based debugger API?)
   */
  flashModule(boardFile: string, executable: string, argument_list: string[], extraExecutables: string[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Returns a list of the passes
   */
  getFlashPasses(boardFile: string): Q.Promise<string[][]>;

  /**
   * Returns a list of the passes
   */
  getFlashPasses(boardFile: string, callback?: (error: shared_ttypes.CSpyException, response: string[][])=>void): void;

  /**
   * Erase the flash memory
   */
  eraseFlash(boardFile: string, nPasses: boolean[]): Q.Promise<void>;

  /**
   * Erase the flash memory
   */
  eraseFlash(boardFile: string, nPasses: boolean[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Return a list of all loaded modules
   */
  getModules(): Q.Promise<ModuleData[]>;

  /**
   * Return a list of all loaded modules
   */
  getModules(callback?: (error: shared_ttypes.CSpyException, response: ModuleData[])=>void): void;

  /**
   * Loads a macrofile.
   */
  loadMacroFile(macro: string): Q.Promise<void>;

  /**
   * Loads a macrofile.
   */
  loadMacroFile(macro: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Unload a macrofile
   */
  unloadMacroFile(macro: string): Q.Promise<void>;

  /**
   * Unload a macrofile
   */
  unloadMacroFile(macro: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  runToULE(ule: string, allowSingleStep: boolean): Q.Promise<void>;

  runToULE(ule: string, allowSingleStep: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Get the current state of the multicore settings.
   */
  getMulticoreFlags(): Q.Promise<Int64>;

  /**
   * Get the current state of the multicore settings.
   */
  getMulticoreFlags(callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  /**
   * Return a list of available "threads". These may or may not be
   * actual threads. They correspond roughly to available
   * "base contexts", or "threads" as present in the Eclipse debug view.
   * TODO move to RTOS service
   */
  getThreadList(): Q.Promise<Thread[]>;

  /**
   * Return a list of available "threads". These may or may not be
   * actual threads. They correspond roughly to available
   * "base contexts", or "threads" as present in the Eclipse debug view.
   * TODO move to RTOS service
   */
  getThreadList(callback?: (error: shared_ttypes.CSpyException, response: Thread[])=>void): void;

  /**
   * Check if the given thread is the active thread or not.
   */
  isActiveThread(t: Thread): Q.Promise<boolean>;

  /**
   * Check if the given thread is the active thread or not.
   */
  isActiveThread(t: Thread, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  /**
   *  Each expression has a root expression which is always a string. Subexpressions are then referred to as a list of indexes
   * (instead of the perhaps more intuitive list of subexpression names).
   * 
   * <tt>
   *   struct A {
   *       int x;
   *       int y;
   *   };
   * 
   *   struct B {
   *     struct A a[10];
   *   };
   * 
   *   struct B b;
   * </tt>
   * 
   * In this example, the expression b.a[5].y would be represented using rootExpr = "b", and subExprIndex = [0, 5, 1],
   * where 0 is the index of a (since it is the first member of struct B), 5 is the array index, and 1 is the index of y
   * which is the second member of struct A.
   *   
   * When evaluating expressions, you pass the root expression and the list of indexes to obtain a ExprValue object,
   * which contains the value of the expression (as a string, according to the requested format). Also the ExprValue object
   * will tell you if there are any subexpressions and if so, how many.
   * 
   * If prefix is true, the formatted value will be given a prefix appropriate
   * the specified format.
   * 
   */
  evalExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], format: shared_ttypes.ExprFormat, prefix: boolean): Q.Promise<ExprValue>;

  /**
   *  Each expression has a root expression which is always a string. Subexpressions are then referred to as a list of indexes
   * (instead of the perhaps more intuitive list of subexpression names).
   * 
   * <tt>
   *   struct A {
   *       int x;
   *       int y;
   *   };
   * 
   *   struct B {
   *     struct A a[10];
   *   };
   * 
   *   struct B b;
   * </tt>
   * 
   * In this example, the expression b.a[5].y would be represented using rootExpr = "b", and subExprIndex = [0, 5, 1],
   * where 0 is the index of a (since it is the first member of struct B), 5 is the array index, and 1 is the index of y
   * which is the second member of struct A.
   *   
   * When evaluating expressions, you pass the root expression and the list of indexes to obtain a ExprValue object,
   * which contains the value of the expression (as a string, according to the requested format). Also the ExprValue object
   * will tell you if there are any subexpressions and if so, how many.
   * 
   * If prefix is true, the formatted value will be given a prefix appropriate
   * the specified format.
   * 
   */
  evalExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], format: shared_ttypes.ExprFormat, prefix: boolean, callback?: (error: shared_ttypes.CSpyException, response: ExprValue)=>void): void;

  assignExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], rvalue: ExprValue): Q.Promise<void>;

  assignExpression(ref: shared_ttypes.ContextRef, expr: string, subExprIndex: number[], rvalue: ExprValue, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  /**
   * Returns a list of sub-expression labels.
   * Labels are for display to the user, and may be created by custom data structure
   * visualisations introduced via custom_formats.dat
   * 
   * treatPointerAsArray is a new field used to implement support for "Display as array",
   * see ECL-2592.
   */
  getSubExpressionLabels(ref: shared_ttypes.ContextRef, rootExpr: string, subExprIndex: number[], startIndex: number, length: number, treatPointerAsArray: boolean): Q.Promise<string[]>;

  /**
   * Returns a list of sub-expression labels.
   * Labels are for display to the user, and may be created by custom data structure
   * visualisations introduced via custom_formats.dat
   * 
   * treatPointerAsArray is a new field used to implement support for "Display as array",
   * see ECL-2592.
   */
  getSubExpressionLabels(ref: shared_ttypes.ContextRef, rootExpr: string, subExprIndex: number[], startIndex: number, length: number, treatPointerAsArray: boolean, callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  /**
   * Return a list of all location names (e.g. registers)
   */
  getLocationNames(): Q.Promise<string[]>;

  /**
   * Return a list of all location names (e.g. registers)
   */
  getLocationNames(callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  /**
   * Return a list of all location names in the given group
   */
  getLocationNamesInGroup(group: string): Q.Promise<string[]>;

  /**
   * Return a list of all location names in the given group
   */
  getLocationNamesInGroup(group: string, callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  /**
   * Return a list of all register groups
   */
  getRegisterGroups(): Q.Promise<string[]>;

  /**
   * Return a list of all register groups
   */
  getRegisterGroups(callback?: (error: shared_ttypes.CSpyException, response: string[])=>void): void;

  /**
   * Return information about a specific named location
   * Throws exception if no such location could be found.
   */
  getNamedLocation(name: string): Q.Promise<NamedLocation>;

  /**
   * Return information about a specific named location
   * Throws exception if no such location could be found.
   */
  getNamedLocation(name: string, callback?: (error: shared_ttypes.CSpyException, response: NamedLocation)=>void): void;

  getCoreState(core: number): Q.Promise<DkCoreStatusConstants>;

  getCoreState(core: number, callback?: (error: shared_ttypes.CSpyException, response: DkCoreStatusConstants)=>void): void;

  getNumberOfCores(): Q.Promise<number>;

  getNumberOfCores(callback?: (error: shared_ttypes.CSpyException, response: number)=>void): void;

  getCoreDescription(core: number): Q.Promise<string>;

  getCoreDescription(core: number, callback?: (error: void, response: string)=>void): void;

  getCycleCounter(core: number): Q.Promise<Int64>;

  getCycleCounter(core: number, callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  getCyclesPerSecond(): Q.Promise<Int64>;

  getCyclesPerSecond(callback?: (error: shared_ttypes.CSpyException, response: Int64)=>void): void;

  hasCoreStoppedDeliberately(core: number): Q.Promise<boolean>;

  hasCoreStoppedDeliberately(core: number, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setResetStyles(id: number): Q.Promise<void>;

  setResetStyles(id: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getResetStyles(): Q.Promise<ResetStyles[]>;

  getResetStyles(callback?: (error: shared_ttypes.CSpyException, response: ResetStyles[])=>void): void;

  reset(): Q.Promise<void>;

  reset(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  go(): Q.Promise<void>;

  go(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goCore(core: number): Q.Promise<void>;

  goCore(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stop(): Q.Promise<void>;

  stop(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stopCore(core: number): Q.Promise<void>;

  stopCore(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  multiGo(core: number): Q.Promise<void>;

  multiGo(core: number, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  step(enterFunctionsWithoutSource: boolean): Q.Promise<void>;

  step(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stepOver(enterFunctionsWithoutSource: boolean): Q.Promise<void>;

  stepOver(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  nextStatement(enterFunctionsWithoutSource: boolean): Q.Promise<void>;

  nextStatement(enterFunctionsWithoutSource: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  stepOut(): Q.Promise<void>;

  stepOut(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  instructionStep(): Q.Promise<void>;

  instructionStep(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  instructionStepOver(): Q.Promise<void>;

  instructionStepOver(callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goToLocation(location: shared_ttypes.Location): Q.Promise<void>;

  goToLocation(location: shared_ttypes.Location, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  goToLocations(locations: shared_ttypes.Location[]): Q.Promise<void>;

  goToLocations(locations: shared_ttypes.Location[], callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  supportsExceptions(): Q.Promise<boolean>;

  supportsExceptions(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  getBreakOnThrow(): Q.Promise<boolean>;

  getBreakOnThrow(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setBreakOnThrow(enable: boolean): Q.Promise<void>;

  setBreakOnThrow(enable: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getBreakOnUncaughtException(): Q.Promise<boolean>;

  getBreakOnUncaughtException(callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  setBreakOnUncaughtException(enable: boolean): Q.Promise<void>;

  setBreakOnUncaughtException(enable: boolean, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;

  getZoneByName(name: string): Q.Promise<shared_ttypes.ZoneInfo>;

  getZoneByName(name: string, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo)=>void): void;

  getZoneById(id: number): Q.Promise<shared_ttypes.ZoneInfo>;

  getZoneById(id: number, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo)=>void): void;

  getAllZones(): Q.Promise<shared_ttypes.ZoneInfo[]>;

  getAllZones(callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.ZoneInfo[])=>void): void;

  /**
   * Returns the current trace timestamp used by the IfTraceUtil.cpp
   * trace functions. This is used to allow e.g. Eclipse to synchronize
   * trace streams.
   */
  getTraceTime(): Q.Promise<Int64>;

  /**
   * Returns the current trace timestamp used by the IfTraceUtil.cpp
   * trace functions. This is used to allow e.g. Eclipse to synchronize
   * trace streams.
   */
  getTraceTime(callback?: (error: void, response: Int64)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getVersionString(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_startSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stopSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getDebugSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setDebugSettings(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_exit(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isOnline(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadModule(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadModuleWithOptions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_flashModule(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getFlashPasses(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_eraseFlash(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getModules(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_loadMacroFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_unloadMacroFile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_runToULE(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getMulticoreFlags(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getThreadList(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isActiveThread(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_evalExpression(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_assignExpression(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getSubExpressionLabels(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getLocationNames(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getLocationNamesInGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRegisterGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getNamedLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCoreState(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getNumberOfCores(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCoreDescription(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCycleCounter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCyclesPerSecond(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_hasCoreStoppedDeliberately(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setResetStyles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getResetStyles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_reset(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_go(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goCore(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stop(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stopCore(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_multiGo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_step(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stepOver(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_nextStatement(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stepOut(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_instructionStep(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_instructionStepOver(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goToLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_goToLocations(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_supportsExceptions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakOnThrow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakOnThrow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakOnUncaughtException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakOnUncaughtException(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getZoneByName(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getZoneById(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllZones(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getTraceTime(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

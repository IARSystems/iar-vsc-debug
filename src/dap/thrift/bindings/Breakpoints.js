//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./breakpoints_types');
//HELPER FUNCTIONS AND STRUCTURES

var Breakpoints_getBreakpoints_args = function(args) {
};
Breakpoints_getBreakpoints_args.prototype = {};
Breakpoints_getBreakpoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getBreakpoints_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getBreakpoints_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_getBreakpoints_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Breakpoint]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_getBreakpoints_result.prototype = {};
Breakpoints_getBreakpoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new shared_ttypes.Breakpoint();
          elem3.read(input);
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getBreakpoints_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getBreakpoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_getBreakpoint_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Breakpoints_getBreakpoint_args.prototype = {};
Breakpoints_getBreakpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getBreakpoint_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getBreakpoint_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_getBreakpoint_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.Breakpoint(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_getBreakpoint_result.prototype = {};
Breakpoints_getBreakpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.Breakpoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getBreakpoint_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getBreakpoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointFromDescriptor_args = function(args) {
  this.descriptor = null;
  if (args) {
    if (args.descriptor !== undefined && args.descriptor !== null) {
      this.descriptor = args.descriptor;
    }
  }
};
Breakpoints_setBreakpointFromDescriptor_args.prototype = {};
Breakpoints_setBreakpointFromDescriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.descriptor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointFromDescriptor_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointFromDescriptor_args');
  if (this.descriptor !== null && this.descriptor !== undefined) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRING, 1);
    output.writeString(this.descriptor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointFromDescriptor_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.Breakpoint(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_setBreakpointFromDescriptor_result.prototype = {};
Breakpoints_setBreakpointFromDescriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.Breakpoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointFromDescriptor_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointFromDescriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointOnUle_args = function(args) {
  this.ule = null;
  this.accessType = null;
  if (args) {
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
    if (args.accessType !== undefined && args.accessType !== null) {
      this.accessType = args.accessType;
    }
  }
};
Breakpoints_setBreakpointOnUle_args.prototype = {};
Breakpoints_setBreakpointOnUle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accessType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointOnUle_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointOnUle_args');
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 1);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  if (this.accessType !== null && this.accessType !== undefined) {
    output.writeFieldBegin('accessType', Thrift.Type.I32, 2);
    output.writeI32(this.accessType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointOnUle_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.Breakpoint(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_setBreakpointOnUle_result.prototype = {};
Breakpoints_setBreakpointOnUle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.Breakpoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointOnUle_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointOnUle_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointOnUleWithCategory_args = function(args) {
  this.ule = null;
  this.accessType = null;
  this.categoryId = null;
  if (args) {
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
    if (args.accessType !== undefined && args.accessType !== null) {
      this.accessType = args.accessType;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
  }
};
Breakpoints_setBreakpointOnUleWithCategory_args.prototype = {};
Breakpoints_setBreakpointOnUleWithCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accessType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.categoryId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointOnUleWithCategory_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointOnUleWithCategory_args');
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 1);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  if (this.accessType !== null && this.accessType !== undefined) {
    output.writeFieldBegin('accessType', Thrift.Type.I32, 2);
    output.writeI32(this.accessType);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.STRING, 3);
    output.writeString(this.categoryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_setBreakpointOnUleWithCategory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.Breakpoint(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_setBreakpointOnUleWithCategory_result.prototype = {};
Breakpoints_setBreakpointOnUleWithCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.Breakpoint();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_setBreakpointOnUleWithCategory_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_setBreakpointOnUleWithCategory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_enableBreakpoint_args = function(args) {
  this.id = null;
  this.enable = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
Breakpoints_enableBreakpoint_args.prototype = {};
Breakpoints_enableBreakpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_enableBreakpoint_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_enableBreakpoint_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 2);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_enableBreakpoint_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_enableBreakpoint_result.prototype = {};
Breakpoints_enableBreakpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_enableBreakpoint_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_enableBreakpoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_removeBreakpoint_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Breakpoints_removeBreakpoint_args.prototype = {};
Breakpoints_removeBreakpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_removeBreakpoint_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_removeBreakpoint_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_removeBreakpoint_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_removeBreakpoint_result.prototype = {};
Breakpoints_removeBreakpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_removeBreakpoint_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_removeBreakpoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_getRecentlyHitBreakpoints_args = function(args) {
};
Breakpoints_getRecentlyHitBreakpoints_args.prototype = {};
Breakpoints_getRecentlyHitBreakpoints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getRecentlyHitBreakpoints_args.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getRecentlyHitBreakpoints_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoints_getRecentlyHitBreakpoints_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Breakpoint]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Breakpoints_getRecentlyHitBreakpoints_result.prototype = {};
Breakpoints_getRecentlyHitBreakpoints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new shared_ttypes.Breakpoint();
          elem8.read(input);
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoints_getRecentlyHitBreakpoints_result.prototype.write = function(output) {
  output.writeStructBegin('Breakpoints_getRecentlyHitBreakpoints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BreakpointsClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(BreakpointsClient, HeartbeatServiceClient);
BreakpointsClient.prototype.seqid = function() { return this._seqid; };
BreakpointsClient.prototype.new_seqid = function() { return this._seqid += 1; };

BreakpointsClient.prototype.getBreakpoints = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBreakpoints();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBreakpoints();
  }
};

BreakpointsClient.prototype.send_getBreakpoints = function() {
  var output = new this.pClass(this.output);
  var args = new Breakpoints_getBreakpoints_args();
  try {
    output.writeMessageBegin('getBreakpoints', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_getBreakpoints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_getBreakpoints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBreakpoints failed: unknown result');
};

BreakpointsClient.prototype.getBreakpoint = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBreakpoint(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBreakpoint(id);
  }
};

BreakpointsClient.prototype.send_getBreakpoint = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Breakpoints_getBreakpoint_args(params);
  try {
    output.writeMessageBegin('getBreakpoint', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_getBreakpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_getBreakpoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBreakpoint failed: unknown result');
};

BreakpointsClient.prototype.setBreakpointFromDescriptor = function(descriptor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBreakpointFromDescriptor(descriptor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBreakpointFromDescriptor(descriptor);
  }
};

BreakpointsClient.prototype.send_setBreakpointFromDescriptor = function(descriptor) {
  var output = new this.pClass(this.output);
  var params = {
    descriptor: descriptor
  };
  var args = new Breakpoints_setBreakpointFromDescriptor_args(params);
  try {
    output.writeMessageBegin('setBreakpointFromDescriptor', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_setBreakpointFromDescriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_setBreakpointFromDescriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setBreakpointFromDescriptor failed: unknown result');
};

BreakpointsClient.prototype.setBreakpointOnUle = function(ule, accessType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBreakpointOnUle(ule, accessType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBreakpointOnUle(ule, accessType);
  }
};

BreakpointsClient.prototype.send_setBreakpointOnUle = function(ule, accessType) {
  var output = new this.pClass(this.output);
  var params = {
    ule: ule,
    accessType: accessType
  };
  var args = new Breakpoints_setBreakpointOnUle_args(params);
  try {
    output.writeMessageBegin('setBreakpointOnUle', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_setBreakpointOnUle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_setBreakpointOnUle_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setBreakpointOnUle failed: unknown result');
};

BreakpointsClient.prototype.setBreakpointOnUleWithCategory = function(ule, accessType, categoryId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBreakpointOnUleWithCategory(ule, accessType, categoryId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBreakpointOnUleWithCategory(ule, accessType, categoryId);
  }
};

BreakpointsClient.prototype.send_setBreakpointOnUleWithCategory = function(ule, accessType, categoryId) {
  var output = new this.pClass(this.output);
  var params = {
    ule: ule,
    accessType: accessType,
    categoryId: categoryId
  };
  var args = new Breakpoints_setBreakpointOnUleWithCategory_args(params);
  try {
    output.writeMessageBegin('setBreakpointOnUleWithCategory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_setBreakpointOnUleWithCategory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_setBreakpointOnUleWithCategory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setBreakpointOnUleWithCategory failed: unknown result');
};

BreakpointsClient.prototype.enableBreakpoint = function(id, enable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableBreakpoint(id, enable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableBreakpoint(id, enable);
  }
};

BreakpointsClient.prototype.send_enableBreakpoint = function(id, enable) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    enable: enable
  };
  var args = new Breakpoints_enableBreakpoint_args(params);
  try {
    output.writeMessageBegin('enableBreakpoint', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_enableBreakpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_enableBreakpoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('enableBreakpoint failed: unknown result');
};

BreakpointsClient.prototype.removeBreakpoint = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeBreakpoint(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeBreakpoint(id);
  }
};

BreakpointsClient.prototype.send_removeBreakpoint = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Breakpoints_removeBreakpoint_args(params);
  try {
    output.writeMessageBegin('removeBreakpoint', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_removeBreakpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_removeBreakpoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeBreakpoint failed: unknown result');
};

BreakpointsClient.prototype.getRecentlyHitBreakpoints = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecentlyHitBreakpoints();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecentlyHitBreakpoints();
  }
};

BreakpointsClient.prototype.send_getRecentlyHitBreakpoints = function() {
  var output = new this.pClass(this.output);
  var args = new Breakpoints_getRecentlyHitBreakpoints_args();
  try {
    output.writeMessageBegin('getRecentlyHitBreakpoints', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

BreakpointsClient.prototype.recv_getRecentlyHitBreakpoints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Breakpoints_getRecentlyHitBreakpoints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecentlyHitBreakpoints failed: unknown result');
};
var BreakpointsProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(BreakpointsProcessor, HeartbeatServiceProcessor);
BreakpointsProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
BreakpointsProcessor.prototype.process_getBreakpoints = function(seqid, input, output) {
  var args = new Breakpoints_getBreakpoints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBreakpoints.length === 0) {
    Q.fcall(this._handler.getBreakpoints.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Breakpoints_getBreakpoints_result({success: result});
      output.writeMessageBegin("getBreakpoints", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_getBreakpoints_result(err);
        output.writeMessageBegin("getBreakpoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakpoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBreakpoints(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_getBreakpoints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBreakpoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakpoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_getBreakpoint = function(seqid, input, output) {
  var args = new Breakpoints_getBreakpoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBreakpoint.length === 1) {
    Q.fcall(this._handler.getBreakpoint.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Breakpoints_getBreakpoint_result({success: result});
      output.writeMessageBegin("getBreakpoint", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_getBreakpoint_result(err);
        output.writeMessageBegin("getBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBreakpoint(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_getBreakpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_setBreakpointFromDescriptor = function(seqid, input, output) {
  var args = new Breakpoints_setBreakpointFromDescriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBreakpointFromDescriptor.length === 1) {
    Q.fcall(this._handler.setBreakpointFromDescriptor.bind(this._handler),
      args.descriptor
    ).then(function(result) {
      var result_obj = new Breakpoints_setBreakpointFromDescriptor_result({success: result});
      output.writeMessageBegin("setBreakpointFromDescriptor", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_setBreakpointFromDescriptor_result(err);
        output.writeMessageBegin("setBreakpointFromDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointFromDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBreakpointFromDescriptor(args.descriptor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_setBreakpointFromDescriptor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBreakpointFromDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointFromDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_setBreakpointOnUle = function(seqid, input, output) {
  var args = new Breakpoints_setBreakpointOnUle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBreakpointOnUle.length === 2) {
    Q.fcall(this._handler.setBreakpointOnUle.bind(this._handler),
      args.ule,
      args.accessType
    ).then(function(result) {
      var result_obj = new Breakpoints_setBreakpointOnUle_result({success: result});
      output.writeMessageBegin("setBreakpointOnUle", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_setBreakpointOnUle_result(err);
        output.writeMessageBegin("setBreakpointOnUle", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointOnUle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBreakpointOnUle(args.ule, args.accessType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_setBreakpointOnUle_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBreakpointOnUle", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointOnUle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_setBreakpointOnUleWithCategory = function(seqid, input, output) {
  var args = new Breakpoints_setBreakpointOnUleWithCategory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBreakpointOnUleWithCategory.length === 3) {
    Q.fcall(this._handler.setBreakpointOnUleWithCategory.bind(this._handler),
      args.ule,
      args.accessType,
      args.categoryId
    ).then(function(result) {
      var result_obj = new Breakpoints_setBreakpointOnUleWithCategory_result({success: result});
      output.writeMessageBegin("setBreakpointOnUleWithCategory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_setBreakpointOnUleWithCategory_result(err);
        output.writeMessageBegin("setBreakpointOnUleWithCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointOnUleWithCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBreakpointOnUleWithCategory(args.ule, args.accessType, args.categoryId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_setBreakpointOnUleWithCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBreakpointOnUleWithCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakpointOnUleWithCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_enableBreakpoint = function(seqid, input, output) {
  var args = new Breakpoints_enableBreakpoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableBreakpoint.length === 2) {
    Q.fcall(this._handler.enableBreakpoint.bind(this._handler),
      args.id,
      args.enable
    ).then(function(result) {
      var result_obj = new Breakpoints_enableBreakpoint_result({success: result});
      output.writeMessageBegin("enableBreakpoint", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_enableBreakpoint_result(err);
        output.writeMessageBegin("enableBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.enableBreakpoint(args.id, args.enable, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_enableBreakpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enableBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_removeBreakpoint = function(seqid, input, output) {
  var args = new Breakpoints_removeBreakpoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeBreakpoint.length === 1) {
    Q.fcall(this._handler.removeBreakpoint.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Breakpoints_removeBreakpoint_result({success: result});
      output.writeMessageBegin("removeBreakpoint", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_removeBreakpoint_result(err);
        output.writeMessageBegin("removeBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeBreakpoint(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_removeBreakpoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeBreakpoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeBreakpoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BreakpointsProcessor.prototype.process_getRecentlyHitBreakpoints = function(seqid, input, output) {
  var args = new Breakpoints_getRecentlyHitBreakpoints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecentlyHitBreakpoints.length === 0) {
    Q.fcall(this._handler.getRecentlyHitBreakpoints.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Breakpoints_getRecentlyHitBreakpoints_result({success: result});
      output.writeMessageBegin("getRecentlyHitBreakpoints", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Breakpoints_getRecentlyHitBreakpoints_result(err);
        output.writeMessageBegin("getRecentlyHitBreakpoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecentlyHitBreakpoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRecentlyHitBreakpoints(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Breakpoints_getRecentlyHitBreakpoints_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRecentlyHitBreakpoints", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecentlyHitBreakpoints", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

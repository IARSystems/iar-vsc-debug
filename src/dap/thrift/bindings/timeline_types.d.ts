//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import ServiceRegistry_ttypes = require('./ServiceRegistry_types');
import shared_ttypes = require('./shared_types');



/**
 * Sent to notify of new data being available in all the channels whose id matches the 'channelId' regexp
 */
declare class DbuTimelineDataAvailableNotification {
  public channelId: string;
  public startCycles: Int64;
  public endCycles: Int64;
  public dummy: boolean;

    constructor(args?: { channelId: string; startCycles: Int64; endCycles: Int64; dummy: boolean; });
}

/**
 * Sent to notify of a new data channel being available
 */
declare class DbuTimelineChannelAvailableNotification {
  public id: string;
  public formatDescriptor: string;

    constructor(args?: { id: string; formatDescriptor: string; });
}

/**
 * Sent to notify of a data channel having been removed
 */
declare class DbuTimelineChannelRemovedNotification {
  public id: string;

    constructor(args?: { id: string; });
}

/**
 * Sent to notify that the CPU frequency has changed
 */
declare class DbuTimelineCpuClockChangedNotification {
  public cyclesPerSecond: Int64;

    constructor(args?: { cyclesPerSecond: Int64; });
}

/**
 * Sent to notify that the enablement state of all the channels matching the provided id regexp has changed
 */
declare class DbuTimelineEnablementChangedNotification {
  public channelId: string;
  public enabled: boolean;

    constructor(args?: { channelId: string; enabled: boolean; });
}

declare class TimelineChannelInfo {
  public id: string;
  public formatDescriptor: string;

    constructor(args?: { id: string; formatDescriptor: string; });
}

declare var TIMELINE_FRONTEND_SERVICE: string;

declare var TIMELINE_BACKEND_SERVICE: string;

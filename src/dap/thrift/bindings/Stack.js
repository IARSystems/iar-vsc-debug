//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ListWindowBackend = require('./ListWindowBackend');
var ListWindowBackendClient = ListWindowBackend.Client;
var ListWindowBackendProcessor = ListWindowBackend.Processor;
var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var Stack_setStack_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Stack_setStack_args.prototype = {};
Stack_setStack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_setStack_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_setStack_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_setStack_result = function(args) {
};
Stack_setStack_result.prototype = {};
Stack_setStack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_setStack_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_setStack_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStack_args = function(args) {
};
Stack_getStack_args.prototype = {};
Stack_getStack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStack_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStack_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStack_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Stack_getStack_result.prototype = {};
Stack_getStack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStack_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStacks_args = function(args) {
};
Stack_getStacks_args.prototype = {};
Stack_getStacks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStacks_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStacks_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStacks_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Stack_getStacks_result.prototype = {};
Stack_getStacks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readString();
          this.success.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStacks_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStacks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter64 in this.success) {
      if (this.success.hasOwnProperty(iter64)) {
        iter64 = this.success[iter64];
        output.writeString(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getBarTooltip_args = function(args) {
};
Stack_getBarTooltip_args.prototype = {};
Stack_getBarTooltip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getBarTooltip_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_getBarTooltip_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getBarTooltip_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Stack_getBarTooltip_result.prototype = {};
Stack_getBarTooltip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getBarTooltip_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_getBarTooltip_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getBarInfo_args = function(args) {
};
Stack_getBarInfo_args.prototype = {};
Stack_getBarInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getBarInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_getBarInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getBarInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.StackBarInfo(args.success);
    }
  }
};
Stack_getBarInfo_result.prototype = {};
Stack_getBarInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.StackBarInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getBarInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_getBarInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStackSettings_args = function(args) {
};
Stack_getStackSettings_args.prototype = {};
Stack_getStackSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStackSettings_args.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStackSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Stack_getStackSettings_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.StackSettings(args.success);
    }
  }
};
Stack_getStackSettings_result.prototype = {};
Stack_getStackSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.StackSettings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stack_getStackSettings_result.prototype.write = function(output) {
  output.writeStructBegin('Stack_getStackSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(StackClient, ListWindowBackendClient);
StackClient.prototype.seqid = function() { return this._seqid; };
StackClient.prototype.new_seqid = function() { return this._seqid += 1; };

StackClient.prototype.setStack = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setStack(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setStack(name);
  }
};

StackClient.prototype.send_setStack = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new Stack_setStack_args(params);
  try {
    output.writeMessageBegin('setStack', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_setStack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_setStack_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

StackClient.prototype.getStack = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStack();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStack();
  }
};

StackClient.prototype.send_getStack = function() {
  var output = new this.pClass(this.output);
  var args = new Stack_getStack_args();
  try {
    output.writeMessageBegin('getStack', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_getStack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_getStack_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStack failed: unknown result');
};

StackClient.prototype.getStacks = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStacks();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStacks();
  }
};

StackClient.prototype.send_getStacks = function() {
  var output = new this.pClass(this.output);
  var args = new Stack_getStacks_args();
  try {
    output.writeMessageBegin('getStacks', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_getStacks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_getStacks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStacks failed: unknown result');
};

StackClient.prototype.getBarTooltip = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBarTooltip();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBarTooltip();
  }
};

StackClient.prototype.send_getBarTooltip = function() {
  var output = new this.pClass(this.output);
  var args = new Stack_getBarTooltip_args();
  try {
    output.writeMessageBegin('getBarTooltip', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_getBarTooltip = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_getBarTooltip_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBarTooltip failed: unknown result');
};

StackClient.prototype.getBarInfo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBarInfo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBarInfo();
  }
};

StackClient.prototype.send_getBarInfo = function() {
  var output = new this.pClass(this.output);
  var args = new Stack_getBarInfo_args();
  try {
    output.writeMessageBegin('getBarInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_getBarInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_getBarInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBarInfo failed: unknown result');
};

StackClient.prototype.getStackSettings = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStackSettings();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStackSettings();
  }
};

StackClient.prototype.send_getStackSettings = function() {
  var output = new this.pClass(this.output);
  var args = new Stack_getStackSettings_args();
  try {
    output.writeMessageBegin('getStackSettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

StackClient.prototype.recv_getStackSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Stack_getStackSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStackSettings failed: unknown result');
};
var StackProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(StackProcessor, ListWindowBackendProcessor);
StackProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
StackProcessor.prototype.process_setStack = function(seqid, input, output) {
  var args = new Stack_setStack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setStack.length === 1) {
    Q.fcall(this._handler.setStack.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new Stack_setStack_result({success: result});
      output.writeMessageBegin("setStack", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setStack", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setStack(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_setStack_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setStack", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setStack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
StackProcessor.prototype.process_getStack = function(seqid, input, output) {
  var args = new Stack_getStack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStack.length === 0) {
    Q.fcall(this._handler.getStack.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Stack_getStack_result({success: result});
      output.writeMessageBegin("getStack", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getStack", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStack(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_getStack_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStack", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
StackProcessor.prototype.process_getStacks = function(seqid, input, output) {
  var args = new Stack_getStacks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStacks.length === 0) {
    Q.fcall(this._handler.getStacks.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Stack_getStacks_result({success: result});
      output.writeMessageBegin("getStacks", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getStacks", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStacks(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_getStacks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStacks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStacks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
StackProcessor.prototype.process_getBarTooltip = function(seqid, input, output) {
  var args = new Stack_getBarTooltip_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBarTooltip.length === 0) {
    Q.fcall(this._handler.getBarTooltip.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Stack_getBarTooltip_result({success: result});
      output.writeMessageBegin("getBarTooltip", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getBarTooltip", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBarTooltip(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_getBarTooltip_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBarTooltip", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBarTooltip", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
StackProcessor.prototype.process_getBarInfo = function(seqid, input, output) {
  var args = new Stack_getBarInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBarInfo.length === 0) {
    Q.fcall(this._handler.getBarInfo.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Stack_getBarInfo_result({success: result});
      output.writeMessageBegin("getBarInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getBarInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBarInfo(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_getBarInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBarInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBarInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
StackProcessor.prototype.process_getStackSettings = function(seqid, input, output) {
  var args = new Stack_getStackSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStackSettings.length === 0) {
    Q.fcall(this._handler.getStackSettings.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Stack_getStackSettings_result({success: result});
      output.writeMessageBegin("getStackSettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getStackSettings", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStackSettings(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Stack_getStackSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStackSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStackSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

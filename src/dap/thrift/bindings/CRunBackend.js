//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ttypes = require('./crun_types');
//HELPER FUNCTIONS AND STRUCTURES

var CRunBackend_loadFilters_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
CRunBackend_loadFilters_args.prototype = {};
CRunBackend_loadFilters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_loadFilters_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_loadFilters_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_loadFilters_result = function(args) {
};
CRunBackend_loadFilters_result.prototype = {};
CRunBackend_loadFilters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_loadFilters_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_loadFilters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_saveFilters_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
CRunBackend_saveFilters_args.prototype = {};
CRunBackend_saveFilters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_saveFilters_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_saveFilters_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_saveFilters_result = function(args) {
};
CRunBackend_saveFilters_result.prototype = {};
CRunBackend_saveFilters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_saveFilters_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_saveFilters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessage_args = function(args) {
  this.messageName = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
  }
};
CRunBackend_addRuleOnMessage_args.prototype = {};
CRunBackend_addRuleOnMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessage_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessage_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessage_result = function(args) {
};
CRunBackend_addRuleOnMessage_result.prototype = {};
CRunBackend_addRuleOnMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessage_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageFile_args = function(args) {
  this.messageName = null;
  this.file = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
  }
};
CRunBackend_addRuleOnMessageFile_args.prototype = {};
CRunBackend_addRuleOnMessageFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageFile_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageFile_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageFile_result = function(args) {
};
CRunBackend_addRuleOnMessageFile_result.prototype = {};
CRunBackend_addRuleOnMessageFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageFile_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageRange_args = function(args) {
  this.messageName = null;
  this.range = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new shared_ttypes.SourceRange(args.range);
    }
  }
};
CRunBackend_addRuleOnMessageRange_args.prototype = {};
CRunBackend_addRuleOnMessageRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new shared_ttypes.SourceRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageRange_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageRange_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageRange_result = function(args) {
};
CRunBackend_addRuleOnMessageRange_result.prototype = {};
CRunBackend_addRuleOnMessageRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageRange_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageRange_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_setDefaultAction_args = function(args) {
  this.action = null;
  if (args) {
    if (args.action !== undefined && args.action !== null) {
      this.action = args.action;
    }
  }
};
CRunBackend_setDefaultAction_args.prototype = {};
CRunBackend_setDefaultAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_setDefaultAction_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_setDefaultAction_args');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_setDefaultAction_result = function(args) {
};
CRunBackend_setDefaultAction_result.prototype = {};
CRunBackend_setDefaultAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_setDefaultAction_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_setDefaultAction_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_getDefaultAction_args = function(args) {
};
CRunBackend_getDefaultAction_args.prototype = {};
CRunBackend_getDefaultAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_getDefaultAction_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_getDefaultAction_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_getDefaultAction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRunBackend_getDefaultAction_result.prototype = {};
CRunBackend_getDefaultAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_getDefaultAction_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_getDefaultAction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackendClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
CRunBackendClient.prototype = {};
CRunBackendClient.prototype.seqid = function() { return this._seqid; };
CRunBackendClient.prototype.new_seqid = function() { return this._seqid += 1; };

CRunBackendClient.prototype.loadFilters = function(filename, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadFilters(filename);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadFilters(filename);
  }
};

CRunBackendClient.prototype.send_loadFilters = function(filename) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename
  };
  var args = new CRunBackend_loadFilters_args(params);
  try {
    output.writeMessageBegin('loadFilters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_loadFilters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_loadFilters_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.saveFilters = function(filename, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveFilters(filename);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveFilters(filename);
  }
};

CRunBackendClient.prototype.send_saveFilters = function(filename) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename
  };
  var args = new CRunBackend_saveFilters_args(params);
  try {
    output.writeMessageBegin('saveFilters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_saveFilters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_saveFilters_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.addRuleOnMessage = function(messageName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRuleOnMessage(messageName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRuleOnMessage(messageName);
  }
};

CRunBackendClient.prototype.send_addRuleOnMessage = function(messageName) {
  var output = new this.pClass(this.output);
  var params = {
    messageName: messageName
  };
  var args = new CRunBackend_addRuleOnMessage_args(params);
  try {
    output.writeMessageBegin('addRuleOnMessage', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_addRuleOnMessage_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.addRuleOnMessageFile = function(messageName, file, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRuleOnMessageFile(messageName, file);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRuleOnMessageFile(messageName, file);
  }
};

CRunBackendClient.prototype.send_addRuleOnMessageFile = function(messageName, file) {
  var output = new this.pClass(this.output);
  var params = {
    messageName: messageName,
    file: file
  };
  var args = new CRunBackend_addRuleOnMessageFile_args(params);
  try {
    output.writeMessageBegin('addRuleOnMessageFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessageFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_addRuleOnMessageFile_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.addRuleOnMessageRange = function(messageName, range, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addRuleOnMessageRange(messageName, range);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addRuleOnMessageRange(messageName, range);
  }
};

CRunBackendClient.prototype.send_addRuleOnMessageRange = function(messageName, range) {
  var output = new this.pClass(this.output);
  var params = {
    messageName: messageName,
    range: range
  };
  var args = new CRunBackend_addRuleOnMessageRange_args(params);
  try {
    output.writeMessageBegin('addRuleOnMessageRange', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessageRange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_addRuleOnMessageRange_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.setDefaultAction = function(action, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setDefaultAction(action);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setDefaultAction(action);
  }
};

CRunBackendClient.prototype.send_setDefaultAction = function(action) {
  var output = new this.pClass(this.output);
  var params = {
    action: action
  };
  var args = new CRunBackend_setDefaultAction_args(params);
  try {
    output.writeMessageBegin('setDefaultAction', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_setDefaultAction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_setDefaultAction_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunBackendClient.prototype.getDefaultAction = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultAction();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultAction();
  }
};

CRunBackendClient.prototype.send_getDefaultAction = function() {
  var output = new this.pClass(this.output);
  var args = new CRunBackend_getDefaultAction_args();
  try {
    output.writeMessageBegin('getDefaultAction', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_getDefaultAction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunBackend_getDefaultAction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultAction failed: unknown result');
};
var CRunBackendProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
CRunBackendProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CRunBackendProcessor.prototype.process_loadFilters = function(seqid, input, output) {
  var args = new CRunBackend_loadFilters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadFilters.length === 1) {
    Q.fcall(this._handler.loadFilters.bind(this._handler),
      args.filename
    ).then(function(result) {
      var result_obj = new CRunBackend_loadFilters_result({success: result});
      output.writeMessageBegin("loadFilters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("loadFilters", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loadFilters(args.filename, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_loadFilters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadFilters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadFilters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_saveFilters = function(seqid, input, output) {
  var args = new CRunBackend_saveFilters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveFilters.length === 1) {
    Q.fcall(this._handler.saveFilters.bind(this._handler),
      args.filename
    ).then(function(result) {
      var result_obj = new CRunBackend_saveFilters_result({success: result});
      output.writeMessageBegin("saveFilters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("saveFilters", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.saveFilters(args.filename, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_saveFilters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("saveFilters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("saveFilters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_addRuleOnMessage = function(seqid, input, output) {
  var args = new CRunBackend_addRuleOnMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRuleOnMessage.length === 1) {
    Q.fcall(this._handler.addRuleOnMessage.bind(this._handler),
      args.messageName
    ).then(function(result) {
      var result_obj = new CRunBackend_addRuleOnMessage_result({success: result});
      output.writeMessageBegin("addRuleOnMessage", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addRuleOnMessage", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRuleOnMessage(args.messageName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_addRuleOnMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRuleOnMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRuleOnMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_addRuleOnMessageFile = function(seqid, input, output) {
  var args = new CRunBackend_addRuleOnMessageFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRuleOnMessageFile.length === 2) {
    Q.fcall(this._handler.addRuleOnMessageFile.bind(this._handler),
      args.messageName,
      args.file
    ).then(function(result) {
      var result_obj = new CRunBackend_addRuleOnMessageFile_result({success: result});
      output.writeMessageBegin("addRuleOnMessageFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addRuleOnMessageFile", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRuleOnMessageFile(args.messageName, args.file, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_addRuleOnMessageFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRuleOnMessageFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRuleOnMessageFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_addRuleOnMessageRange = function(seqid, input, output) {
  var args = new CRunBackend_addRuleOnMessageRange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addRuleOnMessageRange.length === 2) {
    Q.fcall(this._handler.addRuleOnMessageRange.bind(this._handler),
      args.messageName,
      args.range
    ).then(function(result) {
      var result_obj = new CRunBackend_addRuleOnMessageRange_result({success: result});
      output.writeMessageBegin("addRuleOnMessageRange", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addRuleOnMessageRange", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addRuleOnMessageRange(args.messageName, args.range, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_addRuleOnMessageRange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addRuleOnMessageRange", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addRuleOnMessageRange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_setDefaultAction = function(seqid, input, output) {
  var args = new CRunBackend_setDefaultAction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setDefaultAction.length === 1) {
    Q.fcall(this._handler.setDefaultAction.bind(this._handler),
      args.action
    ).then(function(result) {
      var result_obj = new CRunBackend_setDefaultAction_result({success: result});
      output.writeMessageBegin("setDefaultAction", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setDefaultAction", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setDefaultAction(args.action, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_setDefaultAction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setDefaultAction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setDefaultAction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunBackendProcessor.prototype.process_getDefaultAction = function(seqid, input, output) {
  var args = new CRunBackend_getDefaultAction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultAction.length === 0) {
    Q.fcall(this._handler.getDefaultAction.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CRunBackend_getDefaultAction_result({success: result});
      output.writeMessageBegin("getDefaultAction", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getDefaultAction", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultAction(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunBackend_getDefaultAction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultAction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultAction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

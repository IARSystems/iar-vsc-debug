//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');



/**
 * Each type describes the role of a tool in a C/C++ project build
 */
declare enum ToolType {
  Compiler = 1,
  Assembler = 2,
  Linker = 3,
  Archiver = 4,
  Other = 5,
}

/**
 * Each type describes how a tool is invoked during a build (e.g. single input, multi input)
 */
declare enum InvocationType {
  SingleInput = 1,
  MultiInput = 2,
}

/**
 * Element types in a project tree
 */
declare enum NodeType {
  Group = 1,
  File = 2,
}

declare class ProjectManagerError extends Thrift.TException {
  public description: string;

    constructor(args?: { description: string; });
}

/**
 * Defines a build tool, e.g. a compiler.
 * 
 * A build tool is uniquely identified by its ID, and declares a set of input
 * and output file extensions to specify which files it is able to transform.
 * 
 */
declare class ToolDefinition {
  public id: string;
  public name: string;
  public executableName: string;
  public inputExtensions: string[];
  public outputExtensions: string[];
  public toolType: ToolType;
  public invocationType: InvocationType;

    constructor(args?: { id: string; name: string; executableName: string; inputExtensions: string[]; outputExtensions: string[]; toolType: ToolType; invocationType: InvocationType; });
}

/**
 * Defines a hardware target for which projects can be built for using one or more tools
 * (compiler, linker, etc.).
 * 
 * TODO: Determine how this will actually communicate with a WTD, i.e. its "mImpl" field.
 */
declare class Toolchain {
  public id: string;
  public name: string;
  public tools: ToolDefinition[];

    constructor(args?: { id: string; name: string; tools: ToolDefinition[]; });
}

/**
 * A build configuration represents a way to build a Project.
 * @see ProjectContext
 */
declare class Configuration {
  public name: string;
  public toolchainId: string;

    constructor(args?: { name: string; toolchainId: string; });
}

/**
 * Corresponds to a project on disk
 */
declare class ProjectContext {
  public filename: string;
  public configurations: Configuration[];

    constructor(args?: { filename: string; configurations: Configuration[]; });
}

/**
 * A view of an element in a project tree and its children. <p>
 *  This can be modified on the client side and is not persisted in the actual project
 *  until the backend is instructed to save this element.
 * 
 * @see ProjectManager.SetNode()
 */
declare class Node {
  public name: string;
  public children: Node[];
  public type: NodeType;
  public path: string;

    constructor(args?: { name: string; children: Node[]; type: NodeType; path: string; });
}

declare var PROJECTMANAGER_ID: string;

//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');



/**
 * Each type describes the role of a tool in a C/C++ project build
 */
declare enum ToolType {
  Compiler = 1,
  Assembler = 2,
  Linker = 3,
  Archiver = 4,
  Other = 5,
}

/**
 * Each type describes how a tool is invoked during a build (e.g. single input, multi input)
 */
declare enum InvocationType {
  SingleInput = 1,
  MultiInput = 2,
}

/**
 * Element types in a project tree
 */
declare enum NodeType {
  Group = 1,
  File = 2,
}

/**
 * An option type describes which control should be used to manipulate the option in a GUI
 * 
 * These currently match the class names in the SWTD option system, as that is the
 * only option type system which is widely used.
 * TBD: This might change in future versions of this service to match more abstract control types
 * (e.g. Edit is a text box, EditB is actually a tree-like structure).
 */
declare enum OptionType {
  Check = 0,
  Edit = 1,
  EditB = 2,
  List = 3,
  Radio = 4,
  CheckList = 5,
}

declare class ProjectManagerError extends Thrift.TException {
  public description: string;

    constructor(args?: { description: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Defines a build tool, e.g. a compiler.
 * 
 * A build tool is uniquely identified by its ID, and declares a set of input
 * and output file extensions to specify which files it is able to transform.
 * 
 */
declare class ToolDefinition {
  public id: string;
  public name: string;
  public executableName: string;
  public inputExtensions: string[];
  public outputExtensions: string[];
  public hiddenOutputExtensions: string[];
  public toolType: ToolType;
  public invocationType: InvocationType;

    constructor(args?: { id: string; name: string; executableName: string; inputExtensions: string[]; outputExtensions: string[]; hiddenOutputExtensions: string[]; toolType: ToolType; invocationType: InvocationType; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Defines a hardware target for which projects can be built for using one or more tools
 * (compiler, linker, etc.).
 */
declare class Toolchain {
  public id: string;
  public name: string;
  public tools: ToolDefinition[];

    constructor(args?: { id: string; name: string; tools: ToolDefinition[]; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * A build configuration represents a way to build a Project.
 * @see ProjectContext
 */
declare class Configuration {
  public name: string;
  public toolchainId: string;

    constructor(args?: { name: string; toolchainId: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Corresponds to a workspace on disk
 */
declare class WorkspaceContext {
  public filename: string;

    constructor(args?: { filename: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Corresponds to a project on disk
 */
declare class ProjectContext {
  public filename: string;

    constructor(args?: { filename: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * A view of an element in a project tree and its children. <p>
 *  This can be modified on the client side and is not persisted in the actual project
 *  until the backend is instructed to save this element.
 * 
 * @see ProjectManager.SetNode()
 */
declare class Node {
  public name: string;
  public children: Node[];
  public type: NodeType;
  public path: string;
  public isMfcEnabled: boolean;
  public isExcludedFromBuild: boolean;
  public hasLocalSettings: boolean;
  public hasRelevantSettings: boolean;
  public childrenHaveLocalSettings: boolean;

    constructor(args?: { name: string; children: Node[]; type: NodeType; path: string; isMfcEnabled: boolean; isExcludedFromBuild: boolean; hasLocalSettings: boolean; hasRelevantSettings: boolean; childrenHaveLocalSettings: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Properties of an option's element (e.g. list item, radio button, a checkbox in a check list)
 */
declare class OptionElementDescription {
  public id: string;
  public label: string;
  public enabled: boolean;
  public data: string;

    constructor(args?: { id: string; label: string; enabled: boolean; data: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Properties of an option
 */
declare class OptionDescription {
  public id: string;
  public value: string;
  public type: OptionType;
  public elements: OptionElementDescription[];
  public enabled: boolean;
  public visible: boolean;
  public canBeLocal: boolean;

    constructor(args?: { id: string; value: string; type: OptionType; elements: OptionElementDescription[]; enabled: boolean; visible: boolean; canBeLocal: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Associates a group of options under a single category.
 */
declare class OptionCategory {
  public id: string;
  public optionIds: string[];

    constructor(args?: { id: string; optionIds: string[]; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Stores the result of a build, referring to the project that was built
 */
declare class BuildResult {
  public projectContext: ProjectContext;
  public buildOutput: string[];
  public succeded: boolean;

    constructor(args?: { projectContext: ProjectContext; buildOutput: string[]; succeded: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

declare var PROJECTMANAGER_ID: string;

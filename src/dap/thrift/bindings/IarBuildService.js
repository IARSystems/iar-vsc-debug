//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./iarbuild_types');
//HELPER FUNCTIONS AND STRUCTURES

var IarBuildService_build_args = function(args) {
  this.config = null;
  this.rebuild = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = args.config;
    }
    if (args.rebuild !== undefined && args.rebuild !== null) {
      this.rebuild = args.rebuild;
    }
  }
};
IarBuildService_build_args.prototype = {};
IarBuildService_build_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.config = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.rebuild = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_build_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_build_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRING, 1);
    output.writeString(this.config);
    output.writeFieldEnd();
  }
  if (this.rebuild !== null && this.rebuild !== undefined) {
    output.writeFieldBegin('rebuild', Thrift.Type.BOOL, 2);
    output.writeBool(this.rebuild);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_build_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
IarBuildService_build_result.prototype = {};
IarBuildService_build_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_build_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_build_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_clean_args = function(args) {
  this.config = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = args.config;
    }
  }
};
IarBuildService_clean_args.prototype = {};
IarBuildService_clean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.config = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_clean_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_clean_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRING, 1);
    output.writeString(this.config);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_clean_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
IarBuildService_clean_result.prototype = {};
IarBuildService_clean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_clean_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_clean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getRootNode_args = function(args) {
};
IarBuildService_getRootNode_args.prototype = {};
IarBuildService_getRootNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getRootNode_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getRootNode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getRootNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
IarBuildService_getRootNode_result.prototype = {};
IarBuildService_getRootNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getRootNode_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getRootNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getConfigurations_args = function(args) {
};
IarBuildService_getConfigurations_args.prototype = {};
IarBuildService_getConfigurations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getConfigurations_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getConfigurations_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getConfigurations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
IarBuildService_getConfigurations_result.prototype = {};
IarBuildService_getConfigurations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString();
          this.success.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getConfigurations_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getConfigurations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter24 in this.success) {
      if (this.success.hasOwnProperty(iter24)) {
        iter24 = this.success[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getCategories_args = function(args) {
  this.configName = null;
  this.path = null;
  if (args) {
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
IarBuildService_getCategories_args.prototype = {};
IarBuildService_getCategories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getCategories_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getCategories_args');
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 1);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getCategories_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
IarBuildService_getCategories_result.prototype = {};
IarBuildService_getCategories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString();
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getCategories_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getCategories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getAllOptions_args = function(args) {
  this.configName = null;
  if (args) {
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
  }
};
IarBuildService_getAllOptions_args.prototype = {};
IarBuildService_getAllOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getAllOptions_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getAllOptions_args');
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 1);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getAllOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
IarBuildService_getAllOptions_result.prototype = {};
IarBuildService_getAllOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString();
          this.success.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getAllOptions_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getAllOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        output.writeString(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getOptionState_args = function(args) {
  this.configName = null;
  this.context = null;
  this.optionName = null;
  if (args) {
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.Context(args.context);
    }
    if (args.optionName !== undefined && args.optionName !== null) {
      this.optionName = args.optionName;
    }
  }
};
IarBuildService_getOptionState_args.prototype = {};
IarBuildService_getOptionState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.Context();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.optionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getOptionState_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getOptionState_args');
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 1);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 2);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.optionName !== null && this.optionName !== undefined) {
    output.writeFieldBegin('optionName', Thrift.Type.STRING, 3);
    output.writeString(this.optionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getOptionState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
IarBuildService_getOptionState_result.prototype = {};
IarBuildService_getOptionState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = input.readString();
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getOptionState_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getOptionState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter39 in this.success) {
      if (this.success.hasOwnProperty(iter39)) {
        iter39 = this.success[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_setOptionState_args = function(args) {
  this.configName = null;
  this.context = null;
  this.optionName = null;
  this.state = null;
  if (args) {
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.Context(args.context);
    }
    if (args.optionName !== undefined && args.optionName !== null) {
      this.optionName = args.optionName;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = Thrift.copyList(args.state, [null]);
    }
  }
};
IarBuildService_setOptionState_args.prototype = {};
IarBuildService_setOptionState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.Context();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.optionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.state = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = input.readString();
          this.state.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_setOptionState_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_setOptionState_args');
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 1);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 2);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.optionName !== null && this.optionName !== undefined) {
    output.writeFieldBegin('optionName', Thrift.Type.STRING, 3);
    output.writeString(this.optionName);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.state.length);
    for (var iter44 in this.state) {
      if (this.state.hasOwnProperty(iter44)) {
        iter44 = this.state[iter44];
        output.writeString(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_setOptionState_result = function(args) {
};
IarBuildService_setOptionState_result.prototype = {};
IarBuildService_setOptionState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_setOptionState_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_setOptionState_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getScannerInfo_args = function(args) {
  this.configName = null;
  this.nodePath = null;
  if (args) {
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
    if (args.nodePath !== undefined && args.nodePath !== null) {
      this.nodePath = Thrift.copyList(args.nodePath, [null]);
    }
  }
};
IarBuildService_getScannerInfo_args.prototype = {};
IarBuildService_getScannerInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodePath = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = input.readString();
          this.nodePath.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getScannerInfo_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getScannerInfo_args');
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 1);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  if (this.nodePath !== null && this.nodePath !== undefined) {
    output.writeFieldBegin('nodePath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.nodePath.length);
    for (var iter49 in this.nodePath) {
      if (this.nodePath.hasOwnProperty(iter49)) {
        iter49 = this.nodePath[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_getScannerInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScannerInfo(args.success);
    }
  }
};
IarBuildService_getScannerInfo_result.prototype = {};
IarBuildService_getScannerInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScannerInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_getScannerInfo_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_getScannerInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_shutdown_args = function(args) {
};
IarBuildService_shutdown_args.prototype = {};
IarBuildService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_shutdown_result = function(args) {
};
IarBuildService_shutdown_result.prototype = {};
IarBuildService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_abort_args = function(args) {
};
IarBuildService_abort_args.prototype = {};
IarBuildService_abort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_abort_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_abort_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildService_abort_result = function(args) {
};
IarBuildService_abort_result.prototype = {};
IarBuildService_abort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildService_abort_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildService_abort_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
IarBuildServiceClient.prototype = {};
IarBuildServiceClient.prototype.seqid = function() { return this._seqid; };
IarBuildServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

IarBuildServiceClient.prototype.build = function(config, rebuild, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_build(config, rebuild);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_build(config, rebuild);
  }
};

IarBuildServiceClient.prototype.send_build = function(config, rebuild) {
  var output = new this.pClass(this.output);
  var params = {
    config: config,
    rebuild: rebuild
  };
  var args = new IarBuildService_build_args(params);
  try {
    output.writeMessageBegin('build', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_build = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_build_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('build failed: unknown result');
};

IarBuildServiceClient.prototype.clean = function(config, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clean(config);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clean(config);
  }
};

IarBuildServiceClient.prototype.send_clean = function(config) {
  var output = new this.pClass(this.output);
  var params = {
    config: config
  };
  var args = new IarBuildService_clean_args(params);
  try {
    output.writeMessageBegin('clean', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_clean = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_clean_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clean failed: unknown result');
};

IarBuildServiceClient.prototype.getRootNode = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRootNode();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRootNode();
  }
};

IarBuildServiceClient.prototype.send_getRootNode = function() {
  var output = new this.pClass(this.output);
  var args = new IarBuildService_getRootNode_args();
  try {
    output.writeMessageBegin('getRootNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getRootNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getRootNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRootNode failed: unknown result');
};

IarBuildServiceClient.prototype.getConfigurations = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConfigurations();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConfigurations();
  }
};

IarBuildServiceClient.prototype.send_getConfigurations = function() {
  var output = new this.pClass(this.output);
  var args = new IarBuildService_getConfigurations_args();
  try {
    output.writeMessageBegin('getConfigurations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getConfigurations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getConfigurations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConfigurations failed: unknown result');
};

IarBuildServiceClient.prototype.getCategories = function(configName, path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCategories(configName, path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCategories(configName, path);
  }
};

IarBuildServiceClient.prototype.send_getCategories = function(configName, path) {
  var output = new this.pClass(this.output);
  var params = {
    configName: configName,
    path: path
  };
  var args = new IarBuildService_getCategories_args(params);
  try {
    output.writeMessageBegin('getCategories', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getCategories = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getCategories_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCategories failed: unknown result');
};

IarBuildServiceClient.prototype.getAllOptions = function(configName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllOptions(configName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllOptions(configName);
  }
};

IarBuildServiceClient.prototype.send_getAllOptions = function(configName) {
  var output = new this.pClass(this.output);
  var params = {
    configName: configName
  };
  var args = new IarBuildService_getAllOptions_args(params);
  try {
    output.writeMessageBegin('getAllOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getAllOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getAllOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllOptions failed: unknown result');
};

IarBuildServiceClient.prototype.getOptionState = function(configName, context, optionName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionState(configName, context, optionName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionState(configName, context, optionName);
  }
};

IarBuildServiceClient.prototype.send_getOptionState = function(configName, context, optionName) {
  var output = new this.pClass(this.output);
  var params = {
    configName: configName,
    context: context,
    optionName: optionName
  };
  var args = new IarBuildService_getOptionState_args(params);
  try {
    output.writeMessageBegin('getOptionState', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getOptionState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getOptionState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionState failed: unknown result');
};

IarBuildServiceClient.prototype.setOptionState = function(configName, context, optionName, state, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setOptionState(configName, context, optionName, state);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setOptionState(configName, context, optionName, state);
  }
};

IarBuildServiceClient.prototype.send_setOptionState = function(configName, context, optionName, state) {
  var output = new this.pClass(this.output);
  var params = {
    configName: configName,
    context: context,
    optionName: optionName,
    state: state
  };
  var args = new IarBuildService_setOptionState_args(params);
  try {
    output.writeMessageBegin('setOptionState', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_setOptionState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_setOptionState_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildServiceClient.prototype.getScannerInfo = function(configName, nodePath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScannerInfo(configName, nodePath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScannerInfo(configName, nodePath);
  }
};

IarBuildServiceClient.prototype.send_getScannerInfo = function(configName, nodePath) {
  var output = new this.pClass(this.output);
  var params = {
    configName: configName,
    nodePath: nodePath
  };
  var args = new IarBuildService_getScannerInfo_args(params);
  try {
    output.writeMessageBegin('getScannerInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_getScannerInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_getScannerInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerInfo failed: unknown result');
};

IarBuildServiceClient.prototype.shutdown = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdown();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdown();
  }
};

IarBuildServiceClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  var args = new IarBuildService_shutdown_args();
  try {
    output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_shutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_shutdown_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildServiceClient.prototype.abort = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_abort();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_abort();
  }
};

IarBuildServiceClient.prototype.send_abort = function() {
  var output = new this.pClass(this.output);
  var args = new IarBuildService_abort_args();
  try {
    output.writeMessageBegin('abort', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildServiceClient.prototype.recv_abort = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildService_abort_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var IarBuildServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
IarBuildServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
IarBuildServiceProcessor.prototype.process_build = function(seqid, input, output) {
  var args = new IarBuildService_build_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.build.length === 2) {
    Q.fcall(this._handler.build.bind(this._handler),
      args.config,
      args.rebuild
    ).then(function(result) {
      var result_obj = new IarBuildService_build_result({success: result});
      output.writeMessageBegin("build", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("build", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.build(args.config, args.rebuild, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_build_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("build", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("build", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_clean = function(seqid, input, output) {
  var args = new IarBuildService_clean_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clean.length === 1) {
    Q.fcall(this._handler.clean.bind(this._handler),
      args.config
    ).then(function(result) {
      var result_obj = new IarBuildService_clean_result({success: result});
      output.writeMessageBegin("clean", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("clean", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clean(args.config, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_clean_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clean", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clean", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getRootNode = function(seqid, input, output) {
  var args = new IarBuildService_getRootNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRootNode.length === 0) {
    Q.fcall(this._handler.getRootNode.bind(this._handler)
    ).then(function(result) {
      var result_obj = new IarBuildService_getRootNode_result({success: result});
      output.writeMessageBegin("getRootNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getRootNode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRootNode(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getRootNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRootNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRootNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getConfigurations = function(seqid, input, output) {
  var args = new IarBuildService_getConfigurations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConfigurations.length === 0) {
    Q.fcall(this._handler.getConfigurations.bind(this._handler)
    ).then(function(result) {
      var result_obj = new IarBuildService_getConfigurations_result({success: result});
      output.writeMessageBegin("getConfigurations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getConfigurations(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getConfigurations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getConfigurations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getCategories = function(seqid, input, output) {
  var args = new IarBuildService_getCategories_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCategories.length === 2) {
    Q.fcall(this._handler.getCategories.bind(this._handler),
      args.configName,
      args.path
    ).then(function(result) {
      var result_obj = new IarBuildService_getCategories_result({success: result});
      output.writeMessageBegin("getCategories", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getCategories", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCategories(args.configName, args.path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getCategories_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCategories", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCategories", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getAllOptions = function(seqid, input, output) {
  var args = new IarBuildService_getAllOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllOptions.length === 1) {
    Q.fcall(this._handler.getAllOptions.bind(this._handler),
      args.configName
    ).then(function(result) {
      var result_obj = new IarBuildService_getAllOptions_result({success: result});
      output.writeMessageBegin("getAllOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getAllOptions", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllOptions(args.configName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getAllOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getOptionState = function(seqid, input, output) {
  var args = new IarBuildService_getOptionState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionState.length === 3) {
    Q.fcall(this._handler.getOptionState.bind(this._handler),
      args.configName,
      args.context,
      args.optionName
    ).then(function(result) {
      var result_obj = new IarBuildService_getOptionState_result({success: result});
      output.writeMessageBegin("getOptionState", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getOptionState", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionState(args.configName, args.context, args.optionName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getOptionState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_setOptionState = function(seqid, input, output) {
  var args = new IarBuildService_setOptionState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setOptionState.length === 4) {
    Q.fcall(this._handler.setOptionState.bind(this._handler),
      args.configName,
      args.context,
      args.optionName,
      args.state
    ).then(function(result) {
      var result_obj = new IarBuildService_setOptionState_result({success: result});
      output.writeMessageBegin("setOptionState", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setOptionState", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setOptionState(args.configName, args.context, args.optionName, args.state, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_setOptionState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setOptionState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setOptionState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_getScannerInfo = function(seqid, input, output) {
  var args = new IarBuildService_getScannerInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScannerInfo.length === 2) {
    Q.fcall(this._handler.getScannerInfo.bind(this._handler),
      args.configName,
      args.nodePath
    ).then(function(result) {
      var result_obj = new IarBuildService_getScannerInfo_result({success: result});
      output.writeMessageBegin("getScannerInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getScannerInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getScannerInfo(args.configName, args.nodePath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_getScannerInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getScannerInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new IarBuildService_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdown.length === 0) {
    Q.fcall(this._handler.shutdown.bind(this._handler)
    ).then(function(result) {
      var result_obj = new IarBuildService_shutdown_result({success: result});
      output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shutdown(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_shutdown_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildServiceProcessor.prototype.process_abort = function(seqid, input, output) {
  var args = new IarBuildService_abort_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.abort.length === 0) {
    Q.fcall(this._handler.abort.bind(this._handler)
    ).then(function(result) {
      var result_obj = new IarBuildService_abort_result({success: result});
      output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.abort(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildService_abort_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

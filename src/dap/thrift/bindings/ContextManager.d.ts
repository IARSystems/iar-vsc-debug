/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./cspy_types');
import DkNotifyConstant = ttypes.DkNotifyConstant
import DkCoreStatusConstants = ttypes.DkCoreStatusConstants
import DkLoggingCategoryConstant = ttypes.DkLoggingCategoryConstant
import BasicExprType = ttypes.BasicExprType
import DEBUGGER_SERVICE = ttypes.DEBUGGER_SERVICE
import DEBUGEVENT_SERVICE = ttypes.DEBUGEVENT_SERVICE
import CONTEXT_MANAGER_SERVICE = ttypes.CONTEXT_MANAGER_SERVICE
import MEMORY_SERVICE = ttypes.MEMORY_SERVICE
import SessionConfiguration = ttypes.SessionConfiguration
import DebugEvent = ttypes.DebugEvent
import InspectionContextChangedEvent = ttypes.InspectionContextChangedEvent
import BaseContextChangedEvent = ttypes.BaseContextChangedEvent
import LogEvent = ttypes.LogEvent
import Thread = ttypes.Thread
import ExprValue = ttypes.ExprValue
import ModuleData = ttypes.ModuleData
import NamedLocationMask = ttypes.NamedLocationMask
import NamedLocation = ttypes.NamedLocation
import ExtraDebugFile = ttypes.ExtraDebugFile
import ModuleLoadingOptions = ttypes.ModuleLoadingOptions
import ResetStyles = ttypes.ResetStyles
import DebugSettings = ttypes.DebugSettings
import HeartbeatService = require('./HeartbeatService');

/**
 * Handles contexts and call stack functionality.
 */
declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Set the current inspection context. This is invoked for example when
   * the user selects a stack frame in the Eclipse debug view.
   */
  setInspectionContext(context: shared_ttypes.ContextRef): Q.Promise<void>;

  /**
   * Set the current inspection context. This is invoked for example when
   * the user selects a stack frame in the Eclipse debug view.
   */
  setInspectionContext(context: shared_ttypes.ContextRef, callback?: (error: void, response: void)=>void): void;

  /**
   * Try to locate the given context. This can be used to e.g. find
   * what the "current inspection context" is looking at. This works
   * by first converting the incoming context ref into a DkContext,
   * and then convert that DkContext back into a context ref. This
   * means that if e.g. the current inspection context does not
   * refer to any known context, this method will return a "Unknown"
   * context.
   * 
   * <p>NOTE: The C-SPY implementation of this method is fundamentally broken,
   * and calling this method will cause an unconditional exception to
   * be thrown. See ECL-2260 for more info. /JesperEs 2018-04-18
   */
  findContext(context: shared_ttypes.ContextRef): Q.Promise<shared_ttypes.ContextRef>;

  /**
   * Try to locate the given context. This can be used to e.g. find
   * what the "current inspection context" is looking at. This works
   * by first converting the incoming context ref into a DkContext,
   * and then convert that DkContext back into a context ref. This
   * means that if e.g. the current inspection context does not
   * refer to any known context, this method will return a "Unknown"
   * context.
   * 
   * <p>NOTE: The C-SPY implementation of this method is fundamentally broken,
   * and calling this method will cause an unconditional exception to
   * be thrown. See ECL-2260 for more info. /JesperEs 2018-04-18
   */
  findContext(context: shared_ttypes.ContextRef, callback?: (error: void, response: shared_ttypes.ContextRef)=>void): void;

  /**
   * Get the call stack of the given context.
   */
  getStack(context: shared_ttypes.ContextRef, low: number, high: number): Q.Promise<shared_ttypes.ContextInfo[]>;

  /**
   * Get the call stack of the given context.
   */
  getStack(context: shared_ttypes.ContextRef, low: number, high: number, callback?: (error: void, response: shared_ttypes.ContextInfo[])=>void): void;

  getStackDepth(context: shared_ttypes.ContextRef, maxDepth: number): Q.Promise<number>;

  getStackDepth(context: shared_ttypes.ContextRef, maxDepth: number, callback?: (error: void, response: number)=>void): void;

  /**
   * Return information about a context, such as source ranges and function name.
   */
  getContextInfo(context: shared_ttypes.ContextRef): Q.Promise<shared_ttypes.ContextInfo>;

  /**
   * Return information about a context, such as source ranges and function name.
   */
  getContextInfo(context: shared_ttypes.ContextRef, callback?: (error: void, response: shared_ttypes.ContextInfo)=>void): void;

  /**
   * Compare two context refs for equality.
   */
  compareContexts(ctx1: shared_ttypes.ContextRef, ctx2: shared_ttypes.ContextRef): Q.Promise<boolean>;

  /**
   * Compare two context refs for equality.
   */
  compareContexts(ctx1: shared_ttypes.ContextRef, ctx2: shared_ttypes.ContextRef, callback?: (error: void, response: boolean)=>void): void;

  getLocals(ctx: shared_ttypes.ContextRef): Q.Promise<shared_ttypes.Symbol[]>;

  getLocals(ctx: shared_ttypes.ContextRef, callback?: (error: void, response: shared_ttypes.Symbol[])=>void): void;

  getParameters(ctx: shared_ttypes.ContextRef): Q.Promise<shared_ttypes.Symbol[]>;

  getParameters(ctx: shared_ttypes.ContextRef, callback?: (error: void, response: shared_ttypes.Symbol[])=>void): void;

  isExecuting(ctx: shared_ttypes.ContextRef): Q.Promise<boolean>;

  isExecuting(ctx: shared_ttypes.ContextRef, callback?: (error: void, response: boolean)=>void): void;

  setExecLocation(ctx: shared_ttypes.ContextRef, ule: string): Q.Promise<void>;

  setExecLocation(ctx: shared_ttypes.ContextRef, ule: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setInspectionContext(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findContext(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getStack(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getStackDepth(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getContextInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_compareContexts(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getLocals(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getParameters(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isExecuting(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setExecLocation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

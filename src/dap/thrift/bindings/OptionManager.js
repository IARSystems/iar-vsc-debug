//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./optionmanager_types');
//HELPER FUNCTIONS AND STRUCTURES

var OptionManager_getOptionDefinition_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionDefinition_args.prototype = {};
OptionManager_getOptionDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionDefinition_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionDefinition_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.OptionDefinition(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionDefinition_result.prototype = {};
OptionManager_getOptionDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OptionDefinition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionDefinition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addConfiguration_args = function(args) {
  this.config = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.OptionConfiguration(args.config);
    }
  }
};
OptionManager_addConfiguration_args.prototype = {};
OptionManager_addConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.OptionConfiguration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addConfiguration_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addConfiguration_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addConfiguration_result.prototype = {};
OptionManager_addConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addConfiguration_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addConfigurationPresentation_args = function(args) {
  this.configPresentation = null;
  if (args) {
    if (args.configPresentation !== undefined && args.configPresentation !== null) {
      this.configPresentation = new ttypes.ConfigurationPresentation(args.configPresentation);
    }
  }
};
OptionManager_addConfigurationPresentation_args.prototype = {};
OptionManager_addConfigurationPresentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.configPresentation = new ttypes.ConfigurationPresentation();
        this.configPresentation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addConfigurationPresentation_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addConfigurationPresentation_args');
  if (this.configPresentation !== null && this.configPresentation !== undefined) {
    output.writeFieldBegin('configPresentation', Thrift.Type.STRUCT, 1);
    this.configPresentation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addConfigurationPresentation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addConfigurationPresentation_result.prototype = {};
OptionManager_addConfigurationPresentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addConfigurationPresentation_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addConfigurationPresentation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getConfigurationPresentation_args = function(args) {
  this.configId = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
  }
};
OptionManager_getConfigurationPresentation_args.prototype = {};
OptionManager_getConfigurationPresentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getConfigurationPresentation_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getConfigurationPresentation_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getConfigurationPresentation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ConfigurationPresentation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getConfigurationPresentation_result.prototype = {};
OptionManager_getConfigurationPresentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = new ttypes.ConfigurationPresentation();
          elem50.read(input);
          this.success.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getConfigurationPresentation_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getConfigurationPresentation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter51 in this.success) {
      if (this.success.hasOwnProperty(iter51)) {
        iter51 = this.success[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeConfigurationPresentation_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_removeConfigurationPresentation_args.prototype = {};
OptionManager_removeConfigurationPresentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeConfigurationPresentation_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeConfigurationPresentation_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeConfigurationPresentation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeConfigurationPresentation_result.prototype = {};
OptionManager_removeConfigurationPresentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeConfigurationPresentation_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeConfigurationPresentation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionConfiguration_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionConfiguration_args.prototype = {};
OptionManager_getOptionConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionConfiguration_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.OptionConfiguration(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionConfiguration_result.prototype = {};
OptionManager_getOptionConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.OptionConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeOptionConfiguration_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_removeOptionConfiguration_args.prototype = {};
OptionManager_removeOptionConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeOptionConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeOptionConfiguration_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeOptionConfiguration_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeOptionConfiguration_result.prototype = {};
OptionManager_removeOptionConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeOptionConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeOptionConfiguration_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_verifyOptionConfiguration_args = function(args) {
  this.config = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.OptionConfiguration(args.config);
    }
  }
};
OptionManager_verifyOptionConfiguration_args.prototype = {};
OptionManager_verifyOptionConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.OptionConfiguration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_verifyOptionConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_verifyOptionConfiguration_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_verifyOptionConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.VerifierError]);
    }
  }
};
OptionManager_verifyOptionConfiguration_result.prototype = {};
OptionManager_verifyOptionConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp353 = input.readListBegin();
        var _size52 = _rtmp353.size || 0;
        for (var _i54 = 0; _i54 < _size52; ++_i54) {
          var elem55 = null;
          elem55 = new ttypes.VerifierError();
          elem55.read(input);
          this.success.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_verifyOptionConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_verifyOptionConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter56 in this.success) {
      if (this.success.hasOwnProperty(iter56)) {
        iter56 = this.success[iter56];
        iter56.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getTool_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getTool_args.prototype = {};
OptionManager_getTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getTool_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getTool_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getTool_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ToolDefinition(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getTool_result.prototype = {};
OptionManager_getTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ToolDefinition();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getTool_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getTool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolCommandLine_args = function(args) {
  this.configId = null;
  this.toolId = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.toolId !== undefined && args.toolId !== null) {
      this.toolId = args.toolId;
    }
  }
};
OptionManager_getToolCommandLine_args.prototype = {};
OptionManager_getToolCommandLine_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolCommandLine_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolCommandLine_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.toolId !== null && this.toolId !== undefined) {
    output.writeFieldBegin('toolId', Thrift.Type.STRING, 2);
    output.writeString(this.toolId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolCommandLine_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getToolCommandLine_result.prototype = {};
OptionManager_getToolCommandLine_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp358 = input.readListBegin();
        var _size57 = _rtmp358.size || 0;
        for (var _i59 = 0; _i59 < _size57; ++_i59) {
          var elem60 = null;
          elem60 = input.readString();
          this.success.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolCommandLine_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolCommandLine_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter61 in this.success) {
      if (this.success.hasOwnProperty(iter61)) {
        iter61 = this.success[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValue_args = function(args) {
  this.configId = null;
  this.optionId = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.optionId !== undefined && args.optionId !== null) {
      this.optionId = args.optionId;
    }
  }
};
OptionManager_getOptionValue_args.prototype = {};
OptionManager_getOptionValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.optionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValue_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValue_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.optionId !== null && this.optionId !== undefined) {
    output.writeFieldBegin('optionId', Thrift.Type.STRING, 2);
    output.writeString(this.optionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValue_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionValue_result.prototype = {};
OptionManager_getOptionValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValue_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsString_args = function(args) {
  this.configId = null;
  this.id = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionValueAsString_args.prototype = {};
OptionManager_getOptionValueAsString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsString_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsString_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsString_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionValueAsString_result.prototype = {};
OptionManager_getOptionValueAsString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsString_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsBoolean_args = function(args) {
  this.configId = null;
  this.id = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionValueAsBoolean_args.prototype = {};
OptionManager_getOptionValueAsBoolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsBoolean_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsBoolean_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsBoolean_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionValueAsBoolean_result.prototype = {};
OptionManager_getOptionValueAsBoolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsBoolean_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsBoolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsEnumerated_args = function(args) {
  this.configId = null;
  this.id = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionValueAsEnumerated_args.prototype = {};
OptionManager_getOptionValueAsEnumerated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsEnumerated_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsEnumerated_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsEnumerated_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionValueAsEnumerated_result.prototype = {};
OptionManager_getOptionValueAsEnumerated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsEnumerated_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsEnumerated_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsStringList_args = function(args) {
  this.configId = null;
  this.id = null;
  if (args) {
    if (args.configId !== undefined && args.configId !== null) {
      this.configId = args.configId;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_getOptionValueAsStringList_args.prototype = {};
OptionManager_getOptionValueAsStringList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsStringList_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsStringList_args');
  if (this.configId !== null && this.configId !== undefined) {
    output.writeFieldBegin('configId', Thrift.Type.STRING, 1);
    output.writeString(this.configId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getOptionValueAsStringList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getOptionValueAsStringList_result.prototype = {};
OptionManager_getOptionValueAsStringList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp363 = input.readListBegin();
        var _size62 = _rtmp363.size || 0;
        for (var _i64 = 0; _i64 < _size62; ++_i64) {
          var elem65 = null;
          elem65 = input.readString();
          this.success.push(elem65);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getOptionValueAsStringList_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getOptionValueAsStringList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter66 in this.success) {
      if (this.success.hasOwnProperty(iter66)) {
        iter66 = this.success[iter66];
        output.writeString(iter66);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getEnumeratedType_args = function(args) {
  this.enumeratedTypeId = null;
  if (args) {
    if (args.enumeratedTypeId !== undefined && args.enumeratedTypeId !== null) {
      this.enumeratedTypeId = args.enumeratedTypeId;
    }
  }
};
OptionManager_getEnumeratedType_args.prototype = {};
OptionManager_getEnumeratedType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.enumeratedTypeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getEnumeratedType_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getEnumeratedType_args');
  if (this.enumeratedTypeId !== null && this.enumeratedTypeId !== undefined) {
    output.writeFieldBegin('enumeratedTypeId', Thrift.Type.STRING, 1);
    output.writeString(this.enumeratedTypeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getEnumeratedType_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EnumeratedOptionType(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getEnumeratedType_result.prototype = {};
OptionManager_getEnumeratedType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EnumeratedOptionType();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getEnumeratedType_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getEnumeratedType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_evaluateCondition_args = function(args) {
  this.conditionId = null;
  this.configurationId = null;
  if (args) {
    if (args.conditionId !== undefined && args.conditionId !== null) {
      this.conditionId = args.conditionId;
    }
    if (args.configurationId !== undefined && args.configurationId !== null) {
      this.configurationId = args.configurationId;
    }
  }
};
OptionManager_evaluateCondition_args.prototype = {};
OptionManager_evaluateCondition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.conditionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_evaluateCondition_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_evaluateCondition_args');
  if (this.conditionId !== null && this.conditionId !== undefined) {
    output.writeFieldBegin('conditionId', Thrift.Type.STRING, 1);
    output.writeString(this.conditionId);
    output.writeFieldEnd();
  }
  if (this.configurationId !== null && this.configurationId !== undefined) {
    output.writeFieldBegin('configurationId', Thrift.Type.STRING, 2);
    output.writeString(this.configurationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_evaluateCondition_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_evaluateCondition_result.prototype = {};
OptionManager_evaluateCondition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_evaluateCondition_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_evaluateCondition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_evaluateEnumeratedOptionFilter_args = function(args) {
  this.filterId = null;
  this.configurationId = null;
  this.optionId = null;
  if (args) {
    if (args.filterId !== undefined && args.filterId !== null) {
      this.filterId = args.filterId;
    }
    if (args.configurationId !== undefined && args.configurationId !== null) {
      this.configurationId = args.configurationId;
    }
    if (args.optionId !== undefined && args.optionId !== null) {
      this.optionId = args.optionId;
    }
  }
};
OptionManager_evaluateEnumeratedOptionFilter_args.prototype = {};
OptionManager_evaluateEnumeratedOptionFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.optionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_evaluateEnumeratedOptionFilter_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_evaluateEnumeratedOptionFilter_args');
  if (this.filterId !== null && this.filterId !== undefined) {
    output.writeFieldBegin('filterId', Thrift.Type.STRING, 1);
    output.writeString(this.filterId);
    output.writeFieldEnd();
  }
  if (this.configurationId !== null && this.configurationId !== undefined) {
    output.writeFieldBegin('configurationId', Thrift.Type.STRING, 2);
    output.writeString(this.configurationId);
    output.writeFieldEnd();
  }
  if (this.optionId !== null && this.optionId !== undefined) {
    output.writeFieldBegin('optionId', Thrift.Type.STRING, 3);
    output.writeString(this.optionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_evaluateEnumeratedOptionFilter_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EnumeratedOptionValue]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_evaluateEnumeratedOptionFilter_result.prototype = {};
OptionManager_evaluateEnumeratedOptionFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp368 = input.readListBegin();
        var _size67 = _rtmp368.size || 0;
        for (var _i69 = 0; _i69 < _size67; ++_i69) {
          var elem70 = null;
          elem70 = new ttypes.EnumeratedOptionValue();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_evaluateEnumeratedOptionFilter_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_evaluateEnumeratedOptionFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success) {
      if (this.success.hasOwnProperty(iter71)) {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addOptionDefinition_args = function(args) {
  this.optionDefinition = null;
  if (args) {
    if (args.optionDefinition !== undefined && args.optionDefinition !== null) {
      this.optionDefinition = new ttypes.OptionDefinition(args.optionDefinition);
    }
  }
};
OptionManager_addOptionDefinition_args.prototype = {};
OptionManager_addOptionDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.optionDefinition = new ttypes.OptionDefinition();
        this.optionDefinition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addOptionDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addOptionDefinition_args');
  if (this.optionDefinition !== null && this.optionDefinition !== undefined) {
    output.writeFieldBegin('optionDefinition', Thrift.Type.STRUCT, 1);
    this.optionDefinition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addOptionDefinition_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addOptionDefinition_result.prototype = {};
OptionManager_addOptionDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addOptionDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addOptionDefinition_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeOption_args = function(args) {
  this.optionId = null;
  if (args) {
    if (args.optionId !== undefined && args.optionId !== null) {
      this.optionId = args.optionId;
    }
  }
};
OptionManager_removeOption_args.prototype = {};
OptionManager_removeOption_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.optionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeOption_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeOption_args');
  if (this.optionId !== null && this.optionId !== undefined) {
    output.writeFieldBegin('optionId', Thrift.Type.STRING, 1);
    output.writeString(this.optionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeOption_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeOption_result.prototype = {};
OptionManager_removeOption_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeOption_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeOption_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addTool_args = function(args) {
  this.tool = null;
  if (args) {
    if (args.tool !== undefined && args.tool !== null) {
      this.tool = new ttypes.ToolDefinition(args.tool);
    }
  }
};
OptionManager_addTool_args.prototype = {};
OptionManager_addTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tool = new ttypes.ToolDefinition();
        this.tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addTool_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addTool_args');
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRUCT, 1);
    this.tool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addTool_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addTool_result.prototype = {};
OptionManager_addTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addTool_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addTool_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeTool_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
OptionManager_removeTool_args.prototype = {};
OptionManager_removeTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeTool_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeTool_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeTool_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeTool_result.prototype = {};
OptionManager_removeTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeTool_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeTool_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addEnumeratedType_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.EnumeratedOptionType(args.type);
    }
  }
};
OptionManager_addEnumeratedType_args.prototype = {};
OptionManager_addEnumeratedType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.EnumeratedOptionType();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addEnumeratedType_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addEnumeratedType_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addEnumeratedType_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addEnumeratedType_result.prototype = {};
OptionManager_addEnumeratedType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addEnumeratedType_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addEnumeratedType_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeEnumeratedType_args = function(args) {
  this.typeId = null;
  if (args) {
    if (args.typeId !== undefined && args.typeId !== null) {
      this.typeId = args.typeId;
    }
  }
};
OptionManager_removeEnumeratedType_args.prototype = {};
OptionManager_removeEnumeratedType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.typeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeEnumeratedType_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeEnumeratedType_args');
  if (this.typeId !== null && this.typeId !== undefined) {
    output.writeFieldBegin('typeId', Thrift.Type.STRING, 1);
    output.writeString(this.typeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeEnumeratedType_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeEnumeratedType_result.prototype = {};
OptionManager_removeEnumeratedType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeEnumeratedType_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeEnumeratedType_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addToolchain_args = function(args) {
  this.toolchain = null;
  if (args) {
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = new ttypes.Toolchain(args.toolchain);
    }
  }
};
OptionManager_addToolchain_args.prototype = {};
OptionManager_addToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.toolchain = new ttypes.Toolchain();
        this.toolchain.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addToolchain_args');
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRUCT, 1);
    this.toolchain.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_addToolchain_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_addToolchain_result.prototype = {};
OptionManager_addToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_addToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_addToolchain_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeToolchain_args = function(args) {
  this.toolchainId = null;
  if (args) {
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
OptionManager_removeToolchain_args.prototype = {};
OptionManager_removeToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeToolchain_args');
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 1);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_removeToolchain_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_removeToolchain_result.prototype = {};
OptionManager_removeToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_removeToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_removeToolchain_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolchain_args = function(args) {
  this.toolchainId = null;
  if (args) {
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
OptionManager_getToolchain_args.prototype = {};
OptionManager_getToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolchain_args');
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 1);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolchain_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Toolchain(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getToolchain_result.prototype = {};
OptionManager_getToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Toolchain();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolchain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolchains_args = function(args) {
};
OptionManager_getToolchains_args.prototype = {};
OptionManager_getToolchains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolchains_args.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolchains_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManager_getToolchains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.OptionError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Toolchain]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
OptionManager_getToolchains_result.prototype = {};
OptionManager_getToolchains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp373 = input.readListBegin();
        var _size72 = _rtmp373.size || 0;
        for (var _i74 = 0; _i74 < _size72; ++_i74) {
          var elem75 = null;
          elem75 = new ttypes.Toolchain();
          elem75.read(input);
          this.success.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.OptionError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionManager_getToolchains_result.prototype.write = function(output) {
  output.writeStructBegin('OptionManager_getToolchains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter76 in this.success) {
      if (this.success.hasOwnProperty(iter76)) {
        iter76 = this.success[iter76];
        iter76.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
OptionManagerClient.prototype = {};
OptionManagerClient.prototype.seqid = function() { return this._seqid; };
OptionManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

OptionManagerClient.prototype.getOptionDefinition = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionDefinition(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionDefinition(id);
  }
};

OptionManagerClient.prototype.send_getOptionDefinition = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_getOptionDefinition_args(params);
  try {
    output.writeMessageBegin('getOptionDefinition', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionDefinition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionDefinition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionDefinition failed: unknown result');
};

OptionManagerClient.prototype.addConfiguration = function(config, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addConfiguration(config);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addConfiguration(config);
  }
};

OptionManagerClient.prototype.send_addConfiguration = function(config) {
  var output = new this.pClass(this.output);
  var params = {
    config: config
  };
  var args = new OptionManager_addConfiguration_args(params);
  try {
    output.writeMessageBegin('addConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.addConfigurationPresentation = function(configPresentation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addConfigurationPresentation(configPresentation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addConfigurationPresentation(configPresentation);
  }
};

OptionManagerClient.prototype.send_addConfigurationPresentation = function(configPresentation) {
  var output = new this.pClass(this.output);
  var params = {
    configPresentation: configPresentation
  };
  var args = new OptionManager_addConfigurationPresentation_args(params);
  try {
    output.writeMessageBegin('addConfigurationPresentation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addConfigurationPresentation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addConfigurationPresentation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.getConfigurationPresentation = function(configId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConfigurationPresentation(configId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConfigurationPresentation(configId);
  }
};

OptionManagerClient.prototype.send_getConfigurationPresentation = function(configId) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId
  };
  var args = new OptionManager_getConfigurationPresentation_args(params);
  try {
    output.writeMessageBegin('getConfigurationPresentation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getConfigurationPresentation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getConfigurationPresentation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConfigurationPresentation failed: unknown result');
};

OptionManagerClient.prototype.removeConfigurationPresentation = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeConfigurationPresentation(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeConfigurationPresentation(id);
  }
};

OptionManagerClient.prototype.send_removeConfigurationPresentation = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_removeConfigurationPresentation_args(params);
  try {
    output.writeMessageBegin('removeConfigurationPresentation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeConfigurationPresentation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeConfigurationPresentation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.getOptionConfiguration = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionConfiguration(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionConfiguration(id);
  }
};

OptionManagerClient.prototype.send_getOptionConfiguration = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_getOptionConfiguration_args(params);
  try {
    output.writeMessageBegin('getOptionConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionConfiguration failed: unknown result');
};

OptionManagerClient.prototype.removeOptionConfiguration = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeOptionConfiguration(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeOptionConfiguration(id);
  }
};

OptionManagerClient.prototype.send_removeOptionConfiguration = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_removeOptionConfiguration_args(params);
  try {
    output.writeMessageBegin('removeOptionConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeOptionConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeOptionConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.verifyOptionConfiguration = function(config, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyOptionConfiguration(config);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyOptionConfiguration(config);
  }
};

OptionManagerClient.prototype.send_verifyOptionConfiguration = function(config) {
  var output = new this.pClass(this.output);
  var params = {
    config: config
  };
  var args = new OptionManager_verifyOptionConfiguration_args(params);
  try {
    output.writeMessageBegin('verifyOptionConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_verifyOptionConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_verifyOptionConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyOptionConfiguration failed: unknown result');
};

OptionManagerClient.prototype.getTool = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTool(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTool(id);
  }
};

OptionManagerClient.prototype.send_getTool = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_getTool_args(params);
  try {
    output.writeMessageBegin('getTool', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTool failed: unknown result');
};

OptionManagerClient.prototype.getToolCommandLine = function(configId, toolId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolCommandLine(configId, toolId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolCommandLine(configId, toolId);
  }
};

OptionManagerClient.prototype.send_getToolCommandLine = function(configId, toolId) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    toolId: toolId
  };
  var args = new OptionManager_getToolCommandLine_args(params);
  try {
    output.writeMessageBegin('getToolCommandLine', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getToolCommandLine = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getToolCommandLine_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolCommandLine failed: unknown result');
};

OptionManagerClient.prototype.getOptionValue = function(configId, optionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionValue(configId, optionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionValue(configId, optionId);
  }
};

OptionManagerClient.prototype.send_getOptionValue = function(configId, optionId) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    optionId: optionId
  };
  var args = new OptionManager_getOptionValue_args(params);
  try {
    output.writeMessageBegin('getOptionValue', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionValue failed: unknown result');
};

OptionManagerClient.prototype.getOptionValueAsString = function(configId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionValueAsString(configId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionValueAsString(configId, id);
  }
};

OptionManagerClient.prototype.send_getOptionValueAsString = function(configId, id) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    id: id
  };
  var args = new OptionManager_getOptionValueAsString_args(params);
  try {
    output.writeMessageBegin('getOptionValueAsString', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionValueAsString = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionValueAsString_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionValueAsString failed: unknown result');
};

OptionManagerClient.prototype.getOptionValueAsBoolean = function(configId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionValueAsBoolean(configId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionValueAsBoolean(configId, id);
  }
};

OptionManagerClient.prototype.send_getOptionValueAsBoolean = function(configId, id) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    id: id
  };
  var args = new OptionManager_getOptionValueAsBoolean_args(params);
  try {
    output.writeMessageBegin('getOptionValueAsBoolean', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionValueAsBoolean = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionValueAsBoolean_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionValueAsBoolean failed: unknown result');
};

OptionManagerClient.prototype.getOptionValueAsEnumerated = function(configId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionValueAsEnumerated(configId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionValueAsEnumerated(configId, id);
  }
};

OptionManagerClient.prototype.send_getOptionValueAsEnumerated = function(configId, id) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    id: id
  };
  var args = new OptionManager_getOptionValueAsEnumerated_args(params);
  try {
    output.writeMessageBegin('getOptionValueAsEnumerated', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionValueAsEnumerated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionValueAsEnumerated_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionValueAsEnumerated failed: unknown result');
};

OptionManagerClient.prototype.getOptionValueAsStringList = function(configId, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptionValueAsStringList(configId, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptionValueAsStringList(configId, id);
  }
};

OptionManagerClient.prototype.send_getOptionValueAsStringList = function(configId, id) {
  var output = new this.pClass(this.output);
  var params = {
    configId: configId,
    id: id
  };
  var args = new OptionManager_getOptionValueAsStringList_args(params);
  try {
    output.writeMessageBegin('getOptionValueAsStringList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getOptionValueAsStringList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getOptionValueAsStringList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptionValueAsStringList failed: unknown result');
};

OptionManagerClient.prototype.getEnumeratedType = function(enumeratedTypeId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEnumeratedType(enumeratedTypeId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEnumeratedType(enumeratedTypeId);
  }
};

OptionManagerClient.prototype.send_getEnumeratedType = function(enumeratedTypeId) {
  var output = new this.pClass(this.output);
  var params = {
    enumeratedTypeId: enumeratedTypeId
  };
  var args = new OptionManager_getEnumeratedType_args(params);
  try {
    output.writeMessageBegin('getEnumeratedType', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getEnumeratedType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getEnumeratedType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEnumeratedType failed: unknown result');
};

OptionManagerClient.prototype.evaluateCondition = function(conditionId, configurationId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_evaluateCondition(conditionId, configurationId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_evaluateCondition(conditionId, configurationId);
  }
};

OptionManagerClient.prototype.send_evaluateCondition = function(conditionId, configurationId) {
  var output = new this.pClass(this.output);
  var params = {
    conditionId: conditionId,
    configurationId: configurationId
  };
  var args = new OptionManager_evaluateCondition_args(params);
  try {
    output.writeMessageBegin('evaluateCondition', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_evaluateCondition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_evaluateCondition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('evaluateCondition failed: unknown result');
};

OptionManagerClient.prototype.evaluateEnumeratedOptionFilter = function(filterId, configurationId, optionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_evaluateEnumeratedOptionFilter(filterId, configurationId, optionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_evaluateEnumeratedOptionFilter(filterId, configurationId, optionId);
  }
};

OptionManagerClient.prototype.send_evaluateEnumeratedOptionFilter = function(filterId, configurationId, optionId) {
  var output = new this.pClass(this.output);
  var params = {
    filterId: filterId,
    configurationId: configurationId,
    optionId: optionId
  };
  var args = new OptionManager_evaluateEnumeratedOptionFilter_args(params);
  try {
    output.writeMessageBegin('evaluateEnumeratedOptionFilter', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_evaluateEnumeratedOptionFilter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_evaluateEnumeratedOptionFilter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('evaluateEnumeratedOptionFilter failed: unknown result');
};

OptionManagerClient.prototype.addOptionDefinition = function(optionDefinition, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addOptionDefinition(optionDefinition);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addOptionDefinition(optionDefinition);
  }
};

OptionManagerClient.prototype.send_addOptionDefinition = function(optionDefinition) {
  var output = new this.pClass(this.output);
  var params = {
    optionDefinition: optionDefinition
  };
  var args = new OptionManager_addOptionDefinition_args(params);
  try {
    output.writeMessageBegin('addOptionDefinition', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addOptionDefinition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addOptionDefinition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.removeOption = function(optionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeOption(optionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeOption(optionId);
  }
};

OptionManagerClient.prototype.send_removeOption = function(optionId) {
  var output = new this.pClass(this.output);
  var params = {
    optionId: optionId
  };
  var args = new OptionManager_removeOption_args(params);
  try {
    output.writeMessageBegin('removeOption', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeOption = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeOption_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.addTool = function(tool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addTool(tool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addTool(tool);
  }
};

OptionManagerClient.prototype.send_addTool = function(tool) {
  var output = new this.pClass(this.output);
  var params = {
    tool: tool
  };
  var args = new OptionManager_addTool_args(params);
  try {
    output.writeMessageBegin('addTool', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.removeTool = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeTool(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeTool(id);
  }
};

OptionManagerClient.prototype.send_removeTool = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new OptionManager_removeTool_args(params);
  try {
    output.writeMessageBegin('removeTool', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.addEnumeratedType = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addEnumeratedType(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addEnumeratedType(type);
  }
};

OptionManagerClient.prototype.send_addEnumeratedType = function(type) {
  var output = new this.pClass(this.output);
  var params = {
    type: type
  };
  var args = new OptionManager_addEnumeratedType_args(params);
  try {
    output.writeMessageBegin('addEnumeratedType', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addEnumeratedType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addEnumeratedType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.removeEnumeratedType = function(typeId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeEnumeratedType(typeId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeEnumeratedType(typeId);
  }
};

OptionManagerClient.prototype.send_removeEnumeratedType = function(typeId) {
  var output = new this.pClass(this.output);
  var params = {
    typeId: typeId
  };
  var args = new OptionManager_removeEnumeratedType_args(params);
  try {
    output.writeMessageBegin('removeEnumeratedType', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeEnumeratedType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeEnumeratedType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.addToolchain = function(toolchain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addToolchain(toolchain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addToolchain(toolchain);
  }
};

OptionManagerClient.prototype.send_addToolchain = function(toolchain) {
  var output = new this.pClass(this.output);
  var params = {
    toolchain: toolchain
  };
  var args = new OptionManager_addToolchain_args(params);
  try {
    output.writeMessageBegin('addToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_addToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_addToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.removeToolchain = function(toolchainId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeToolchain(toolchainId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeToolchain(toolchainId);
  }
};

OptionManagerClient.prototype.send_removeToolchain = function(toolchainId) {
  var output = new this.pClass(this.output);
  var params = {
    toolchainId: toolchainId
  };
  var args = new OptionManager_removeToolchain_args(params);
  try {
    output.writeMessageBegin('removeToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_removeToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_removeToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

OptionManagerClient.prototype.getToolchain = function(toolchainId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolchain(toolchainId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolchain(toolchainId);
  }
};

OptionManagerClient.prototype.send_getToolchain = function(toolchainId) {
  var output = new this.pClass(this.output);
  var params = {
    toolchainId: toolchainId
  };
  var args = new OptionManager_getToolchain_args(params);
  try {
    output.writeMessageBegin('getToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolchain failed: unknown result');
};

OptionManagerClient.prototype.getToolchains = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolchains();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolchains();
  }
};

OptionManagerClient.prototype.send_getToolchains = function() {
  var output = new this.pClass(this.output);
  var args = new OptionManager_getToolchains_args();
  try {
    output.writeMessageBegin('getToolchains', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

OptionManagerClient.prototype.recv_getToolchains = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new OptionManager_getToolchains_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolchains failed: unknown result');
};
var OptionManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
OptionManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
OptionManagerProcessor.prototype.process_getOptionDefinition = function(seqid, input, output) {
  var args = new OptionManager_getOptionDefinition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionDefinition.length === 1) {
    Q.fcall(this._handler.getOptionDefinition.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionDefinition_result({success: result});
      output.writeMessageBegin("getOptionDefinition", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionDefinition_result(err);
        output.writeMessageBegin("getOptionDefinition", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionDefinition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionDefinition(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionDefinition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionDefinition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionDefinition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addConfiguration = function(seqid, input, output) {
  var args = new OptionManager_addConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addConfiguration.length === 1) {
    Q.fcall(this._handler.addConfiguration.bind(this._handler),
      args.config
    ).then(function(result) {
      var result_obj = new OptionManager_addConfiguration_result({success: result});
      output.writeMessageBegin("addConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addConfiguration_result(err);
        output.writeMessageBegin("addConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addConfiguration(args.config, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addConfigurationPresentation = function(seqid, input, output) {
  var args = new OptionManager_addConfigurationPresentation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addConfigurationPresentation.length === 1) {
    Q.fcall(this._handler.addConfigurationPresentation.bind(this._handler),
      args.configPresentation
    ).then(function(result) {
      var result_obj = new OptionManager_addConfigurationPresentation_result({success: result});
      output.writeMessageBegin("addConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addConfigurationPresentation_result(err);
        output.writeMessageBegin("addConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addConfigurationPresentation(args.configPresentation, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addConfigurationPresentation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getConfigurationPresentation = function(seqid, input, output) {
  var args = new OptionManager_getConfigurationPresentation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConfigurationPresentation.length === 1) {
    Q.fcall(this._handler.getConfigurationPresentation.bind(this._handler),
      args.configId
    ).then(function(result) {
      var result_obj = new OptionManager_getConfigurationPresentation_result({success: result});
      output.writeMessageBegin("getConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getConfigurationPresentation_result(err);
        output.writeMessageBegin("getConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getConfigurationPresentation(args.configId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getConfigurationPresentation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeConfigurationPresentation = function(seqid, input, output) {
  var args = new OptionManager_removeConfigurationPresentation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeConfigurationPresentation.length === 1) {
    Q.fcall(this._handler.removeConfigurationPresentation.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_removeConfigurationPresentation_result({success: result});
      output.writeMessageBegin("removeConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeConfigurationPresentation_result(err);
        output.writeMessageBegin("removeConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeConfigurationPresentation(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeConfigurationPresentation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeConfigurationPresentation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeConfigurationPresentation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionConfiguration = function(seqid, input, output) {
  var args = new OptionManager_getOptionConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionConfiguration.length === 1) {
    Q.fcall(this._handler.getOptionConfiguration.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionConfiguration_result({success: result});
      output.writeMessageBegin("getOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionConfiguration_result(err);
        output.writeMessageBegin("getOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionConfiguration(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeOptionConfiguration = function(seqid, input, output) {
  var args = new OptionManager_removeOptionConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeOptionConfiguration.length === 1) {
    Q.fcall(this._handler.removeOptionConfiguration.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_removeOptionConfiguration_result({success: result});
      output.writeMessageBegin("removeOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeOptionConfiguration_result(err);
        output.writeMessageBegin("removeOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeOptionConfiguration(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeOptionConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_verifyOptionConfiguration = function(seqid, input, output) {
  var args = new OptionManager_verifyOptionConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyOptionConfiguration.length === 1) {
    Q.fcall(this._handler.verifyOptionConfiguration.bind(this._handler),
      args.config
    ).then(function(result) {
      var result_obj = new OptionManager_verifyOptionConfiguration_result({success: result});
      output.writeMessageBegin("verifyOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("verifyOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verifyOptionConfiguration(args.config, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new OptionManager_verifyOptionConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyOptionConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyOptionConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getTool = function(seqid, input, output) {
  var args = new OptionManager_getTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTool.length === 1) {
    Q.fcall(this._handler.getTool.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getTool_result({success: result});
      output.writeMessageBegin("getTool", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getTool_result(err);
        output.writeMessageBegin("getTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTool(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getToolCommandLine = function(seqid, input, output) {
  var args = new OptionManager_getToolCommandLine_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolCommandLine.length === 2) {
    Q.fcall(this._handler.getToolCommandLine.bind(this._handler),
      args.configId,
      args.toolId
    ).then(function(result) {
      var result_obj = new OptionManager_getToolCommandLine_result({success: result});
      output.writeMessageBegin("getToolCommandLine", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getToolCommandLine_result(err);
        output.writeMessageBegin("getToolCommandLine", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolCommandLine", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolCommandLine(args.configId, args.toolId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getToolCommandLine_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolCommandLine", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolCommandLine", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionValue = function(seqid, input, output) {
  var args = new OptionManager_getOptionValue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionValue.length === 2) {
    Q.fcall(this._handler.getOptionValue.bind(this._handler),
      args.configId,
      args.optionId
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionValue_result({success: result});
      output.writeMessageBegin("getOptionValue", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionValue_result(err);
        output.writeMessageBegin("getOptionValue", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionValue(args.configId, args.optionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionValue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionValue", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionValueAsString = function(seqid, input, output) {
  var args = new OptionManager_getOptionValueAsString_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionValueAsString.length === 2) {
    Q.fcall(this._handler.getOptionValueAsString.bind(this._handler),
      args.configId,
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionValueAsString_result({success: result});
      output.writeMessageBegin("getOptionValueAsString", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionValueAsString_result(err);
        output.writeMessageBegin("getOptionValueAsString", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsString", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionValueAsString(args.configId, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionValueAsString_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionValueAsString", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsString", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionValueAsBoolean = function(seqid, input, output) {
  var args = new OptionManager_getOptionValueAsBoolean_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionValueAsBoolean.length === 2) {
    Q.fcall(this._handler.getOptionValueAsBoolean.bind(this._handler),
      args.configId,
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionValueAsBoolean_result({success: result});
      output.writeMessageBegin("getOptionValueAsBoolean", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionValueAsBoolean_result(err);
        output.writeMessageBegin("getOptionValueAsBoolean", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsBoolean", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionValueAsBoolean(args.configId, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionValueAsBoolean_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionValueAsBoolean", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsBoolean", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionValueAsEnumerated = function(seqid, input, output) {
  var args = new OptionManager_getOptionValueAsEnumerated_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionValueAsEnumerated.length === 2) {
    Q.fcall(this._handler.getOptionValueAsEnumerated.bind(this._handler),
      args.configId,
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionValueAsEnumerated_result({success: result});
      output.writeMessageBegin("getOptionValueAsEnumerated", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionValueAsEnumerated_result(err);
        output.writeMessageBegin("getOptionValueAsEnumerated", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsEnumerated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionValueAsEnumerated(args.configId, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionValueAsEnumerated_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionValueAsEnumerated", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsEnumerated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getOptionValueAsStringList = function(seqid, input, output) {
  var args = new OptionManager_getOptionValueAsStringList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptionValueAsStringList.length === 2) {
    Q.fcall(this._handler.getOptionValueAsStringList.bind(this._handler),
      args.configId,
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_getOptionValueAsStringList_result({success: result});
      output.writeMessageBegin("getOptionValueAsStringList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getOptionValueAsStringList_result(err);
        output.writeMessageBegin("getOptionValueAsStringList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsStringList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptionValueAsStringList(args.configId, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getOptionValueAsStringList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptionValueAsStringList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptionValueAsStringList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getEnumeratedType = function(seqid, input, output) {
  var args = new OptionManager_getEnumeratedType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEnumeratedType.length === 1) {
    Q.fcall(this._handler.getEnumeratedType.bind(this._handler),
      args.enumeratedTypeId
    ).then(function(result) {
      var result_obj = new OptionManager_getEnumeratedType_result({success: result});
      output.writeMessageBegin("getEnumeratedType", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getEnumeratedType_result(err);
        output.writeMessageBegin("getEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getEnumeratedType(args.enumeratedTypeId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getEnumeratedType_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_evaluateCondition = function(seqid, input, output) {
  var args = new OptionManager_evaluateCondition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.evaluateCondition.length === 2) {
    Q.fcall(this._handler.evaluateCondition.bind(this._handler),
      args.conditionId,
      args.configurationId
    ).then(function(result) {
      var result_obj = new OptionManager_evaluateCondition_result({success: result});
      output.writeMessageBegin("evaluateCondition", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_evaluateCondition_result(err);
        output.writeMessageBegin("evaluateCondition", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evaluateCondition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.evaluateCondition(args.conditionId, args.configurationId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_evaluateCondition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("evaluateCondition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evaluateCondition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_evaluateEnumeratedOptionFilter = function(seqid, input, output) {
  var args = new OptionManager_evaluateEnumeratedOptionFilter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.evaluateEnumeratedOptionFilter.length === 3) {
    Q.fcall(this._handler.evaluateEnumeratedOptionFilter.bind(this._handler),
      args.filterId,
      args.configurationId,
      args.optionId
    ).then(function(result) {
      var result_obj = new OptionManager_evaluateEnumeratedOptionFilter_result({success: result});
      output.writeMessageBegin("evaluateEnumeratedOptionFilter", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_evaluateEnumeratedOptionFilter_result(err);
        output.writeMessageBegin("evaluateEnumeratedOptionFilter", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evaluateEnumeratedOptionFilter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.evaluateEnumeratedOptionFilter(args.filterId, args.configurationId, args.optionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_evaluateEnumeratedOptionFilter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("evaluateEnumeratedOptionFilter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evaluateEnumeratedOptionFilter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addOptionDefinition = function(seqid, input, output) {
  var args = new OptionManager_addOptionDefinition_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addOptionDefinition.length === 1) {
    Q.fcall(this._handler.addOptionDefinition.bind(this._handler),
      args.optionDefinition
    ).then(function(result) {
      var result_obj = new OptionManager_addOptionDefinition_result({success: result});
      output.writeMessageBegin("addOptionDefinition", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addOptionDefinition_result(err);
        output.writeMessageBegin("addOptionDefinition", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addOptionDefinition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addOptionDefinition(args.optionDefinition, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addOptionDefinition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addOptionDefinition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addOptionDefinition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeOption = function(seqid, input, output) {
  var args = new OptionManager_removeOption_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeOption.length === 1) {
    Q.fcall(this._handler.removeOption.bind(this._handler),
      args.optionId
    ).then(function(result) {
      var result_obj = new OptionManager_removeOption_result({success: result});
      output.writeMessageBegin("removeOption", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeOption_result(err);
        output.writeMessageBegin("removeOption", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeOption", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeOption(args.optionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeOption_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeOption", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeOption", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addTool = function(seqid, input, output) {
  var args = new OptionManager_addTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addTool.length === 1) {
    Q.fcall(this._handler.addTool.bind(this._handler),
      args.tool
    ).then(function(result) {
      var result_obj = new OptionManager_addTool_result({success: result});
      output.writeMessageBegin("addTool", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addTool_result(err);
        output.writeMessageBegin("addTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addTool(args.tool, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeTool = function(seqid, input, output) {
  var args = new OptionManager_removeTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeTool.length === 1) {
    Q.fcall(this._handler.removeTool.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new OptionManager_removeTool_result({success: result});
      output.writeMessageBegin("removeTool", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeTool_result(err);
        output.writeMessageBegin("removeTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeTool(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addEnumeratedType = function(seqid, input, output) {
  var args = new OptionManager_addEnumeratedType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addEnumeratedType.length === 1) {
    Q.fcall(this._handler.addEnumeratedType.bind(this._handler),
      args.type
    ).then(function(result) {
      var result_obj = new OptionManager_addEnumeratedType_result({success: result});
      output.writeMessageBegin("addEnumeratedType", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addEnumeratedType_result(err);
        output.writeMessageBegin("addEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addEnumeratedType(args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addEnumeratedType_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeEnumeratedType = function(seqid, input, output) {
  var args = new OptionManager_removeEnumeratedType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeEnumeratedType.length === 1) {
    Q.fcall(this._handler.removeEnumeratedType.bind(this._handler),
      args.typeId
    ).then(function(result) {
      var result_obj = new OptionManager_removeEnumeratedType_result({success: result});
      output.writeMessageBegin("removeEnumeratedType", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeEnumeratedType_result(err);
        output.writeMessageBegin("removeEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeEnumeratedType(args.typeId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeEnumeratedType_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeEnumeratedType", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeEnumeratedType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_addToolchain = function(seqid, input, output) {
  var args = new OptionManager_addToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addToolchain.length === 1) {
    Q.fcall(this._handler.addToolchain.bind(this._handler),
      args.toolchain
    ).then(function(result) {
      var result_obj = new OptionManager_addToolchain_result({success: result});
      output.writeMessageBegin("addToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_addToolchain_result(err);
        output.writeMessageBegin("addToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addToolchain(args.toolchain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_addToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_removeToolchain = function(seqid, input, output) {
  var args = new OptionManager_removeToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeToolchain.length === 1) {
    Q.fcall(this._handler.removeToolchain.bind(this._handler),
      args.toolchainId
    ).then(function(result) {
      var result_obj = new OptionManager_removeToolchain_result({success: result});
      output.writeMessageBegin("removeToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_removeToolchain_result(err);
        output.writeMessageBegin("removeToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeToolchain(args.toolchainId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_removeToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getToolchain = function(seqid, input, output) {
  var args = new OptionManager_getToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolchain.length === 1) {
    Q.fcall(this._handler.getToolchain.bind(this._handler),
      args.toolchainId
    ).then(function(result) {
      var result_obj = new OptionManager_getToolchain_result({success: result});
      output.writeMessageBegin("getToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getToolchain_result(err);
        output.writeMessageBegin("getToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolchain(args.toolchainId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
OptionManagerProcessor.prototype.process_getToolchains = function(seqid, input, output) {
  var args = new OptionManager_getToolchains_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolchains.length === 0) {
    Q.fcall(this._handler.getToolchains.bind(this._handler)
    ).then(function(result) {
      var result_obj = new OptionManager_getToolchains_result({success: result});
      output.writeMessageBegin("getToolchains", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.OptionError) {
        result = new OptionManager_getToolchains_result(err);
        output.writeMessageBegin("getToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getToolchains(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.OptionError) {
        result_obj = new OptionManager_getToolchains_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

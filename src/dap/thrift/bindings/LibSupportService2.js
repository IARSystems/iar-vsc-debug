//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./libsupport_types');
//HELPER FUNCTIONS AND STRUCTURES

var LibSupportService2_requestInputBinary_args = function(args) {
  this.len = null;
  if (args) {
    if (args.len !== undefined && args.len !== null) {
      this.len = args.len;
    }
  }
};
LibSupportService2_requestInputBinary_args.prototype = {};
LibSupportService2_requestInputBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInputBinary_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInputBinary_args');
  if (this.len !== null && this.len !== undefined) {
    output.writeFieldBegin('len', Thrift.Type.I32, 1);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInputBinary_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LibSupportService2_requestInputBinary_result.prototype = {};
LibSupportService2_requestInputBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInputBinary_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInputBinary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInput_args = function(args) {
  this.len = null;
  if (args) {
    if (args.len !== undefined && args.len !== null) {
      this.len = args.len;
    }
  }
};
LibSupportService2_requestInput_args.prototype = {};
LibSupportService2_requestInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInput_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInput_args');
  if (this.len !== null && this.len !== undefined) {
    output.writeFieldBegin('len', Thrift.Type.I32, 1);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInput_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LibSupportService2_requestInput_result.prototype = {};
LibSupportService2_requestInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInput_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInput_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutputBinary_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
LibSupportService2_printOutputBinary_args.prototype = {};
LibSupportService2_printOutputBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutputBinary_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutputBinary_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutputBinary_result = function(args) {
};
LibSupportService2_printOutputBinary_result.prototype = {};
LibSupportService2_printOutputBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutputBinary_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutputBinary_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutput_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
LibSupportService2_printOutput_args.prototype = {};
LibSupportService2_printOutput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutput_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutput_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutput_result = function(args) {
};
LibSupportService2_printOutput_result.prototype = {};
LibSupportService2_printOutput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutput_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutput_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_exit_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
LibSupportService2_exit_args.prototype = {};
LibSupportService2_exit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_exit_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_exit_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_exit_result = function(args) {
};
LibSupportService2_exit_result.prototype = {};
LibSupportService2_exit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_exit_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_exit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_reportAssert_args = function(args) {
  this.file = null;
  this.line = null;
  this.message = null;
  if (args) {
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = args.line;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
LibSupportService2_reportAssert_args.prototype = {};
LibSupportService2_reportAssert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.line = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_reportAssert_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_reportAssert_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 1);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.STRING, 2);
    output.writeString(this.line);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_reportAssert_result = function(args) {
};
LibSupportService2_reportAssert_result.prototype = {};
LibSupportService2_reportAssert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_reportAssert_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_reportAssert_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2Client = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
LibSupportService2Client.prototype = {};
LibSupportService2Client.prototype.seqid = function() { return this._seqid; };
LibSupportService2Client.prototype.new_seqid = function() { return this._seqid += 1; };

LibSupportService2Client.prototype.requestInputBinary = function(len, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestInputBinary(len);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestInputBinary(len);
  }
};

LibSupportService2Client.prototype.send_requestInputBinary = function(len) {
  var output = new this.pClass(this.output);
  var params = {
    len: len
  };
  var args = new LibSupportService2_requestInputBinary_args(params);
  try {
    output.writeMessageBegin('requestInputBinary', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_requestInputBinary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_requestInputBinary_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestInputBinary failed: unknown result');
};

LibSupportService2Client.prototype.requestInput = function(len, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestInput(len);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestInput(len);
  }
};

LibSupportService2Client.prototype.send_requestInput = function(len) {
  var output = new this.pClass(this.output);
  var params = {
    len: len
  };
  var args = new LibSupportService2_requestInput_args(params);
  try {
    output.writeMessageBegin('requestInput', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_requestInput = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_requestInput_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestInput failed: unknown result');
};

LibSupportService2Client.prototype.printOutputBinary = function(data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_printOutputBinary(data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_printOutputBinary(data);
  }
};

LibSupportService2Client.prototype.send_printOutputBinary = function(data) {
  var output = new this.pClass(this.output);
  var params = {
    data: data
  };
  var args = new LibSupportService2_printOutputBinary_args(params);
  try {
    output.writeMessageBegin('printOutputBinary', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_printOutputBinary = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_printOutputBinary_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LibSupportService2Client.prototype.printOutput = function(data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_printOutput(data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_printOutput(data);
  }
};

LibSupportService2Client.prototype.send_printOutput = function(data) {
  var output = new this.pClass(this.output);
  var params = {
    data: data
  };
  var args = new LibSupportService2_printOutput_args(params);
  try {
    output.writeMessageBegin('printOutput', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_printOutput = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_printOutput_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LibSupportService2Client.prototype.exit = function(code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exit(code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exit(code);
  }
};

LibSupportService2Client.prototype.send_exit = function(code) {
  var output = new this.pClass(this.output);
  var params = {
    code: code
  };
  var args = new LibSupportService2_exit_args(params);
  try {
    output.writeMessageBegin('exit', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_exit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_exit_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LibSupportService2Client.prototype.reportAssert = function(file, line, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportAssert(file, line, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportAssert(file, line, message);
  }
};

LibSupportService2Client.prototype.send_reportAssert = function(file, line, message) {
  var output = new this.pClass(this.output);
  var params = {
    file: file,
    line: line,
    message: message
  };
  var args = new LibSupportService2_reportAssert_args(params);
  try {
    output.writeMessageBegin('reportAssert', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_reportAssert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LibSupportService2_reportAssert_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var LibSupportService2Processor = exports.Processor = function(handler) {
  this._handler = handler;
};
LibSupportService2Processor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
LibSupportService2Processor.prototype.process_requestInputBinary = function(seqid, input, output) {
  var args = new LibSupportService2_requestInputBinary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestInputBinary.length === 1) {
    Q.fcall(this._handler.requestInputBinary.bind(this._handler),
      args.len
    ).then(function(result) {
      var result_obj = new LibSupportService2_requestInputBinary_result({success: result});
      output.writeMessageBegin("requestInputBinary", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("requestInputBinary", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.requestInputBinary(args.len, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_requestInputBinary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("requestInputBinary", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestInputBinary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LibSupportService2Processor.prototype.process_requestInput = function(seqid, input, output) {
  var args = new LibSupportService2_requestInput_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestInput.length === 1) {
    Q.fcall(this._handler.requestInput.bind(this._handler),
      args.len
    ).then(function(result) {
      var result_obj = new LibSupportService2_requestInput_result({success: result});
      output.writeMessageBegin("requestInput", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("requestInput", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.requestInput(args.len, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_requestInput_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("requestInput", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestInput", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LibSupportService2Processor.prototype.process_printOutputBinary = function(seqid, input, output) {
  var args = new LibSupportService2_printOutputBinary_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.printOutputBinary.length === 1) {
    Q.fcall(this._handler.printOutputBinary.bind(this._handler),
      args.data
    ).then(function(result) {
      var result_obj = new LibSupportService2_printOutputBinary_result({success: result});
      output.writeMessageBegin("printOutputBinary", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("printOutputBinary", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.printOutputBinary(args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_printOutputBinary_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("printOutputBinary", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("printOutputBinary", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LibSupportService2Processor.prototype.process_printOutput = function(seqid, input, output) {
  var args = new LibSupportService2_printOutput_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.printOutput.length === 1) {
    Q.fcall(this._handler.printOutput.bind(this._handler),
      args.data
    ).then(function(result) {
      var result_obj = new LibSupportService2_printOutput_result({success: result});
      output.writeMessageBegin("printOutput", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("printOutput", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.printOutput(args.data, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_printOutput_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("printOutput", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("printOutput", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LibSupportService2Processor.prototype.process_exit = function(seqid, input, output) {
  var args = new LibSupportService2_exit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exit.length === 1) {
    Q.fcall(this._handler.exit.bind(this._handler),
      args.code
    ).then(function(result) {
      var result_obj = new LibSupportService2_exit_result({success: result});
      output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exit(args.code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_exit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LibSupportService2Processor.prototype.process_reportAssert = function(seqid, input, output) {
  var args = new LibSupportService2_reportAssert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportAssert.length === 3) {
    Q.fcall(this._handler.reportAssert.bind(this._handler),
      args.file,
      args.line,
      args.message
    ).then(function(result) {
      var result_obj = new LibSupportService2_reportAssert_result({success: result});
      output.writeMessageBegin("reportAssert", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("reportAssert", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.reportAssert(args.file, args.line, args.message, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LibSupportService2_reportAssert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reportAssert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportAssert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./breakpoints_types');
import BREAKPOINTS_SERVICE = ttypes.BREAKPOINTS_SERVICE
import HeartbeatService = require('./HeartbeatService');

declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  getBreakpoints(): Q.Promise<shared_ttypes.Breakpoint[]>;

  getBreakpoints(callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint[])=>void): void;

  getBreakpoint(id: number): Q.Promise<shared_ttypes.Breakpoint>;

  getBreakpoint(id: number, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint)=>void): void;

  setBreakpointFromDescriptor(descriptor: string): Q.Promise<shared_ttypes.Breakpoint>;

  setBreakpointFromDescriptor(descriptor: string, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint)=>void): void;

  setBreakpointOnUle(ule: string, accessType: shared_ttypes.AccessType): Q.Promise<shared_ttypes.Breakpoint>;

  setBreakpointOnUle(ule: string, accessType: shared_ttypes.AccessType, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint)=>void): void;

  setBreakpointOnUleWithCategory(ule: string, accessType: shared_ttypes.AccessType, categoryId: string): Q.Promise<shared_ttypes.Breakpoint>;

  setBreakpointOnUleWithCategory(ule: string, accessType: shared_ttypes.AccessType, categoryId: string, callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint)=>void): void;

  enableBreakpoint(id: number, enable: boolean): Q.Promise<boolean>;

  enableBreakpoint(id: number, enable: boolean, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  removeBreakpoint(id: number): Q.Promise<boolean>;

  removeBreakpoint(id: number, callback?: (error: shared_ttypes.CSpyException, response: boolean)=>void): void;

  getRecentlyHitBreakpoints(): Q.Promise<shared_ttypes.Breakpoint[]>;

  getRecentlyHitBreakpoints(callback?: (error: shared_ttypes.CSpyException, response: shared_ttypes.Breakpoint[])=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakpoints(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getBreakpoint(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakpointFromDescriptor(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakpointOnUle(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setBreakpointOnUleWithCategory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableBreakpoint(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeBreakpoint(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRecentlyHitBreakpoints(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

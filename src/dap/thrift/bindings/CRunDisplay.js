//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ttypes = require('./crun_types');
//HELPER FUNCTIONS AND STRUCTURES

var CRunDisplay_itemAdded_args = function(args) {
  this.message = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.CRunMessage(args.message);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemAdded_args.prototype = {};
CRunDisplay_itemAdded_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.CRunMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemAdded_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemAdded_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemAdded_result = function(args) {
};
CRunDisplay_itemAdded_result.prototype = {};
CRunDisplay_itemAdded_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemAdded_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemAdded_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemUpdated_args = function(args) {
  this.message = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.CRunMessage(args.message);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemUpdated_args.prototype = {};
CRunDisplay_itemUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.CRunMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemUpdated_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemUpdated_result = function(args) {
};
CRunDisplay_itemUpdated_result.prototype = {};
CRunDisplay_itemUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemUpdated_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemRemoved_args = function(args) {
  this.index = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemRemoved_args.prototype = {};
CRunDisplay_itemRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemRemoved_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemRemoved_result = function(args) {
};
CRunDisplay_itemRemoved_result.prototype = {};
CRunDisplay_itemRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemRemoved_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_updateAll_args = function(args) {
  this.partnerNamespace = null;
  if (args) {
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_updateAll_args.prototype = {};
CRunDisplay_updateAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_updateAll_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_updateAll_args');
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 1);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_updateAll_result = function(args) {
};
CRunDisplay_updateAll_result.prototype = {};
CRunDisplay_updateAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_updateAll_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_updateAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_filtersChanged_args = function(args) {
  this.partnerNamespace = null;
  if (args) {
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_filtersChanged_args.prototype = {};
CRunDisplay_filtersChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_filtersChanged_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_filtersChanged_args');
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 1);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_filtersChanged_result = function(args) {
};
CRunDisplay_filtersChanged_result.prototype = {};
CRunDisplay_filtersChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_filtersChanged_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_filtersChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplayClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
CRunDisplayClient.prototype = {};
CRunDisplayClient.prototype.seqid = function() { return this._seqid; };
CRunDisplayClient.prototype.new_seqid = function() { return this._seqid += 1; };

CRunDisplayClient.prototype.itemAdded = function(message, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_itemAdded(message, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_itemAdded(message, partnerNamespace);
  }
};

CRunDisplayClient.prototype.send_itemAdded = function(message, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    message: message,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemAdded_args(params);
  try {
    output.writeMessageBegin('itemAdded', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemAdded = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunDisplay_itemAdded_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunDisplayClient.prototype.itemUpdated = function(message, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_itemUpdated(message, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_itemUpdated(message, partnerNamespace);
  }
};

CRunDisplayClient.prototype.send_itemUpdated = function(message, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    message: message,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemUpdated_args(params);
  try {
    output.writeMessageBegin('itemUpdated', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemUpdated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunDisplay_itemUpdated_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunDisplayClient.prototype.itemRemoved = function(index, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_itemRemoved(index, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_itemRemoved(index, partnerNamespace);
  }
};

CRunDisplayClient.prototype.send_itemRemoved = function(index, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    index: index,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemRemoved_args(params);
  try {
    output.writeMessageBegin('itemRemoved', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemRemoved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunDisplay_itemRemoved_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunDisplayClient.prototype.updateAll = function(partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateAll(partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateAll(partnerNamespace);
  }
};

CRunDisplayClient.prototype.send_updateAll = function(partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_updateAll_args(params);
  try {
    output.writeMessageBegin('updateAll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_updateAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunDisplay_updateAll_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CRunDisplayClient.prototype.filtersChanged = function(partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_filtersChanged(partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_filtersChanged(partnerNamespace);
  }
};

CRunDisplayClient.prototype.send_filtersChanged = function(partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_filtersChanged_args(params);
  try {
    output.writeMessageBegin('filtersChanged', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_filtersChanged = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CRunDisplay_filtersChanged_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var CRunDisplayProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
CRunDisplayProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CRunDisplayProcessor.prototype.process_itemAdded = function(seqid, input, output) {
  var args = new CRunDisplay_itemAdded_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.itemAdded.length === 2) {
    Q.fcall(this._handler.itemAdded.bind(this._handler),
      args.message,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new CRunDisplay_itemAdded_result({success: result});
      output.writeMessageBegin("itemAdded", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("itemAdded", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.itemAdded(args.message, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunDisplay_itemAdded_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("itemAdded", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("itemAdded", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunDisplayProcessor.prototype.process_itemUpdated = function(seqid, input, output) {
  var args = new CRunDisplay_itemUpdated_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.itemUpdated.length === 2) {
    Q.fcall(this._handler.itemUpdated.bind(this._handler),
      args.message,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new CRunDisplay_itemUpdated_result({success: result});
      output.writeMessageBegin("itemUpdated", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("itemUpdated", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.itemUpdated(args.message, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunDisplay_itemUpdated_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("itemUpdated", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("itemUpdated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunDisplayProcessor.prototype.process_itemRemoved = function(seqid, input, output) {
  var args = new CRunDisplay_itemRemoved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.itemRemoved.length === 2) {
    Q.fcall(this._handler.itemRemoved.bind(this._handler),
      args.index,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new CRunDisplay_itemRemoved_result({success: result});
      output.writeMessageBegin("itemRemoved", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("itemRemoved", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.itemRemoved(args.index, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunDisplay_itemRemoved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("itemRemoved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("itemRemoved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunDisplayProcessor.prototype.process_updateAll = function(seqid, input, output) {
  var args = new CRunDisplay_updateAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateAll.length === 1) {
    Q.fcall(this._handler.updateAll.bind(this._handler),
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new CRunDisplay_updateAll_result({success: result});
      output.writeMessageBegin("updateAll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("updateAll", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateAll(args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunDisplay_updateAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CRunDisplayProcessor.prototype.process_filtersChanged = function(seqid, input, output) {
  var args = new CRunDisplay_filtersChanged_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.filtersChanged.length === 1) {
    Q.fcall(this._handler.filtersChanged.bind(this._handler),
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new CRunDisplay_filtersChanged_result({success: result});
      output.writeMessageBegin("filtersChanged", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("filtersChanged", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.filtersChanged(args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CRunDisplay_filtersChanged_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("filtersChanged", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("filtersChanged", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

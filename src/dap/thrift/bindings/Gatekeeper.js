//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');
var cspy_ttypes = require('./cspy_types');
var ServiceRegistry_ttypes = require('./ServiceRegistry_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./ampsync_types');
//HELPER FUNCTIONS AND STRUCTURES

var Gatekeeper_SetRunAllCores_args = function(args) {
  this.all = null;
  if (args) {
    if (args.all !== undefined && args.all !== null) {
      this.all = args.all;
    }
  }
};
Gatekeeper_SetRunAllCores_args.prototype = {};
Gatekeeper_SetRunAllCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.all = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetRunAllCores_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetRunAllCores_args');
  if (this.all !== null && this.all !== undefined) {
    output.writeFieldBegin('all', Thrift.Type.BOOL, 1);
    output.writeBool(this.all);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetRunAllCores_result = function(args) {
};
Gatekeeper_SetRunAllCores_result.prototype = {};
Gatekeeper_SetRunAllCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetRunAllCores_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetRunAllCores_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetStartOneStartsAll_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
Gatekeeper_SetStartOneStartsAll_args.prototype = {};
Gatekeeper_SetStartOneStartsAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetStartOneStartsAll_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetStartOneStartsAll_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetStartOneStartsAll_result = function(args) {
};
Gatekeeper_SetStartOneStartsAll_result.prototype = {};
Gatekeeper_SetStartOneStartsAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetStartOneStartsAll_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetStartOneStartsAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetSoftCTI_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
Gatekeeper_SetSoftCTI_args.prototype = {};
Gatekeeper_SetSoftCTI_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetSoftCTI_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetSoftCTI_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetSoftCTI_result = function(args) {
};
Gatekeeper_SetSoftCTI_result.prototype = {};
Gatekeeper_SetSoftCTI_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetSoftCTI_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetSoftCTI_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_BeforeLowLevelGo_args = function(args) {
  this.core = null;
  this.multi = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.multi !== undefined && args.multi !== null) {
      this.multi = args.multi;
    }
  }
};
Gatekeeper_BeforeLowLevelGo_args.prototype = {};
Gatekeeper_BeforeLowLevelGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.multi = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_BeforeLowLevelGo_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_BeforeLowLevelGo_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.multi !== null && this.multi !== undefined) {
    output.writeFieldBegin('multi', Thrift.Type.BOOL, 2);
    output.writeBool(this.multi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_BeforeLowLevelGo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_BeforeLowLevelGo_result.prototype = {};
Gatekeeper_BeforeLowLevelGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_BeforeLowLevelGo_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_BeforeLowLevelGo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StartedCPU_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_StartedCPU_args.prototype = {};
Gatekeeper_StartedCPU_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StartedCPU_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StartedCPU_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StartedCPU_result = function(args) {
};
Gatekeeper_StartedCPU_result.prototype = {};
Gatekeeper_StartedCPU_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StartedCPU_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StartedCPU_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_CPUStoped_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_CPUStoped_args.prototype = {};
Gatekeeper_CPUStoped_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_CPUStoped_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_CPUStoped_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_CPUStoped_result = function(args) {
};
Gatekeeper_CPUStoped_result.prototype = {};
Gatekeeper_CPUStoped_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_CPUStoped_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_CPUStoped_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsTargetStopped_args = function(args) {
};
Gatekeeper_IsTargetStopped_args.prototype = {};
Gatekeeper_IsTargetStopped_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsTargetStopped_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsTargetStopped_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsTargetStopped_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_IsTargetStopped_result.prototype = {};
Gatekeeper_IsTargetStopped_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsTargetStopped_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsTargetStopped_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AfterLowLevelGo_args = function(args) {
  this.core = null;
  this.code = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
Gatekeeper_AfterLowLevelGo_args.prototype = {};
Gatekeeper_AfterLowLevelGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AfterLowLevelGo_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AfterLowLevelGo_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AfterLowLevelGo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_AfterLowLevelGo_result.prototype = {};
Gatekeeper_AfterLowLevelGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AfterLowLevelGo_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AfterLowLevelGo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_Reset_args = function(args) {
};
Gatekeeper_Reset_args.prototype = {};
Gatekeeper_Reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_Reset_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_Reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_Reset_result = function(args) {
};
Gatekeeper_Reset_result.prototype = {};
Gatekeeper_Reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_Reset_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_Reset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StopAll_args = function(args) {
};
Gatekeeper_StopAll_args.prototype = {};
Gatekeeper_StopAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StopAll_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StopAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StopAll_result = function(args) {
};
Gatekeeper_StopAll_result.prototype = {};
Gatekeeper_StopAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StopAll_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StopAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SpontaneousCoreStatusChange_args = function(args) {
  this.core = null;
  this.status = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
Gatekeeper_SpontaneousCoreStatusChange_args.prototype = {};
Gatekeeper_SpontaneousCoreStatusChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SpontaneousCoreStatusChange_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SpontaneousCoreStatusChange_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SpontaneousCoreStatusChange_result = function(args) {
};
Gatekeeper_SpontaneousCoreStatusChange_result.prototype = {};
Gatekeeper_SpontaneousCoreStatusChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SpontaneousCoreStatusChange_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SpontaneousCoreStatusChange_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_GetCoreStatus_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_GetCoreStatus_args.prototype = {};
Gatekeeper_GetCoreStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_GetCoreStatus_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_GetCoreStatus_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_GetCoreStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_GetCoreStatus_result.prototype = {};
Gatekeeper_GetCoreStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_GetCoreStatus_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_GetCoreStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsItOkToStopCore_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_IsItOkToStopCore_args.prototype = {};
Gatekeeper_IsItOkToStopCore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsItOkToStopCore_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsItOkToStopCore_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsItOkToStopCore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_IsItOkToStopCore_result.prototype = {};
Gatekeeper_IsItOkToStopCore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsItOkToStopCore_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsItOkToStopCore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GatekeeperClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(GatekeeperClient, HeartbeatServiceClient);
GatekeeperClient.prototype.seqid = function() { return this._seqid; };
GatekeeperClient.prototype.new_seqid = function() { return this._seqid += 1; };

GatekeeperClient.prototype.SetRunAllCores = function(all, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetRunAllCores(all);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetRunAllCores(all);
  }
};

GatekeeperClient.prototype.send_SetRunAllCores = function(all) {
  var output = new this.pClass(this.output);
  var params = {
    all: all
  };
  var args = new Gatekeeper_SetRunAllCores_args(params);
  try {
    output.writeMessageBegin('SetRunAllCores', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetRunAllCores = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_SetRunAllCores_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.SetStartOneStartsAll = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetStartOneStartsAll(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetStartOneStartsAll(on);
  }
};

GatekeeperClient.prototype.send_SetStartOneStartsAll = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new Gatekeeper_SetStartOneStartsAll_args(params);
  try {
    output.writeMessageBegin('SetStartOneStartsAll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetStartOneStartsAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_SetStartOneStartsAll_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.SetSoftCTI = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetSoftCTI(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetSoftCTI(on);
  }
};

GatekeeperClient.prototype.send_SetSoftCTI = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new Gatekeeper_SetSoftCTI_args(params);
  try {
    output.writeMessageBegin('SetSoftCTI', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetSoftCTI = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_SetSoftCTI_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.BeforeLowLevelGo = function(core, multi, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BeforeLowLevelGo(core, multi);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BeforeLowLevelGo(core, multi);
  }
};

GatekeeperClient.prototype.send_BeforeLowLevelGo = function(core, multi) {
  var output = new this.pClass(this.output);
  var params = {
    core: core,
    multi: multi
  };
  var args = new Gatekeeper_BeforeLowLevelGo_args(params);
  try {
    output.writeMessageBegin('BeforeLowLevelGo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_BeforeLowLevelGo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_BeforeLowLevelGo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('BeforeLowLevelGo failed: unknown result');
};

GatekeeperClient.prototype.StartedCPU = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StartedCPU(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StartedCPU(core);
  }
};

GatekeeperClient.prototype.send_StartedCPU = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Gatekeeper_StartedCPU_args(params);
  try {
    output.writeMessageBegin('StartedCPU', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_StartedCPU = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_StartedCPU_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.CPUStoped = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CPUStoped(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CPUStoped(core);
  }
};

GatekeeperClient.prototype.send_CPUStoped = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Gatekeeper_CPUStoped_args(params);
  try {
    output.writeMessageBegin('CPUStoped', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_CPUStoped = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_CPUStoped_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.IsTargetStopped = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsTargetStopped();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsTargetStopped();
  }
};

GatekeeperClient.prototype.send_IsTargetStopped = function() {
  var output = new this.pClass(this.output);
  var args = new Gatekeeper_IsTargetStopped_args();
  try {
    output.writeMessageBegin('IsTargetStopped', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_IsTargetStopped = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_IsTargetStopped_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsTargetStopped failed: unknown result');
};

GatekeeperClient.prototype.AfterLowLevelGo = function(core, code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AfterLowLevelGo(core, code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AfterLowLevelGo(core, code);
  }
};

GatekeeperClient.prototype.send_AfterLowLevelGo = function(core, code) {
  var output = new this.pClass(this.output);
  var params = {
    core: core,
    code: code
  };
  var args = new Gatekeeper_AfterLowLevelGo_args(params);
  try {
    output.writeMessageBegin('AfterLowLevelGo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_AfterLowLevelGo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_AfterLowLevelGo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('AfterLowLevelGo failed: unknown result');
};

GatekeeperClient.prototype.Reset = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Reset();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Reset();
  }
};

GatekeeperClient.prototype.send_Reset = function() {
  var output = new this.pClass(this.output);
  var args = new Gatekeeper_Reset_args();
  try {
    output.writeMessageBegin('Reset', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_Reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_Reset_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.StopAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StopAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StopAll();
  }
};

GatekeeperClient.prototype.send_StopAll = function() {
  var output = new this.pClass(this.output);
  var args = new Gatekeeper_StopAll_args();
  try {
    output.writeMessageBegin('StopAll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_StopAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_StopAll_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.SpontaneousCoreStatusChange = function(core, status, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SpontaneousCoreStatusChange(core, status);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SpontaneousCoreStatusChange(core, status);
  }
};

GatekeeperClient.prototype.send_SpontaneousCoreStatusChange = function(core, status) {
  var output = new this.pClass(this.output);
  var params = {
    core: core,
    status: status
  };
  var args = new Gatekeeper_SpontaneousCoreStatusChange_args(params);
  try {
    output.writeMessageBegin('SpontaneousCoreStatusChange', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SpontaneousCoreStatusChange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_SpontaneousCoreStatusChange_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

GatekeeperClient.prototype.GetCoreStatus = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetCoreStatus(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetCoreStatus(core);
  }
};

GatekeeperClient.prototype.send_GetCoreStatus = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Gatekeeper_GetCoreStatus_args(params);
  try {
    output.writeMessageBegin('GetCoreStatus', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_GetCoreStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_GetCoreStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetCoreStatus failed: unknown result');
};

GatekeeperClient.prototype.IsItOkToStopCore = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_IsItOkToStopCore(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_IsItOkToStopCore(core);
  }
};

GatekeeperClient.prototype.send_IsItOkToStopCore = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Gatekeeper_IsItOkToStopCore_args(params);
  try {
    output.writeMessageBegin('IsItOkToStopCore', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_IsItOkToStopCore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Gatekeeper_IsItOkToStopCore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('IsItOkToStopCore failed: unknown result');
};
var GatekeeperProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(GatekeeperProcessor, HeartbeatServiceProcessor);
GatekeeperProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
GatekeeperProcessor.prototype.process_SetRunAllCores = function(seqid, input, output) {
  var args = new Gatekeeper_SetRunAllCores_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetRunAllCores.length === 1) {
    Q.fcall(this._handler.SetRunAllCores.bind(this._handler),
      args.all
    ).then(function(result) {
      var result_obj = new Gatekeeper_SetRunAllCores_result({success: result});
      output.writeMessageBegin("SetRunAllCores", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetRunAllCores", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetRunAllCores(args.all, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_SetRunAllCores_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetRunAllCores", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetRunAllCores", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_SetStartOneStartsAll = function(seqid, input, output) {
  var args = new Gatekeeper_SetStartOneStartsAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetStartOneStartsAll.length === 1) {
    Q.fcall(this._handler.SetStartOneStartsAll.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new Gatekeeper_SetStartOneStartsAll_result({success: result});
      output.writeMessageBegin("SetStartOneStartsAll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetStartOneStartsAll", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetStartOneStartsAll(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_SetStartOneStartsAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetStartOneStartsAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetStartOneStartsAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_SetSoftCTI = function(seqid, input, output) {
  var args = new Gatekeeper_SetSoftCTI_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetSoftCTI.length === 1) {
    Q.fcall(this._handler.SetSoftCTI.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new Gatekeeper_SetSoftCTI_result({success: result});
      output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetSoftCTI(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_SetSoftCTI_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_BeforeLowLevelGo = function(seqid, input, output) {
  var args = new Gatekeeper_BeforeLowLevelGo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BeforeLowLevelGo.length === 2) {
    Q.fcall(this._handler.BeforeLowLevelGo.bind(this._handler),
      args.core,
      args.multi
    ).then(function(result) {
      var result_obj = new Gatekeeper_BeforeLowLevelGo_result({success: result});
      output.writeMessageBegin("BeforeLowLevelGo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("BeforeLowLevelGo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.BeforeLowLevelGo(args.core, args.multi, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_BeforeLowLevelGo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BeforeLowLevelGo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BeforeLowLevelGo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_StartedCPU = function(seqid, input, output) {
  var args = new Gatekeeper_StartedCPU_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StartedCPU.length === 1) {
    Q.fcall(this._handler.StartedCPU.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Gatekeeper_StartedCPU_result({success: result});
      output.writeMessageBegin("StartedCPU", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("StartedCPU", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.StartedCPU(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_StartedCPU_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("StartedCPU", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StartedCPU", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_CPUStoped = function(seqid, input, output) {
  var args = new Gatekeeper_CPUStoped_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CPUStoped.length === 1) {
    Q.fcall(this._handler.CPUStoped.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Gatekeeper_CPUStoped_result({success: result});
      output.writeMessageBegin("CPUStoped", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("CPUStoped", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CPUStoped(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_CPUStoped_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CPUStoped", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CPUStoped", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_IsTargetStopped = function(seqid, input, output) {
  var args = new Gatekeeper_IsTargetStopped_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsTargetStopped.length === 0) {
    Q.fcall(this._handler.IsTargetStopped.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Gatekeeper_IsTargetStopped_result({success: result});
      output.writeMessageBegin("IsTargetStopped", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsTargetStopped", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsTargetStopped(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_IsTargetStopped_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsTargetStopped", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsTargetStopped", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_AfterLowLevelGo = function(seqid, input, output) {
  var args = new Gatekeeper_AfterLowLevelGo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AfterLowLevelGo.length === 2) {
    Q.fcall(this._handler.AfterLowLevelGo.bind(this._handler),
      args.core,
      args.code
    ).then(function(result) {
      var result_obj = new Gatekeeper_AfterLowLevelGo_result({success: result});
      output.writeMessageBegin("AfterLowLevelGo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("AfterLowLevelGo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AfterLowLevelGo(args.core, args.code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_AfterLowLevelGo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AfterLowLevelGo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AfterLowLevelGo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_Reset = function(seqid, input, output) {
  var args = new Gatekeeper_Reset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Reset.length === 0) {
    Q.fcall(this._handler.Reset.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Gatekeeper_Reset_result({success: result});
      output.writeMessageBegin("Reset", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("Reset", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.Reset(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_Reset_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("Reset", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Reset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_StopAll = function(seqid, input, output) {
  var args = new Gatekeeper_StopAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StopAll.length === 0) {
    Q.fcall(this._handler.StopAll.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Gatekeeper_StopAll_result({success: result});
      output.writeMessageBegin("StopAll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("StopAll", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.StopAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_StopAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("StopAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StopAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_SpontaneousCoreStatusChange = function(seqid, input, output) {
  var args = new Gatekeeper_SpontaneousCoreStatusChange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SpontaneousCoreStatusChange.length === 2) {
    Q.fcall(this._handler.SpontaneousCoreStatusChange.bind(this._handler),
      args.core,
      args.status
    ).then(function(result) {
      var result_obj = new Gatekeeper_SpontaneousCoreStatusChange_result({success: result});
      output.writeMessageBegin("SpontaneousCoreStatusChange", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SpontaneousCoreStatusChange", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SpontaneousCoreStatusChange(args.core, args.status, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_SpontaneousCoreStatusChange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SpontaneousCoreStatusChange", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SpontaneousCoreStatusChange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_GetCoreStatus = function(seqid, input, output) {
  var args = new Gatekeeper_GetCoreStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetCoreStatus.length === 1) {
    Q.fcall(this._handler.GetCoreStatus.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Gatekeeper_GetCoreStatus_result({success: result});
      output.writeMessageBegin("GetCoreStatus", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetCoreStatus", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetCoreStatus(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_GetCoreStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetCoreStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetCoreStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
GatekeeperProcessor.prototype.process_IsItOkToStopCore = function(seqid, input, output) {
  var args = new Gatekeeper_IsItOkToStopCore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.IsItOkToStopCore.length === 1) {
    Q.fcall(this._handler.IsItOkToStopCore.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Gatekeeper_IsItOkToStopCore_result({success: result});
      output.writeMessageBegin("IsItOkToStopCore", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("IsItOkToStopCore", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.IsItOkToStopCore(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Gatekeeper_IsItOkToStopCore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("IsItOkToStopCore", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("IsItOkToStopCore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');
import cspy_ttypes = require('./cspy_types');
import ServiceRegistry_ttypes = require('./ServiceRegistry_types');


import ttypes = require('./ampsync_types');
import SessionState = ttypes.SessionState
import LowLevelAction = ttypes.LowLevelAction
import CoreLowLevelResult = ttypes.CoreLowLevelResult
import WhatNext = ttypes.WhatNext
import CoreStatus = ttypes.CoreStatus
import Tools = ttypes.Tools
import CORES_REGISTRY_SERVICE = ttypes.CORES_REGISTRY_SERVICE
import PARTNER_REGISTRY_SERVICE = ttypes.PARTNER_REGISTRY_SERVICE
import EVENT_BUS_SERVICE = ttypes.EVENT_BUS_SERVICE
import SESSION_SYNCHRONIZER_SERVICE = ttypes.SESSION_SYNCHRONIZER_SERVICE
import GATE_KEEPER_SERVICE = ttypes.GATE_KEEPER_SERVICE
import MULTI_CORE_LOG_SERVICE = ttypes.MULTI_CORE_LOG_SERVICE
import SOFT_CTI_SERVICE = ttypes.SOFT_CTI_SERVICE
import DEBUGGER_STARTER_SERVICE = ttypes.DEBUGGER_STARTER_SERVICE
import PARTNER_REGISTRY_PARTNER_SET_EVENT = ttypes.PARTNER_REGISTRY_PARTNER_SET_EVENT
import PARTNER_REGISTRY_PARTNER_IS_ALIVE_EVENT = ttypes.PARTNER_REGISTRY_PARTNER_IS_ALIVE_EVENT
import PARTNER_REGISTRY_PARTNER_IS_DECEASED_EVENT = ttypes.PARTNER_REGISTRY_PARTNER_IS_DECEASED_EVENT
import PARTNER_REGISTRY_EVENT_PARTNER_ID = ttypes.PARTNER_REGISTRY_EVENT_PARTNER_ID
import CORES_REGISTRY_UPDATED_EVENT = ttypes.CORES_REGISTRY_UPDATED_EVENT
import EVENT_SENDING_PARTNERID_KEY = ttypes.EVENT_SENDING_PARTNERID_KEY
import SESSION_SYNCHRONIZER_SYNCSTART_EVENT = ttypes.SESSION_SYNCHRONIZER_SYNCSTART_EVENT
import SESSION_SYNCHRONIZER_FROM_KEY = ttypes.SESSION_SYNCHRONIZER_FROM_KEY
import SESSION_SYNCHRONIZER_TO_KEY = ttypes.SESSION_SYNCHRONIZER_TO_KEY
import SESSION_SYNCHRONIZER_SYNCSTART_SENDING_PARTNER_KEY = ttypes.SESSION_SYNCHRONIZER_SYNCSTART_SENDING_PARTNER_KEY
import SESSION_SYNCHRONIZER_SYNCCOMMIT_EVENT = ttypes.SESSION_SYNCHRONIZER_SYNCCOMMIT_EVENT
import SESSION_SYNCHRONIZER_DEBUGGERSTART_EVENT = ttypes.SESSION_SYNCHRONIZER_DEBUGGERSTART_EVENT
import SESSION_SYNCHRONIZER_DEBUGGERENDSESSION_EVENT = ttypes.SESSION_SYNCHRONIZER_DEBUGGERENDSESSION_EVENT
import SESSION_SYNCHRONIZER_DEBUGGERTERMINATE_EVENT = ttypes.SESSION_SYNCHRONIZER_DEBUGGERTERMINATE_EVENT
import SESSION_SYNCHRONIZER_DEBUGGERDISCONNECT_EVENT = ttypes.SESSION_SYNCHRONIZER_DEBUGGERDISCONNECT_EVENT
import SESSION_SYNCHRONIZER_EVENT_PARTNER_ID = ttypes.SESSION_SYNCHRONIZER_EVENT_PARTNER_ID
import EXEC_CONTROL_GO_EVENT = ttypes.EXEC_CONTROL_GO_EVENT
import EXEC_CONTROL_STOP_EVENT = ttypes.EXEC_CONTROL_STOP_EVENT
import EXEC_CONTROL_MULTISTOP_EVENT = ttypes.EXEC_CONTROL_MULTISTOP_EVENT
import EXEC_CONTROL_MULTIGO_EVENT = ttypes.EXEC_CONTROL_MULTIGO_EVENT
import EXEC_CONTROL_SET_RUNALL_EVENT = ttypes.EXEC_CONTROL_SET_RUNALL_EVENT
import EXEC_CONTROL_SET_RUNONE_EVENT = ttypes.EXEC_CONTROL_SET_RUNONE_EVENT
import EXEC_CONTROL_EVENT_CORE_KEY_PREFIX = ttypes.EXEC_CONTROL_EVENT_CORE_KEY_PREFIX
import SOFT_CTI_STOP_ALL_EVENT = ttypes.SOFT_CTI_STOP_ALL_EVENT
import SOFT_CTI_EVENT_CORE_KEY_PREFIX = ttypes.SOFT_CTI_EVENT_CORE_KEY_PREFIX
import SOFT_CTI_EVENT_ID_KEY_PREFIX = ttypes.SOFT_CTI_EVENT_ID_KEY_PREFIX
import DEBUGGER_STARTER_TOOL_TO_START_KEY = ttypes.DEBUGGER_STARTER_TOOL_TO_START_KEY
import DEBUGKERNEL_EXEC_STARTED_EVENT = ttypes.DEBUGKERNEL_EXEC_STARTED_EVENT
import DEBUGKERNEL_EXEC_STOPPED_EVENT = ttypes.DEBUGKERNEL_EXEC_STOPPED_EVENT
import DEBUGKERNEL_RESET_EVENT = ttypes.DEBUGKERNEL_RESET_EVENT
import DEBUGKERNEL_BEGIN_SESSION_EVENT = ttypes.DEBUGKERNEL_BEGIN_SESSION_EVENT
import DEBUGKERNEL_END_SESSION_EVENT = ttypes.DEBUGKERNEL_END_SESSION_EVENT
import DEBUGKERNEL_MEMMOY_CHANGED_EVENT = ttypes.DEBUGKERNEL_MEMMOY_CHANGED_EVENT
import DEBUGKERNEL_SENDER = ttypes.DEBUGKERNEL_SENDER
import UnknownPartner = ttypes.UnknownPartner
import EventBusRegistrationFailed = ttypes.EventBusRegistrationFailed
import FailedToStartPartner = ttypes.FailedToStartPartner
import PartnerInformation = ttypes.PartnerInformation
import CoreInfo = ttypes.CoreInfo
import CoreRange = ttypes.CoreRange
import Event = ttypes.Event
import NumberOfCoresInfo = ttypes.NumberOfCoresInfo
import HeartbeatService = require('./HeartbeatService');

declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  SetRunAllCores(all: boolean): Q.Promise<void>;

  SetRunAllCores(all: boolean, callback?: (error: void, response: void)=>void): void;

  SetStartOneStartsAll(on: boolean): Q.Promise<void>;

  SetStartOneStartsAll(on: boolean, callback?: (error: void, response: void)=>void): void;

  SetSoftCTI(on: boolean): Q.Promise<void>;

  SetSoftCTI(on: boolean, callback?: (error: void, response: void)=>void): void;

  BeforeLowLevelGo(core: number, multi: boolean): Q.Promise<LowLevelAction>;

  BeforeLowLevelGo(core: number, multi: boolean, callback?: (error: void, response: LowLevelAction)=>void): void;

  StartedCPU(core: number): Q.Promise<void>;

  StartedCPU(core: number, callback?: (error: void, response: void)=>void): void;

  CPUStoped(core: number): Q.Promise<void>;

  CPUStoped(core: number, callback?: (error: void, response: void)=>void): void;

  IsTargetStopped(): Q.Promise<boolean>;

  IsTargetStopped(callback?: (error: void, response: boolean)=>void): void;

  AfterLowLevelGo(core: number, code: CoreLowLevelResult): Q.Promise<WhatNext>;

  AfterLowLevelGo(core: number, code: CoreLowLevelResult, callback?: (error: void, response: WhatNext)=>void): void;

  Reset(): Q.Promise<void>;

  Reset(callback?: (error: void, response: void)=>void): void;

  StopAll(): Q.Promise<void>;

  StopAll(callback?: (error: void, response: void)=>void): void;

  SpontaneousCoreStatusChange(core: number, status: CoreStatus): Q.Promise<void>;

  SpontaneousCoreStatusChange(core: number, status: CoreStatus, callback?: (error: void, response: void)=>void): void;

  GetCoreStatus(core: number): Q.Promise<CoreStatus>;

  GetCoreStatus(core: number, callback?: (error: void, response: CoreStatus)=>void): void;

  IsItOkToStopCore(core: number): Q.Promise<boolean>;

  IsItOkToStopCore(core: number, callback?: (error: void, response: boolean)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_SetRunAllCores(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_SetStartOneStartsAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_SetSoftCTI(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_BeforeLowLevelGo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_StartedCPU(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_CPUStoped(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_IsTargetStopped(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_AfterLowLevelGo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_Reset(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_StopAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_SpontaneousCoreStatusChange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_GetCoreStatus(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_IsItOkToStopCore(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

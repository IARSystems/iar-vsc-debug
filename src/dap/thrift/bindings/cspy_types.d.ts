//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');



/**
 * The list of all notifications. This is copy-pasted from
 * DkNotifyApi.h.
 */
declare enum DkNotifyConstant {
  kDkTargetStopped = 0,
  kDkTargetStarted = 1,
  kDkReset = 2,
  kDkMemoryChanged = 3,
  kDkInspectionContextChanged = 4,
  kDkBaseContextChanged = 5,
  kDkPreLoadModule = 6,
  kDkPostLoadModule = 7,
  kDkPostLoadPrefixModul = 8,
  kDkUserBreakUpdate = 9,
  kDkPostConfig = 10,
  kDkPreShutDown = 11,
  kDkDoShutDown = 12,
  kDkFatalError = 13,
  kDkDriverReset = 14,
  kDkForceUpdate = 15,
  kDkPreModify = 16,
  kDkForcedStop = 17,
  kDkStopRequested = 18,
  kDkSilentFatalError = 19,
  kDkPrePreShutDown = 20,
  kDkPostLoadExtraModule = 21,
  kDkKernelThreadStarted = 22,
  kDkKernelThreadExiting = 23,
  kDkMetaDataChanged = 24,
  kDkPreLoadPlugin = 25,
  kDkPostLoadPlugin = 26,
  kDkPreUnloadPlugin = 27,
  kDkPostUnloadPlugin = 28,
  kDkServicesChanged = 29,
  kDkFinishedStaticInit = 30,
  kDkCoreStopped = 31,
  kDkCoreStarted = 32,
}

/**
 * Thrift-variant of DkCoreStatus.
 */
declare enum DkCoreStatusConstants {
  kDkCoreStateStopped = 0,
  kDkCoreStateRunning = 1,
  kDkCoreStateSleeping = 2,
  kDkCoreStateUnknown = 3,
  kDkCoreStateNoPower = 4,
}

/**
 * See DkLoggingCategory in DkLogApi.h.
 * 
 * Note that the enum value should be relied upon. To convert to
 * and from the DkLoggingCategory constants, use the convert() functions
 * in CSpyTypeConverters.h.
 */
declare enum DkLoggingCategoryConstant {
  kDkLogUser = 0,
  kDkLogInfo = 1,
  kDkLogWarning = 2,
  kDkLogError = 3,
  kDkLogMinorInfo = 4,
}

/**
 * This is used by the UI to determine how to present the value of
 * an expression. It does not, for example, provide enough information in
 * order to be able to evaluate an expression.
 */
declare enum BasicExprType {
  Unknown = 0,
  Basic = 1,
  Pointer = 2,
  Array = 3,
  Composite = 4,
  Enumeration = 5,
  Function = 6,
  Custom = 7,
}

/**
 * Configuration information needed to start a debug session.
 * 
 * This contains all information necessary to start a debug session, including
 * information about which plugins to load, etc.
 * 
 * This corresponds roughly to ICSpyConfiguration in Eclipse.
 */
declare class SessionConfiguration {
  public type: string;
  public driverName: string;
  public processorName: string;
  public options: string[];
  public executable: string;
  public toolkitDir: string;
  public target: string;
  public projectName: string;
  public projectDir: string;
  public stackSettings: shared_ttypes.StackSettings;
  public setupMacros: string[];
  public plugins: string[];
  public configName: string;
  public enableCRun: boolean;
  public attachToTarget: boolean;
  public leaveRunning: boolean;

    constructor(args?: { type: string; driverName: string; processorName: string; options: string[]; executable: string; toolkitDir: string; target: string; projectName: string; projectDir: string; stackSettings: shared_ttypes.StackSettings; setupMacros: string[]; plugins: string[]; configName: string; enableCRun: boolean; attachToTarget: boolean; leaveRunning: boolean; });
}

/**
 * Sent to the debug-event listener service when a debug event
 * happens. See DkNotifyApi.h.
 */
declare class DebugEvent {
  public note: DkNotifyConstant;
  public descr: string;
  public params: string[];

    constructor(args?: { note: DkNotifyConstant; descr: string; params: string[]; });
}

/**
 * See kDkInspectionContextChanged. This is its own struct since we
 * want to send a context ref with it (with the generic DebugEvent
 * we can only send a description and string parameters).
 */
declare class InspectionContextChangedEvent {
  public context: shared_ttypes.ContextRef;

    constructor(args?: { context: shared_ttypes.ContextRef; });
}

/**
 * See kDkBaseContextChanged. Also, see comment above on
 * why this is a separate struct.
 */
declare class BaseContextChangedEvent {
  public context: shared_ttypes.ContextRef;

    constructor(args?: { context: shared_ttypes.ContextRef; });
}

/**
 * Sent to the debug event listener when a log event happens.
 */
declare class LogEvent {
  public cat: DkLoggingCategoryConstant;
  public text: string;
  public timestamp: Int64;

    constructor(args?: { cat: DkLoggingCategoryConstant; text: string; timestamp: Int64; });
}

/**
 * Information about a thread (or an RTOS task).
 */
declare class Thread {
  public id: number;
  public name: string;

    constructor(args?: { id: number; name: string; });
}

declare class ExprValue {
  public expression: string;
  public value: string;
  public type: string;
  public isLValue: boolean;
  public hasLocation: boolean;
  public location: shared_ttypes.Location;
  public subExprCount: number;
  public basicType: BasicExprType;
  public size: number;

    constructor(args?: { expression: string; value: string; type: string; isLValue: boolean; hasLocation: boolean; location: shared_ttypes.Location; subExprCount: number; basicType: BasicExprType; size: number; });
}

/**
 * Information about a loaded module.
 */
declare class ModuleData {
  public name: string;
  public file: string;
  public timestamp: Int64;
  public baseAddress: string;
  public toAddress: string;
  public symbolsAreLoaded: boolean;
  public size: Int64;

    constructor(args?: { name: string; file: string; timestamp: Int64; baseAddress: string; toAddress: string; symbolsAreLoaded: boolean; size: Int64; });
}

declare class NamedLocationMask {
  public used: boolean;
  public shift: number;
  public mask: Int64;

    constructor(args?: { used: boolean; shift: number; mask: Int64; });
}

declare class NamedLocation {
  public name: string;
  public nameAlias: string;
  public readonly: boolean;
  public writeonly: boolean;
  public location: shared_ttypes.Location;
  public realLocation: shared_ttypes.Location;
  public valueBitSize: number;
  public fullBitSize: number;
  public defaultBase: number;
  public usesMask: boolean;
  public masks: NamedLocationMask[];
  public description: string;

    constructor(args?: { name: string; nameAlias: string; readonly: boolean; writeonly: boolean; location: shared_ttypes.Location; realLocation: shared_ttypes.Location; valueBitSize: number; fullBitSize: number; defaultBase: number; usesMask: boolean; masks: NamedLocationMask[]; description: string; });
}

declare class ExtraDebugFile {
  public doDownload: boolean;
  public path: string;
  public offset: Int64;

    constructor(args?: { doDownload: boolean; path: string; offset: Int64; });
}

declare class ModuleLoadingOptions {
  public resetAfterLoad: boolean;
  public callUserMacros: boolean;
  public onlyPrefixNotation: boolean;
  public suppressDownload: boolean;
  public shouldAttach: boolean;
  public shouldLeaveRunning: boolean;
  public extraDebugFiles: ExtraDebugFile[];

    constructor(args?: { resetAfterLoad: boolean; callUserMacros: boolean; onlyPrefixNotation: boolean; suppressDownload: boolean; shouldAttach: boolean; shouldLeaveRunning: boolean; extraDebugFiles: ExtraDebugFile[]; });
}

declare class ResetStyles {
  public name: string;
  public id: number;
  public selected: boolean;
  public tooltip: string;

    constructor(args?: { name: string; id: number; selected: boolean; tooltip: string; });
}

declare class DebugSettings {
  public alwaysPickAllInstances: boolean;
  public enterFunctionsWithoutSource: boolean;
  public stlDepth: number;
  public staticWatchUpdateInterval: number;
  public memoryWindowUpdateInterval: number;
  public globalIntegerFormat: number;

    constructor(args?: { alwaysPickAllInstances: boolean; enterFunctionsWithoutSource: boolean; stlDepth: number; staticWatchUpdateInterval: number; memoryWindowUpdateInterval: number; globalIntegerFormat: number; });
}

declare var DEBUGGER_SERVICE: string;

declare var DEBUGEVENT_SERVICE: string;

declare var CONTEXT_MANAGER_SERVICE: string;

declare var MEMORY_SERVICE: string;

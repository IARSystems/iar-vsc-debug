//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ListWindowBackend = require('./ListWindowBackend');
var ListWindowBackendClient = ListWindowBackend.Client;
var ListWindowBackendProcessor = ListWindowBackend.Processor;
var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var SymbolicMemory_setZone_args = function(args) {
  this.zone = null;
  if (args) {
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = args.zone;
    }
  }
};
SymbolicMemory_setZone_args.prototype = {};
SymbolicMemory_setZone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.zone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_setZone_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_setZone_args');
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRING, 1);
    output.writeString(this.zone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_setZone_result = function(args) {
};
SymbolicMemory_setZone_result.prototype = {};
SymbolicMemory_setZone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_setZone_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_setZone_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZone_args = function(args) {
};
SymbolicMemory_getZone_args.prototype = {};
SymbolicMemory_getZone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZone_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZone_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZone_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SymbolicMemory_getZone_result.prototype = {};
SymbolicMemory_getZone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZone_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZoneList_args = function(args) {
};
SymbolicMemory_getZoneList_args.prototype = {};
SymbolicMemory_getZoneList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZoneList_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZoneList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZoneList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
SymbolicMemory_getZoneList_result.prototype = {};
SymbolicMemory_getZoneList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readString();
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZoneList_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZoneList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter59 in this.success) {
      if (this.success.hasOwnProperty(iter59)) {
        iter59 = this.success[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_nextSymbol_args = function(args) {
};
SymbolicMemory_nextSymbol_args.prototype = {};
SymbolicMemory_nextSymbol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_nextSymbol_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_nextSymbol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_nextSymbol_result = function(args) {
};
SymbolicMemory_nextSymbol_result.prototype = {};
SymbolicMemory_nextSymbol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_nextSymbol_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_nextSymbol_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_prevSymbol_args = function(args) {
};
SymbolicMemory_prevSymbol_args.prototype = {};
SymbolicMemory_prevSymbol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_prevSymbol_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_prevSymbol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_prevSymbol_result = function(args) {
};
SymbolicMemory_prevSymbol_result.prototype = {};
SymbolicMemory_prevSymbol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_prevSymbol_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_prevSymbol_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_navigate_args = function(args) {
  this.expr = null;
  if (args) {
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    }
  }
};
SymbolicMemory_navigate_args.prototype = {};
SymbolicMemory_navigate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_navigate_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_navigate_args');
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 1);
    output.writeString(this.expr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_navigate_result = function(args) {
};
SymbolicMemory_navigate_result.prototype = {};
SymbolicMemory_navigate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_navigate_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_navigate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemoryClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(SymbolicMemoryClient, ListWindowBackendClient);
SymbolicMemoryClient.prototype.seqid = function() { return this._seqid; };
SymbolicMemoryClient.prototype.new_seqid = function() { return this._seqid += 1; };

SymbolicMemoryClient.prototype.setZone = function(zone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setZone(zone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setZone(zone);
  }
};

SymbolicMemoryClient.prototype.send_setZone = function(zone) {
  var output = new this.pClass(this.output);
  var params = {
    zone: zone
  };
  var args = new SymbolicMemory_setZone_args(params);
  try {
    output.writeMessageBegin('setZone', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_setZone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_setZone_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

SymbolicMemoryClient.prototype.getZone = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getZone();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getZone();
  }
};

SymbolicMemoryClient.prototype.send_getZone = function() {
  var output = new this.pClass(this.output);
  var args = new SymbolicMemory_getZone_args();
  try {
    output.writeMessageBegin('getZone', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_getZone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_getZone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getZone failed: unknown result');
};

SymbolicMemoryClient.prototype.getZoneList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getZoneList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getZoneList();
  }
};

SymbolicMemoryClient.prototype.send_getZoneList = function() {
  var output = new this.pClass(this.output);
  var args = new SymbolicMemory_getZoneList_args();
  try {
    output.writeMessageBegin('getZoneList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_getZoneList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_getZoneList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getZoneList failed: unknown result');
};

SymbolicMemoryClient.prototype.nextSymbol = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_nextSymbol();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_nextSymbol();
  }
};

SymbolicMemoryClient.prototype.send_nextSymbol = function() {
  var output = new this.pClass(this.output);
  var args = new SymbolicMemory_nextSymbol_args();
  try {
    output.writeMessageBegin('nextSymbol', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_nextSymbol = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_nextSymbol_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

SymbolicMemoryClient.prototype.prevSymbol = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_prevSymbol();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_prevSymbol();
  }
};

SymbolicMemoryClient.prototype.send_prevSymbol = function() {
  var output = new this.pClass(this.output);
  var args = new SymbolicMemory_prevSymbol_args();
  try {
    output.writeMessageBegin('prevSymbol', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_prevSymbol = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_prevSymbol_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

SymbolicMemoryClient.prototype.navigate = function(expr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_navigate(expr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_navigate(expr);
  }
};

SymbolicMemoryClient.prototype.send_navigate = function(expr) {
  var output = new this.pClass(this.output);
  var params = {
    expr: expr
  };
  var args = new SymbolicMemory_navigate_args(params);
  try {
    output.writeMessageBegin('navigate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_navigate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SymbolicMemory_navigate_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var SymbolicMemoryProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(SymbolicMemoryProcessor, ListWindowBackendProcessor);
SymbolicMemoryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
SymbolicMemoryProcessor.prototype.process_setZone = function(seqid, input, output) {
  var args = new SymbolicMemory_setZone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setZone.length === 1) {
    Q.fcall(this._handler.setZone.bind(this._handler),
      args.zone
    ).then(function(result) {
      var result_obj = new SymbolicMemory_setZone_result({success: result});
      output.writeMessageBegin("setZone", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setZone", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setZone(args.zone, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_setZone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setZone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setZone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SymbolicMemoryProcessor.prototype.process_getZone = function(seqid, input, output) {
  var args = new SymbolicMemory_getZone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getZone.length === 0) {
    Q.fcall(this._handler.getZone.bind(this._handler)
    ).then(function(result) {
      var result_obj = new SymbolicMemory_getZone_result({success: result});
      output.writeMessageBegin("getZone", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getZone", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getZone(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_getZone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getZone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SymbolicMemoryProcessor.prototype.process_getZoneList = function(seqid, input, output) {
  var args = new SymbolicMemory_getZoneList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getZoneList.length === 0) {
    Q.fcall(this._handler.getZoneList.bind(this._handler)
    ).then(function(result) {
      var result_obj = new SymbolicMemory_getZoneList_result({success: result});
      output.writeMessageBegin("getZoneList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getZoneList", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getZoneList(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_getZoneList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getZoneList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZoneList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SymbolicMemoryProcessor.prototype.process_nextSymbol = function(seqid, input, output) {
  var args = new SymbolicMemory_nextSymbol_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.nextSymbol.length === 0) {
    Q.fcall(this._handler.nextSymbol.bind(this._handler)
    ).then(function(result) {
      var result_obj = new SymbolicMemory_nextSymbol_result({success: result});
      output.writeMessageBegin("nextSymbol", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("nextSymbol", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.nextSymbol(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_nextSymbol_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("nextSymbol", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("nextSymbol", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SymbolicMemoryProcessor.prototype.process_prevSymbol = function(seqid, input, output) {
  var args = new SymbolicMemory_prevSymbol_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.prevSymbol.length === 0) {
    Q.fcall(this._handler.prevSymbol.bind(this._handler)
    ).then(function(result) {
      var result_obj = new SymbolicMemory_prevSymbol_result({success: result});
      output.writeMessageBegin("prevSymbol", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("prevSymbol", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.prevSymbol(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_prevSymbol_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("prevSymbol", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("prevSymbol", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SymbolicMemoryProcessor.prototype.process_navigate = function(seqid, input, output) {
  var args = new SymbolicMemory_navigate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.navigate.length === 1) {
    Q.fcall(this._handler.navigate.bind(this._handler),
      args.expr
    ).then(function(result) {
      var result_obj = new SymbolicMemory_navigate_result({success: result});
      output.writeMessageBegin("navigate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("navigate", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.navigate(args.expr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SymbolicMemory_navigate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("navigate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("navigate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./libsupport_types');
import LIBSUPPORT_SERVICE = ttypes.LIBSUPPORT_SERVICE

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Request input from the terminal I/O console.
   */
  requestInputBinary(len: number): Q.Promise<string>;

  /**
   * Request input from the terminal I/O console.
   */
  requestInputBinary(len: number, callback?: (error: void, response: string)=>void): void;

  requestInput(len: number): Q.Promise<string>;

  requestInput(len: number, callback?: (error: void, response: string)=>void): void;

  /**
   * Handle output from the target program.
   */
  printOutputBinary(data: string): Q.Promise<void>;

  /**
   * Handle output from the target program.
   */
  printOutputBinary(data: string, callback?: (error: void, response: void)=>void): void;

  printOutput(data: string): Q.Promise<void>;

  printOutput(data: string, callback?: (error: void, response: void)=>void): void;

  /**
   * The target program has exited.
   */
  exit(code: number): Q.Promise<void>;

  /**
   * The target program has exited.
   */
  exit(code: number, callback?: (error: void, response: void)=>void): void;

  /**
   * The target program has aborted (i.e. called abort()).
   */
  reportAssert(file: string, line: string, message: string): Q.Promise<void>;

  /**
   * The target program has aborted (i.e. called abort()).
   */
  reportAssert(file: string, line: string, message: string, callback?: (error: void, response: void)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_requestInputBinary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_requestInput(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_printOutputBinary(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_printOutput(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_exit(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_reportAssert(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

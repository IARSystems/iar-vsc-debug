//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./memory_types');
import CSpyMemoryBlock = ttypes.CSpyMemoryBlock

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  readMemory(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number): Q.Promise<string>;

  readMemory(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number, callback?: (error: shared_ttypes.CSpyException, response: string)=>void): void;

  readMemoryBlock(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number): Q.Promise<CSpyMemoryBlock>;

  readMemoryBlock(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number, callback?: (error: shared_ttypes.CSpyException, response: CSpyMemoryBlock)=>void): void;

  writeMemory(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number, buf: string): Q.Promise<void>;

  writeMemory(location: shared_ttypes.Location, wordsize: number, bitsize: number, count: number, buf: string, callback?: (error: shared_ttypes.CSpyException, response: void)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_readMemory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_readMemoryBlock(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_writeMemory(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

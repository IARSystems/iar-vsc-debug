//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');


var ttypes = require('./ServiceManager_types');
//HELPER FUNCTIONS AND STRUCTURES

var CSpyServiceManager_startService_args = function(args) {
  this.serviceConfig = null;
  if (args) {
    if (args.serviceConfig !== undefined && args.serviceConfig !== null) {
      this.serviceConfig = new ttypes.ServiceConfig(args.serviceConfig);
    }
  }
};
CSpyServiceManager_startService_args.prototype = {};
CSpyServiceManager_startService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceConfig = new ttypes.ServiceConfig();
        this.serviceConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_startService_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_startService_args');
  if (this.serviceConfig !== null && this.serviceConfig !== undefined) {
    output.writeFieldBegin('serviceConfig', Thrift.Type.STRUCT, 1);
    this.serviceConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_startService_result = function(args) {
  this.e = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceManager_startService_result.prototype = {};
CSpyServiceManager_startService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ServiceRegistry_ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_startService_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_startService_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_stopService_args = function(args) {
  this.serviceConfig = null;
  if (args) {
    if (args.serviceConfig !== undefined && args.serviceConfig !== null) {
      this.serviceConfig = new ttypes.ServiceConfig(args.serviceConfig);
    }
  }
};
CSpyServiceManager_stopService_args.prototype = {};
CSpyServiceManager_stopService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serviceConfig = new ttypes.ServiceConfig();
        this.serviceConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_stopService_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_stopService_args');
  if (this.serviceConfig !== null && this.serviceConfig !== undefined) {
    output.writeFieldBegin('serviceConfig', Thrift.Type.STRUCT, 1);
    this.serviceConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_stopService_result = function(args) {
  this.e = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceManager_stopService_result.prototype = {};
CSpyServiceManager_stopService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ServiceRegistry_ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_stopService_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_stopService_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_startServicesFromJsonManifest_args = function(args) {
  this.jsonFilePath = null;
  if (args) {
    if (args.jsonFilePath !== undefined && args.jsonFilePath !== null) {
      this.jsonFilePath = args.jsonFilePath;
    }
  }
};
CSpyServiceManager_startServicesFromJsonManifest_args.prototype = {};
CSpyServiceManager_startServicesFromJsonManifest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonFilePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_startServicesFromJsonManifest_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_startServicesFromJsonManifest_args');
  if (this.jsonFilePath !== null && this.jsonFilePath !== undefined) {
    output.writeFieldBegin('jsonFilePath', Thrift.Type.STRING, 1);
    output.writeString(this.jsonFilePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_startServicesFromJsonManifest_result = function(args) {
  this.e = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceManager_startServicesFromJsonManifest_result.prototype = {};
CSpyServiceManager_startServicesFromJsonManifest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ServiceRegistry_ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_startServicesFromJsonManifest_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_startServicesFromJsonManifest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_stopServicesFromJsonManifest_args = function(args) {
  this.jsonFilePath = null;
  if (args) {
    if (args.jsonFilePath !== undefined && args.jsonFilePath !== null) {
      this.jsonFilePath = args.jsonFilePath;
    }
  }
};
CSpyServiceManager_stopServicesFromJsonManifest_args.prototype = {};
CSpyServiceManager_stopServicesFromJsonManifest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonFilePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_stopServicesFromJsonManifest_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_stopServicesFromJsonManifest_args');
  if (this.jsonFilePath !== null && this.jsonFilePath !== undefined) {
    output.writeFieldBegin('jsonFilePath', Thrift.Type.STRING, 1);
    output.writeString(this.jsonFilePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_stopServicesFromJsonManifest_result = function(args) {
  this.e = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceManager_stopServicesFromJsonManifest_result.prototype = {};
CSpyServiceManager_stopServicesFromJsonManifest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ServiceRegistry_ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_stopServicesFromJsonManifest_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_stopServicesFromJsonManifest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_shutdown_args = function(args) {
};
CSpyServiceManager_shutdown_args.prototype = {};
CSpyServiceManager_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManager_shutdown_result = function(args) {
  this.e = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceManager_shutdown_result.prototype = {};
CSpyServiceManager_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ServiceRegistry_ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceManager_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceManager_shutdown_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
CSpyServiceManagerClient.prototype = {};
CSpyServiceManagerClient.prototype.seqid = function() { return this._seqid; };
CSpyServiceManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

CSpyServiceManagerClient.prototype.startService = function(serviceConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startService(serviceConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startService(serviceConfig);
  }
};

CSpyServiceManagerClient.prototype.send_startService = function(serviceConfig) {
  var output = new this.pClass(this.output);
  var params = {
    serviceConfig: serviceConfig
  };
  var args = new CSpyServiceManager_startService_args(params);
  try {
    output.writeMessageBegin('startService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceManagerClient.prototype.recv_startService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceManager_startService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceManagerClient.prototype.stopService = function(serviceConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopService(serviceConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopService(serviceConfig);
  }
};

CSpyServiceManagerClient.prototype.send_stopService = function(serviceConfig) {
  var output = new this.pClass(this.output);
  var params = {
    serviceConfig: serviceConfig
  };
  var args = new CSpyServiceManager_stopService_args(params);
  try {
    output.writeMessageBegin('stopService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceManagerClient.prototype.recv_stopService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceManager_stopService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceManagerClient.prototype.startServicesFromJsonManifest = function(jsonFilePath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startServicesFromJsonManifest(jsonFilePath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startServicesFromJsonManifest(jsonFilePath);
  }
};

CSpyServiceManagerClient.prototype.send_startServicesFromJsonManifest = function(jsonFilePath) {
  var output = new this.pClass(this.output);
  var params = {
    jsonFilePath: jsonFilePath
  };
  var args = new CSpyServiceManager_startServicesFromJsonManifest_args(params);
  try {
    output.writeMessageBegin('startServicesFromJsonManifest', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceManagerClient.prototype.recv_startServicesFromJsonManifest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceManager_startServicesFromJsonManifest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceManagerClient.prototype.stopServicesFromJsonManifest = function(jsonFilePath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopServicesFromJsonManifest(jsonFilePath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopServicesFromJsonManifest(jsonFilePath);
  }
};

CSpyServiceManagerClient.prototype.send_stopServicesFromJsonManifest = function(jsonFilePath) {
  var output = new this.pClass(this.output);
  var params = {
    jsonFilePath: jsonFilePath
  };
  var args = new CSpyServiceManager_stopServicesFromJsonManifest_args(params);
  try {
    output.writeMessageBegin('stopServicesFromJsonManifest', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceManagerClient.prototype.recv_stopServicesFromJsonManifest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceManager_stopServicesFromJsonManifest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceManagerClient.prototype.shutdown = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdown();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdown();
  }
};

CSpyServiceManagerClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  var args = new CSpyServiceManager_shutdown_args();
  try {
    output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceManagerClient.prototype.recv_shutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceManager_shutdown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var CSpyServiceManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
CSpyServiceManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CSpyServiceManagerProcessor.prototype.process_startService = function(seqid, input, output) {
  var args = new CSpyServiceManager_startService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startService.length === 1) {
    Q.fcall(this._handler.startService.bind(this._handler),
      args.serviceConfig
    ).then(function(result) {
      var result_obj = new CSpyServiceManager_startService_result({success: result});
      output.writeMessageBegin("startService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ServiceRegistry_ttypes.ServiceException) {
        result = new CSpyServiceManager_startService_result(err);
        output.writeMessageBegin("startService", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.startService(args.serviceConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ServiceRegistry_ttypes.ServiceException) {
        result_obj = new CSpyServiceManager_startService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceManagerProcessor.prototype.process_stopService = function(seqid, input, output) {
  var args = new CSpyServiceManager_stopService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopService.length === 1) {
    Q.fcall(this._handler.stopService.bind(this._handler),
      args.serviceConfig
    ).then(function(result) {
      var result_obj = new CSpyServiceManager_stopService_result({success: result});
      output.writeMessageBegin("stopService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ServiceRegistry_ttypes.ServiceException) {
        result = new CSpyServiceManager_stopService_result(err);
        output.writeMessageBegin("stopService", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stopService(args.serviceConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ServiceRegistry_ttypes.ServiceException) {
        result_obj = new CSpyServiceManager_stopService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceManagerProcessor.prototype.process_startServicesFromJsonManifest = function(seqid, input, output) {
  var args = new CSpyServiceManager_startServicesFromJsonManifest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startServicesFromJsonManifest.length === 1) {
    Q.fcall(this._handler.startServicesFromJsonManifest.bind(this._handler),
      args.jsonFilePath
    ).then(function(result) {
      var result_obj = new CSpyServiceManager_startServicesFromJsonManifest_result({success: result});
      output.writeMessageBegin("startServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ServiceRegistry_ttypes.ServiceException) {
        result = new CSpyServiceManager_startServicesFromJsonManifest_result(err);
        output.writeMessageBegin("startServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startServicesFromJsonManifest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.startServicesFromJsonManifest(args.jsonFilePath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ServiceRegistry_ttypes.ServiceException) {
        result_obj = new CSpyServiceManager_startServicesFromJsonManifest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startServicesFromJsonManifest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceManagerProcessor.prototype.process_stopServicesFromJsonManifest = function(seqid, input, output) {
  var args = new CSpyServiceManager_stopServicesFromJsonManifest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopServicesFromJsonManifest.length === 1) {
    Q.fcall(this._handler.stopServicesFromJsonManifest.bind(this._handler),
      args.jsonFilePath
    ).then(function(result) {
      var result_obj = new CSpyServiceManager_stopServicesFromJsonManifest_result({success: result});
      output.writeMessageBegin("stopServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ServiceRegistry_ttypes.ServiceException) {
        result = new CSpyServiceManager_stopServicesFromJsonManifest_result(err);
        output.writeMessageBegin("stopServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopServicesFromJsonManifest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stopServicesFromJsonManifest(args.jsonFilePath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ServiceRegistry_ttypes.ServiceException) {
        result_obj = new CSpyServiceManager_stopServicesFromJsonManifest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopServicesFromJsonManifest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopServicesFromJsonManifest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceManagerProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new CSpyServiceManager_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdown.length === 0) {
    Q.fcall(this._handler.shutdown.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CSpyServiceManager_shutdown_result({success: result});
      output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ServiceRegistry_ttypes.ServiceException) {
        result = new CSpyServiceManager_shutdown_result(err);
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shutdown(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ServiceRegistry_ttypes.ServiceException) {
        result_obj = new CSpyServiceManager_shutdown_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

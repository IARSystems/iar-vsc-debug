//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');
var cspy_ttypes = require('./cspy_types');
var ServiceRegistry_ttypes = require('./ServiceRegistry_types');


var ttypes = require('./ampsync_types');
//HELPER FUNCTIONS AND STRUCTURES

var ExecutionControl_Go_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
ExecutionControl_Go_args.prototype = {};
ExecutionControl_Go_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_Go_args.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_Go_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_Go_result = function(args) {
};
ExecutionControl_Go_result.prototype = {};
ExecutionControl_Go_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_Go_result.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_Go_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_Stop_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
ExecutionControl_Stop_args.prototype = {};
ExecutionControl_Stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_Stop_args.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_Stop_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_Stop_result = function(args) {
};
ExecutionControl_Stop_result.prototype = {};
ExecutionControl_Stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_Stop_result.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_Stop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_MultiStop_args = function(args) {
};
ExecutionControl_MultiStop_args.prototype = {};
ExecutionControl_MultiStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_MultiStop_args.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_MultiStop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_MultiStop_result = function(args) {
};
ExecutionControl_MultiStop_result.prototype = {};
ExecutionControl_MultiStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_MultiStop_result.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_MultiStop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_MultiGo_args = function(args) {
};
ExecutionControl_MultiGo_args.prototype = {};
ExecutionControl_MultiGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_MultiGo_args.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_MultiGo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_MultiGo_result = function(args) {
};
ExecutionControl_MultiGo_result.prototype = {};
ExecutionControl_MultiGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_MultiGo_result.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_MultiGo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_SetRunAll_args = function(args) {
  this.all = null;
  if (args) {
    if (args.all !== undefined && args.all !== null) {
      this.all = args.all;
    }
  }
};
ExecutionControl_SetRunAll_args.prototype = {};
ExecutionControl_SetRunAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.all = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_SetRunAll_args.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_SetRunAll_args');
  if (this.all !== null && this.all !== undefined) {
    output.writeFieldBegin('all', Thrift.Type.BOOL, 1);
    output.writeBool(this.all);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControl_SetRunAll_result = function(args) {
};
ExecutionControl_SetRunAll_result.prototype = {};
ExecutionControl_SetRunAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionControl_SetRunAll_result.prototype.write = function(output) {
  output.writeStructBegin('ExecutionControl_SetRunAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutionControlClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
ExecutionControlClient.prototype = {};
ExecutionControlClient.prototype.seqid = function() { return this._seqid; };
ExecutionControlClient.prototype.new_seqid = function() { return this._seqid += 1; };

ExecutionControlClient.prototype.Go = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Go(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Go(core);
  }
};

ExecutionControlClient.prototype.send_Go = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new ExecutionControl_Go_args(params);
  try {
    output.writeMessageBegin('Go', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ExecutionControlClient.prototype.Stop = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Stop(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Stop(core);
  }
};

ExecutionControlClient.prototype.send_Stop = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new ExecutionControl_Stop_args(params);
  try {
    output.writeMessageBegin('Stop', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ExecutionControlClient.prototype.MultiStop = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_MultiStop();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_MultiStop();
  }
};

ExecutionControlClient.prototype.send_MultiStop = function() {
  var output = new this.pClass(this.output);
  var args = new ExecutionControl_MultiStop_args();
  try {
    output.writeMessageBegin('MultiStop', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ExecutionControlClient.prototype.MultiGo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_MultiGo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_MultiGo();
  }
};

ExecutionControlClient.prototype.send_MultiGo = function() {
  var output = new this.pClass(this.output);
  var args = new ExecutionControl_MultiGo_args();
  try {
    output.writeMessageBegin('MultiGo', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ExecutionControlClient.prototype.SetRunAll = function(all, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetRunAll(all);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetRunAll(all);
  }
};

ExecutionControlClient.prototype.send_SetRunAll = function(all) {
  var output = new this.pClass(this.output);
  var params = {
    all: all
  };
  var args = new ExecutionControl_SetRunAll_args(params);
  try {
    output.writeMessageBegin('SetRunAll', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var ExecutionControlProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
ExecutionControlProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ExecutionControlProcessor.prototype.process_Go = function(seqid, input, output) {
  var args = new ExecutionControl_Go_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.Go(args.core);
};
ExecutionControlProcessor.prototype.process_Stop = function(seqid, input, output) {
  var args = new ExecutionControl_Stop_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.Stop(args.core);
};
ExecutionControlProcessor.prototype.process_MultiStop = function(seqid, input, output) {
  var args = new ExecutionControl_MultiStop_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.MultiStop();
};
ExecutionControlProcessor.prototype.process_MultiGo = function(seqid, input, output) {
  var args = new ExecutionControl_MultiGo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.MultiGo();
};
ExecutionControlProcessor.prototype.process_SetRunAll = function(seqid, input, output) {
  var args = new ExecutionControl_SetRunAll_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.SetRunAll(args.all);
};

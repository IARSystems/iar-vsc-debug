//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./ServiceRegistry_types');
import Protocol = ttypes.Protocol
import Transport = ttypes.Transport
import IAR_SERVICE_REGISTRY_ENVVAR = ttypes.IAR_SERVICE_REGISTRY_ENVVAR
import IAR_CSPY_PIPE_PREFIX = ttypes.IAR_CSPY_PIPE_PREFIX
import SERVICE_REGISTRY_SERVICE = ttypes.SERVICE_REGISTRY_SERVICE
import ServiceException = ttypes.ServiceException
import ServiceLocation = ttypes.ServiceLocation

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  waitForService(serviceName: string, timeout: number): Q.Promise<ServiceLocation>;

  waitForService(serviceName: string, timeout: number, callback?: (error: ttypes.ServiceException, response: ServiceLocation)=>void): void;

  registerService(serviceName: string, location: ServiceLocation): Q.Promise<void>;

  registerService(serviceName: string, location: ServiceLocation, callback?: (error: ttypes.ServiceException, response: void)=>void): void;

  deregisterService(serviceName: string): Q.Promise<void>;

  deregisterService(serviceName: string, callback?: (error: void, response: void)=>void): void;

  addServiceListener(filterRegex: string, serviceListenerId: string): Q.Promise<void>;

  addServiceListener(filterRegex: string, serviceListenerId: string, callback?: (error: ttypes.ServiceException, response: void)=>void): void;

  removeServiceListener(serviceListenerId: string): Q.Promise<void>;

  removeServiceListener(serviceListenerId: string, callback?: (error: void, response: void)=>void): void;

  getServices(): Q.Promise<{ [k: string]: ServiceLocation; }>;

  getServices(callback?: (error: void, response: { [k: string]: ServiceLocation; })=>void): void;

  isAlive(): Q.Promise<void>;

  isAlive(callback?: (error: void, response: void)=>void): void;

  getSupportedTransports(): Q.Promise<Transport[]>;

  getSupportedTransports(callback?: (error: void, response: Transport[])=>void): void;

  createNamespace(name: string): Q.Promise<ServiceLocation>;

  createNamespace(name: string, callback?: (error: void, response: ServiceLocation)=>void): void;

  removeNamespace(name: string): Q.Promise<void>;

  removeNamespace(name: string, callback?: (error: void, response: void)=>void): void;

  getNamespaces(): Q.Promise<string[]>;

  getNamespaces(callback?: (error: void, response: string[])=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_waitForService(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_registerService(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deregisterService(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addServiceListener(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeServiceListener(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getServices(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isAlive(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getSupportedTransports(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createNamespace(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeNamespace(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getNamespaces(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

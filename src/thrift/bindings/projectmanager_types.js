//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
ttypes.ToolType = {
  '1' : 'Compiler',
  'Compiler' : 1,
  '2' : 'Assembler',
  'Assembler' : 2,
  '3' : 'Linker',
  'Linker' : 3,
  '4' : 'Archiver',
  'Archiver' : 4,
  '5' : 'Other',
  'Other' : 5
};
ttypes.InvocationType = {
  '1' : 'SingleInput',
  'SingleInput' : 1,
  '2' : 'MultiInput',
  'MultiInput' : 2
};
ttypes.NodeType = {
  '1' : 'Group',
  'Group' : 1,
  '2' : 'File',
  'File' : 2
};
var ProjectManagerError = module.exports.ProjectManagerError = function(args) {
  Thrift.TException.call(this, "ProjectManagerError");
  this.name = "ProjectManagerError";
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(ProjectManagerError, Thrift.TException);
ProjectManagerError.prototype.name = 'ProjectManagerError';
ProjectManagerError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManagerError.prototype.write = function(output) {
  output.writeStructBegin('ProjectManagerError');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ToolDefinition = module.exports.ToolDefinition = function(args) {
  this.id = null;
  this.name = null;
  this.executableName = null;
  this.inputExtensions = null;
  this.outputExtensions = null;
  this.toolType = null;
  this.invocationType = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.executableName !== undefined && args.executableName !== null) {
      this.executableName = args.executableName;
    }
    if (args.inputExtensions !== undefined && args.inputExtensions !== null) {
      this.inputExtensions = Thrift.copyList(args.inputExtensions, [null]);
    }
    if (args.outputExtensions !== undefined && args.outputExtensions !== null) {
      this.outputExtensions = Thrift.copyList(args.outputExtensions, [null]);
    }
    if (args.toolType !== undefined && args.toolType !== null) {
      this.toolType = args.toolType;
    }
    if (args.invocationType !== undefined && args.invocationType !== null) {
      this.invocationType = args.invocationType;
    }
  }
};
ToolDefinition.prototype = {};
ToolDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.executableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.inputExtensions = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.inputExtensions.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.outputExtensions = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString();
          this.outputExtensions.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.toolType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.invocationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToolDefinition.prototype.write = function(output) {
  output.writeStructBegin('ToolDefinition');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.executableName !== null && this.executableName !== undefined) {
    output.writeFieldBegin('executableName', Thrift.Type.STRING, 3);
    output.writeString(this.executableName);
    output.writeFieldEnd();
  }
  if (this.inputExtensions !== null && this.inputExtensions !== undefined) {
    output.writeFieldBegin('inputExtensions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inputExtensions.length);
    for (var iter8 in this.inputExtensions) {
      if (this.inputExtensions.hasOwnProperty(iter8)) {
        iter8 = this.inputExtensions[iter8];
        output.writeString(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputExtensions !== null && this.outputExtensions !== undefined) {
    output.writeFieldBegin('outputExtensions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.outputExtensions.length);
    for (var iter9 in this.outputExtensions) {
      if (this.outputExtensions.hasOwnProperty(iter9)) {
        iter9 = this.outputExtensions[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.toolType !== null && this.toolType !== undefined) {
    output.writeFieldBegin('toolType', Thrift.Type.I32, 6);
    output.writeI32(this.toolType);
    output.writeFieldEnd();
  }
  if (this.invocationType !== null && this.invocationType !== undefined) {
    output.writeFieldBegin('invocationType', Thrift.Type.I32, 7);
    output.writeI32(this.invocationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Toolchain = module.exports.Toolchain = function(args) {
  this.id = null;
  this.name = null;
  this.tools = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.tools !== undefined && args.tools !== null) {
      this.tools = Thrift.copyList(args.tools, [ttypes.ToolDefinition]);
    }
  }
};
Toolchain.prototype = {};
Toolchain.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.tools = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.ToolDefinition();
          elem13.read(input);
          this.tools.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Toolchain.prototype.write = function(output) {
  output.writeStructBegin('Toolchain');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.tools !== null && this.tools !== undefined) {
    output.writeFieldBegin('tools', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tools.length);
    for (var iter14 in this.tools) {
      if (this.tools.hasOwnProperty(iter14)) {
        iter14 = this.tools[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Configuration = module.exports.Configuration = function(args) {
  this.name = null;
  this.toolchainId = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
  }
};
Configuration.prototype = {};
Configuration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Configuration.prototype.write = function(output) {
  output.writeStructBegin('Configuration');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 2);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectContext = module.exports.ProjectContext = function(args) {
  this.filename = null;
  this.configurations = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.configurations !== undefined && args.configurations !== null) {
      this.configurations = Thrift.copyList(args.configurations, [ttypes.Configuration]);
    }
  }
};
ProjectContext.prototype = {};
ProjectContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.configurations = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.Configuration();
          elem18.read(input);
          this.configurations.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectContext.prototype.write = function(output) {
  output.writeStructBegin('ProjectContext');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.configurations !== null && this.configurations !== undefined) {
    output.writeFieldBegin('configurations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.configurations.length);
    for (var iter19 in this.configurations) {
      if (this.configurations.hasOwnProperty(iter19)) {
        iter19 = this.configurations[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Node = module.exports.Node = function(args) {
  this.name = null;
  this.children = null;
  this.type = null;
  this.path = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.children !== undefined && args.children !== null) {
      this.children = Thrift.copyList(args.children, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Node.prototype = {};
Node.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.children = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.Node();
          elem23.read(input);
          this.children.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Node.prototype.write = function(output) {
  output.writeStructBegin('Node');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.children !== null && this.children !== undefined) {
    output.writeFieldBegin('children', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.children.length);
    for (var iter24 in this.children) {
      if (this.children.hasOwnProperty(iter24)) {
        iter24 = this.children[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.PROJECTMANAGER_ID = 'com.iar.thrift.service.projectmanager';

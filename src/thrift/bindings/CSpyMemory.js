//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./memory_types');
//HELPER FUNCTIONS AND STRUCTURES

var CSpyMemory_readMemory_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
CSpyMemory_readMemory_args.prototype = {};
CSpyMemory_readMemory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemory_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemory_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_readMemory_result.prototype = {};
CSpyMemory_readMemory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemory_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemoryBlock_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
CSpyMemory_readMemoryBlock_args.prototype = {};
CSpyMemory_readMemoryBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemoryBlock_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemoryBlock_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemoryBlock_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CSpyMemoryBlock(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_readMemoryBlock_result.prototype = {};
CSpyMemory_readMemoryBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CSpyMemoryBlock();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemoryBlock_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemoryBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_writeMemory_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  this.buf = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.buf !== undefined && args.buf !== null) {
      this.buf = args.buf;
    }
  }
};
CSpyMemory_writeMemory_args.prototype = {};
CSpyMemory_writeMemory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.buf = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_writeMemory_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_writeMemory_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.buf !== null && this.buf !== undefined) {
    output.writeFieldBegin('buf', Thrift.Type.STRING, 5);
    output.writeBinary(this.buf);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_writeMemory_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_writeMemory_result.prototype = {};
CSpyMemory_writeMemory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_writeMemory_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_writeMemory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemoryClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
CSpyMemoryClient.prototype = {};
CSpyMemoryClient.prototype.seqid = function() { return this._seqid; };
CSpyMemoryClient.prototype.new_seqid = function() { return this._seqid += 1; };

CSpyMemoryClient.prototype.readMemory = function(location, wordsize, bitsize, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readMemory(location, wordsize, bitsize, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readMemory(location, wordsize, bitsize, count);
  }
};

CSpyMemoryClient.prototype.send_readMemory = function(location, wordsize, bitsize, count) {
  var output = new this.pClass(this.output);
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count
  };
  var args = new CSpyMemory_readMemory_args(params);
  try {
    output.writeMessageBegin('readMemory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_readMemory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyMemory_readMemory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readMemory failed: unknown result');
};

CSpyMemoryClient.prototype.readMemoryBlock = function(location, wordsize, bitsize, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readMemoryBlock(location, wordsize, bitsize, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readMemoryBlock(location, wordsize, bitsize, count);
  }
};

CSpyMemoryClient.prototype.send_readMemoryBlock = function(location, wordsize, bitsize, count) {
  var output = new this.pClass(this.output);
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count
  };
  var args = new CSpyMemory_readMemoryBlock_args(params);
  try {
    output.writeMessageBegin('readMemoryBlock', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_readMemoryBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyMemory_readMemoryBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readMemoryBlock failed: unknown result');
};

CSpyMemoryClient.prototype.writeMemory = function(location, wordsize, bitsize, count, buf, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeMemory(location, wordsize, bitsize, count, buf);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeMemory(location, wordsize, bitsize, count, buf);
  }
};

CSpyMemoryClient.prototype.send_writeMemory = function(location, wordsize, bitsize, count, buf) {
  var output = new this.pClass(this.output);
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count,
    buf: buf
  };
  var args = new CSpyMemory_writeMemory_args(params);
  try {
    output.writeMessageBegin('writeMemory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_writeMemory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyMemory_writeMemory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var CSpyMemoryProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
CSpyMemoryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CSpyMemoryProcessor.prototype.process_readMemory = function(seqid, input, output) {
  var args = new CSpyMemory_readMemory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readMemory.length === 4) {
    Q.fcall(this._handler.readMemory.bind(this._handler),
      args.location,
      args.wordsize,
      args.bitsize,
      args.count
    ).then(function(result) {
      var result_obj = new CSpyMemory_readMemory_result({success: result});
      output.writeMessageBegin("readMemory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new CSpyMemory_readMemory_result(err);
        output.writeMessageBegin("readMemory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readMemory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.readMemory(args.location, args.wordsize, args.bitsize, args.count, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new CSpyMemory_readMemory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readMemory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readMemory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyMemoryProcessor.prototype.process_readMemoryBlock = function(seqid, input, output) {
  var args = new CSpyMemory_readMemoryBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readMemoryBlock.length === 4) {
    Q.fcall(this._handler.readMemoryBlock.bind(this._handler),
      args.location,
      args.wordsize,
      args.bitsize,
      args.count
    ).then(function(result) {
      var result_obj = new CSpyMemory_readMemoryBlock_result({success: result});
      output.writeMessageBegin("readMemoryBlock", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new CSpyMemory_readMemoryBlock_result(err);
        output.writeMessageBegin("readMemoryBlock", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readMemoryBlock", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.readMemoryBlock(args.location, args.wordsize, args.bitsize, args.count, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new CSpyMemory_readMemoryBlock_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readMemoryBlock", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readMemoryBlock", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyMemoryProcessor.prototype.process_writeMemory = function(seqid, input, output) {
  var args = new CSpyMemory_writeMemory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeMemory.length === 5) {
    Q.fcall(this._handler.writeMemory.bind(this._handler),
      args.location,
      args.wordsize,
      args.bitsize,
      args.count,
      args.buf
    ).then(function(result) {
      var result_obj = new CSpyMemory_writeMemory_result({success: result});
      output.writeMessageBegin("writeMemory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new CSpyMemory_writeMemory_result(err);
        output.writeMessageBegin("writeMemory", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeMemory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.writeMemory(args.location, args.wordsize, args.bitsize, args.count, args.buf, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new CSpyMemory_writeMemory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeMemory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeMemory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

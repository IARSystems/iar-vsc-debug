//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./ServiceRegistry_types');
//HELPER FUNCTIONS AND STRUCTURES

var CSpyServiceRegistry_waitForService_args = function(args) {
  this.serviceName = null;
  this.timeout = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.timeout !== undefined && args.timeout !== null) {
      this.timeout = args.timeout;
    }
  }
};
CSpyServiceRegistry_waitForService_args.prototype = {};
CSpyServiceRegistry_waitForService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_waitForService_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_waitForService_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I32, 2);
    output.writeI32(this.timeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_waitForService_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ServiceLocation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceRegistry_waitForService_result.prototype = {};
CSpyServiceRegistry_waitForService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ServiceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_waitForService_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_waitForService_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_registerService_args = function(args) {
  this.serviceName = null;
  this.location = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.ServiceLocation(args.location);
    }
  }
};
CSpyServiceRegistry_registerService_args.prototype = {};
CSpyServiceRegistry_registerService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.ServiceLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_registerService_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_registerService_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 2);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_registerService_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceRegistry_registerService_result.prototype = {};
CSpyServiceRegistry_registerService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_registerService_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_registerService_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_deregisterService_args = function(args) {
  this.serviceName = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
  }
};
CSpyServiceRegistry_deregisterService_args.prototype = {};
CSpyServiceRegistry_deregisterService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_deregisterService_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_deregisterService_args');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_deregisterService_result = function(args) {
};
CSpyServiceRegistry_deregisterService_result.prototype = {};
CSpyServiceRegistry_deregisterService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_deregisterService_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_deregisterService_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_addServiceListener_args = function(args) {
  this.filterRegex = null;
  this.serviceListenerId = null;
  if (args) {
    if (args.filterRegex !== undefined && args.filterRegex !== null) {
      this.filterRegex = args.filterRegex;
    }
    if (args.serviceListenerId !== undefined && args.serviceListenerId !== null) {
      this.serviceListenerId = args.serviceListenerId;
    }
  }
};
CSpyServiceRegistry_addServiceListener_args.prototype = {};
CSpyServiceRegistry_addServiceListener_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterRegex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceListenerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_addServiceListener_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_addServiceListener_args');
  if (this.filterRegex !== null && this.filterRegex !== undefined) {
    output.writeFieldBegin('filterRegex', Thrift.Type.STRING, 1);
    output.writeString(this.filterRegex);
    output.writeFieldEnd();
  }
  if (this.serviceListenerId !== null && this.serviceListenerId !== undefined) {
    output.writeFieldBegin('serviceListenerId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceListenerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_addServiceListener_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyServiceRegistry_addServiceListener_result.prototype = {};
CSpyServiceRegistry_addServiceListener_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_addServiceListener_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_addServiceListener_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_removeServiceListener_args = function(args) {
  this.serviceListenerId = null;
  if (args) {
    if (args.serviceListenerId !== undefined && args.serviceListenerId !== null) {
      this.serviceListenerId = args.serviceListenerId;
    }
  }
};
CSpyServiceRegistry_removeServiceListener_args.prototype = {};
CSpyServiceRegistry_removeServiceListener_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceListenerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_removeServiceListener_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_removeServiceListener_args');
  if (this.serviceListenerId !== null && this.serviceListenerId !== undefined) {
    output.writeFieldBegin('serviceListenerId', Thrift.Type.STRING, 2);
    output.writeString(this.serviceListenerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_removeServiceListener_result = function(args) {
};
CSpyServiceRegistry_removeServiceListener_result.prototype = {};
CSpyServiceRegistry_removeServiceListener_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_removeServiceListener_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_removeServiceListener_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getServices_args = function(args) {
};
CSpyServiceRegistry_getServices_args.prototype = {};
CSpyServiceRegistry_getServices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getServices_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getServices_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getServices_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.ServiceLocation]);
    }
  }
};
CSpyServiceRegistry_getServices_result.prototype = {};
CSpyServiceRegistry_getServices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var key10 = null;
          var val11 = null;
          key10 = input.readString();
          val11 = new ttypes.ServiceLocation();
          val11.read(input);
          this.success[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getServices_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getServices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter12 in this.success) {
      if (this.success.hasOwnProperty(kiter12)) {
        var viter13 = this.success[kiter12];
        output.writeString(kiter12);
        viter13.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_isAlive_args = function(args) {
};
CSpyServiceRegistry_isAlive_args.prototype = {};
CSpyServiceRegistry_isAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_isAlive_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_isAlive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_isAlive_result = function(args) {
};
CSpyServiceRegistry_isAlive_result.prototype = {};
CSpyServiceRegistry_isAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_isAlive_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_isAlive_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getSupportedTransports_args = function(args) {
};
CSpyServiceRegistry_getSupportedTransports_args.prototype = {};
CSpyServiceRegistry_getSupportedTransports_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getSupportedTransports_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getSupportedTransports_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getSupportedTransports_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CSpyServiceRegistry_getSupportedTransports_result.prototype = {};
CSpyServiceRegistry_getSupportedTransports_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = input.readI32();
          this.success.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getSupportedTransports_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getSupportedTransports_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter18 in this.success) {
      if (this.success.hasOwnProperty(iter18)) {
        iter18 = this.success[iter18];
        output.writeI32(iter18);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_createNamespace_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
CSpyServiceRegistry_createNamespace_args.prototype = {};
CSpyServiceRegistry_createNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_createNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_createNamespace_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_createNamespace_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ServiceLocation(args.success);
    }
  }
};
CSpyServiceRegistry_createNamespace_result.prototype = {};
CSpyServiceRegistry_createNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ServiceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_createNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_createNamespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_removeNamespace_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
CSpyServiceRegistry_removeNamespace_args.prototype = {};
CSpyServiceRegistry_removeNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_removeNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_removeNamespace_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_removeNamespace_result = function(args) {
};
CSpyServiceRegistry_removeNamespace_result.prototype = {};
CSpyServiceRegistry_removeNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_removeNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_removeNamespace_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getNamespaces_args = function(args) {
};
CSpyServiceRegistry_getNamespaces_args.prototype = {};
CSpyServiceRegistry_getNamespaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getNamespaces_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getNamespaces_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistry_getNamespaces_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
CSpyServiceRegistry_getNamespaces_result.prototype = {};
CSpyServiceRegistry_getNamespaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp320 = input.readListBegin();
        var _size19 = _rtmp320.size || 0;
        for (var _i21 = 0; _i21 < _size19; ++_i21) {
          var elem22 = null;
          elem22 = input.readString();
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyServiceRegistry_getNamespaces_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyServiceRegistry_getNamespaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success) {
      if (this.success.hasOwnProperty(iter23)) {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyServiceRegistryClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
CSpyServiceRegistryClient.prototype = {};
CSpyServiceRegistryClient.prototype.seqid = function() { return this._seqid; };
CSpyServiceRegistryClient.prototype.new_seqid = function() { return this._seqid += 1; };

CSpyServiceRegistryClient.prototype.waitForService = function(serviceName, timeout, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_waitForService(serviceName, timeout);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_waitForService(serviceName, timeout);
  }
};

CSpyServiceRegistryClient.prototype.send_waitForService = function(serviceName, timeout) {
  var output = new this.pClass(this.output);
  var params = {
    serviceName: serviceName,
    timeout: timeout
  };
  var args = new CSpyServiceRegistry_waitForService_args(params);
  try {
    output.writeMessageBegin('waitForService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_waitForService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_waitForService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('waitForService failed: unknown result');
};

CSpyServiceRegistryClient.prototype.registerService = function(serviceName, location, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerService(serviceName, location);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerService(serviceName, location);
  }
};

CSpyServiceRegistryClient.prototype.send_registerService = function(serviceName, location) {
  var output = new this.pClass(this.output);
  var params = {
    serviceName: serviceName,
    location: location
  };
  var args = new CSpyServiceRegistry_registerService_args(params);
  try {
    output.writeMessageBegin('registerService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_registerService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_registerService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceRegistryClient.prototype.deregisterService = function(serviceName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deregisterService(serviceName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deregisterService(serviceName);
  }
};

CSpyServiceRegistryClient.prototype.send_deregisterService = function(serviceName) {
  var output = new this.pClass(this.output);
  var params = {
    serviceName: serviceName
  };
  var args = new CSpyServiceRegistry_deregisterService_args(params);
  try {
    output.writeMessageBegin('deregisterService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_deregisterService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_deregisterService_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CSpyServiceRegistryClient.prototype.addServiceListener = function(filterRegex, serviceListenerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addServiceListener(filterRegex, serviceListenerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addServiceListener(filterRegex, serviceListenerId);
  }
};

CSpyServiceRegistryClient.prototype.send_addServiceListener = function(filterRegex, serviceListenerId) {
  var output = new this.pClass(this.output);
  var params = {
    filterRegex: filterRegex,
    serviceListenerId: serviceListenerId
  };
  var args = new CSpyServiceRegistry_addServiceListener_args(params);
  try {
    output.writeMessageBegin('addServiceListener', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_addServiceListener = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_addServiceListener_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

CSpyServiceRegistryClient.prototype.removeServiceListener = function(serviceListenerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeServiceListener(serviceListenerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeServiceListener(serviceListenerId);
  }
};

CSpyServiceRegistryClient.prototype.send_removeServiceListener = function(serviceListenerId) {
  var output = new this.pClass(this.output);
  var params = {
    serviceListenerId: serviceListenerId
  };
  var args = new CSpyServiceRegistry_removeServiceListener_args(params);
  try {
    output.writeMessageBegin('removeServiceListener', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_removeServiceListener = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_removeServiceListener_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CSpyServiceRegistryClient.prototype.getServices = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServices();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServices();
  }
};

CSpyServiceRegistryClient.prototype.send_getServices = function() {
  var output = new this.pClass(this.output);
  var args = new CSpyServiceRegistry_getServices_args();
  try {
    output.writeMessageBegin('getServices', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_getServices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_getServices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServices failed: unknown result');
};

CSpyServiceRegistryClient.prototype.isAlive = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isAlive();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isAlive();
  }
};

CSpyServiceRegistryClient.prototype.send_isAlive = function() {
  var output = new this.pClass(this.output);
  var args = new CSpyServiceRegistry_isAlive_args();
  try {
    output.writeMessageBegin('isAlive', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_isAlive = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_isAlive_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CSpyServiceRegistryClient.prototype.getSupportedTransports = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSupportedTransports();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSupportedTransports();
  }
};

CSpyServiceRegistryClient.prototype.send_getSupportedTransports = function() {
  var output = new this.pClass(this.output);
  var args = new CSpyServiceRegistry_getSupportedTransports_args();
  try {
    output.writeMessageBegin('getSupportedTransports', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_getSupportedTransports = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_getSupportedTransports_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSupportedTransports failed: unknown result');
};

CSpyServiceRegistryClient.prototype.createNamespace = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createNamespace(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createNamespace(name);
  }
};

CSpyServiceRegistryClient.prototype.send_createNamespace = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new CSpyServiceRegistry_createNamespace_args(params);
  try {
    output.writeMessageBegin('createNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_createNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_createNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createNamespace failed: unknown result');
};

CSpyServiceRegistryClient.prototype.removeNamespace = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeNamespace(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeNamespace(name);
  }
};

CSpyServiceRegistryClient.prototype.send_removeNamespace = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new CSpyServiceRegistry_removeNamespace_args(params);
  try {
    output.writeMessageBegin('removeNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_removeNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_removeNamespace_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CSpyServiceRegistryClient.prototype.getNamespaces = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNamespaces();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNamespaces();
  }
};

CSpyServiceRegistryClient.prototype.send_getNamespaces = function() {
  var output = new this.pClass(this.output);
  var args = new CSpyServiceRegistry_getNamespaces_args();
  try {
    output.writeMessageBegin('getNamespaces', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CSpyServiceRegistryClient.prototype.recv_getNamespaces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CSpyServiceRegistry_getNamespaces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNamespaces failed: unknown result');
};
var CSpyServiceRegistryProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
CSpyServiceRegistryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CSpyServiceRegistryProcessor.prototype.process_waitForService = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_waitForService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.waitForService.length === 2) {
    Q.fcall(this._handler.waitForService.bind(this._handler),
      args.serviceName,
      args.timeout
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_waitForService_result({success: result});
      output.writeMessageBegin("waitForService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServiceException) {
        result = new CSpyServiceRegistry_waitForService_result(err);
        output.writeMessageBegin("waitForService", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("waitForService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.waitForService(args.serviceName, args.timeout, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new CSpyServiceRegistry_waitForService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("waitForService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("waitForService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_registerService = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_registerService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerService.length === 2) {
    Q.fcall(this._handler.registerService.bind(this._handler),
      args.serviceName,
      args.location
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_registerService_result({success: result});
      output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServiceException) {
        result = new CSpyServiceRegistry_registerService_result(err);
        output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.registerService(args.serviceName, args.location, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new CSpyServiceRegistry_registerService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_deregisterService = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_deregisterService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deregisterService.length === 1) {
    Q.fcall(this._handler.deregisterService.bind(this._handler),
      args.serviceName
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_deregisterService_result({success: result});
      output.writeMessageBegin("deregisterService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("deregisterService", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deregisterService(args.serviceName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_deregisterService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deregisterService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deregisterService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_addServiceListener = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_addServiceListener_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addServiceListener.length === 2) {
    Q.fcall(this._handler.addServiceListener.bind(this._handler),
      args.filterRegex,
      args.serviceListenerId
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_addServiceListener_result({success: result});
      output.writeMessageBegin("addServiceListener", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ServiceException) {
        result = new CSpyServiceRegistry_addServiceListener_result(err);
        output.writeMessageBegin("addServiceListener", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addServiceListener", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addServiceListener(args.filterRegex, args.serviceListenerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ServiceException) {
        result_obj = new CSpyServiceRegistry_addServiceListener_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addServiceListener", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addServiceListener", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_removeServiceListener = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_removeServiceListener_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeServiceListener.length === 1) {
    Q.fcall(this._handler.removeServiceListener.bind(this._handler),
      args.serviceListenerId
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_removeServiceListener_result({success: result});
      output.writeMessageBegin("removeServiceListener", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("removeServiceListener", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeServiceListener(args.serviceListenerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_removeServiceListener_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeServiceListener", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeServiceListener", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_getServices = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_getServices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServices.length === 0) {
    Q.fcall(this._handler.getServices.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_getServices_result({success: result});
      output.writeMessageBegin("getServices", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getServices", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getServices(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_getServices_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServices", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_isAlive = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_isAlive_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isAlive.length === 0) {
    Q.fcall(this._handler.isAlive.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_isAlive_result({success: result});
      output.writeMessageBegin("isAlive", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isAlive", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isAlive(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_isAlive_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isAlive", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isAlive", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_getSupportedTransports = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_getSupportedTransports_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSupportedTransports.length === 0) {
    Q.fcall(this._handler.getSupportedTransports.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_getSupportedTransports_result({success: result});
      output.writeMessageBegin("getSupportedTransports", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getSupportedTransports", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSupportedTransports(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_getSupportedTransports_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSupportedTransports", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSupportedTransports", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_createNamespace = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_createNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createNamespace.length === 1) {
    Q.fcall(this._handler.createNamespace.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_createNamespace_result({success: result});
      output.writeMessageBegin("createNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("createNamespace", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createNamespace(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_createNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_removeNamespace = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_removeNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeNamespace.length === 1) {
    Q.fcall(this._handler.removeNamespace.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_removeNamespace_result({success: result});
      output.writeMessageBegin("removeNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("removeNamespace", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeNamespace(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_removeNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CSpyServiceRegistryProcessor.prototype.process_getNamespaces = function(seqid, input, output) {
  var args = new CSpyServiceRegistry_getNamespaces_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNamespaces.length === 0) {
    Q.fcall(this._handler.getNamespaces.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CSpyServiceRegistry_getNamespaces_result({success: result});
      output.writeMessageBegin("getNamespaces", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getNamespaces", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNamespaces(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CSpyServiceRegistry_getNamespaces_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNamespaces", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNamespaces", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

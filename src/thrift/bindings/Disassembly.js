//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./disassembly_types');
//HELPER FUNCTIONS AND STRUCTURES

var Disassembly_disassembleRange_args = function(args) {
  this._from = null;
  this._to = null;
  this.context = null;
  if (args) {
    if (args._from !== undefined && args._from !== null) {
      this._from = new shared_ttypes.Location(args._from);
    }
    if (args._to !== undefined && args._to !== null) {
      this._to = new shared_ttypes.Location(args._to);
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
Disassembly_disassembleRange_args.prototype = {};
Disassembly_disassembleRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._from = new shared_ttypes.Location();
        this._from.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this._to = new shared_ttypes.Location();
        this._to.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Disassembly_disassembleRange_args.prototype.write = function(output) {
  output.writeStructBegin('Disassembly_disassembleRange_args');
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRUCT, 1);
    this._from.write(output);
    output.writeFieldEnd();
  }
  if (this._to !== null && this._to !== undefined) {
    output.writeFieldBegin('_to', Thrift.Type.STRUCT, 2);
    this._to.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 3);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Disassembly_disassembleRange_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DisassembledLocation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Disassembly_disassembleRange_result.prototype = {};
Disassembly_disassembleRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.DisassembledLocation();
          elem8.read(input);
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Disassembly_disassembleRange_result.prototype.write = function(output) {
  output.writeStructBegin('Disassembly_disassembleRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Disassembly_disassembleLines_args = function(args) {
  this._from = null;
  this.numLines = null;
  this.context = null;
  if (args) {
    if (args._from !== undefined && args._from !== null) {
      this._from = new shared_ttypes.Location(args._from);
    }
    if (args.numLines !== undefined && args.numLines !== null) {
      this.numLines = args.numLines;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
Disassembly_disassembleLines_args.prototype = {};
Disassembly_disassembleLines_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._from = new shared_ttypes.Location();
        this._from.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numLines = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Disassembly_disassembleLines_args.prototype.write = function(output) {
  output.writeStructBegin('Disassembly_disassembleLines_args');
  if (this._from !== null && this._from !== undefined) {
    output.writeFieldBegin('_from', Thrift.Type.STRUCT, 1);
    this._from.write(output);
    output.writeFieldEnd();
  }
  if (this.numLines !== null && this.numLines !== undefined) {
    output.writeFieldBegin('numLines', Thrift.Type.I32, 2);
    output.writeI32(this.numLines);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 3);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Disassembly_disassembleLines_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.DisassembledLocation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Disassembly_disassembleLines_result.prototype = {};
Disassembly_disassembleLines_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.DisassembledLocation();
          elem13.read(input);
          this.success.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Disassembly_disassembleLines_result.prototype.write = function(output) {
  output.writeStructBegin('Disassembly_disassembleLines_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter14 in this.success) {
      if (this.success.hasOwnProperty(iter14)) {
        iter14 = this.success[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DisassemblyClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(DisassemblyClient, HeartbeatServiceClient);
DisassemblyClient.prototype.seqid = function() { return this._seqid; };
DisassemblyClient.prototype.new_seqid = function() { return this._seqid += 1; };

DisassemblyClient.prototype.disassembleRange = function(_from, _to, context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disassembleRange(_from, _to, context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disassembleRange(_from, _to, context);
  }
};

DisassemblyClient.prototype.send_disassembleRange = function(_from, _to, context) {
  var output = new this.pClass(this.output);
  var params = {
    _from: _from,
    _to: _to,
    context: context
  };
  var args = new Disassembly_disassembleRange_args(params);
  try {
    output.writeMessageBegin('disassembleRange', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DisassemblyClient.prototype.recv_disassembleRange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Disassembly_disassembleRange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('disassembleRange failed: unknown result');
};

DisassemblyClient.prototype.disassembleLines = function(_from, numLines, context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disassembleLines(_from, numLines, context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disassembleLines(_from, numLines, context);
  }
};

DisassemblyClient.prototype.send_disassembleLines = function(_from, numLines, context) {
  var output = new this.pClass(this.output);
  var params = {
    _from: _from,
    numLines: numLines,
    context: context
  };
  var args = new Disassembly_disassembleLines_args(params);
  try {
    output.writeMessageBegin('disassembleLines', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DisassemblyClient.prototype.recv_disassembleLines = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Disassembly_disassembleLines_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('disassembleLines failed: unknown result');
};
var DisassemblyProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(DisassemblyProcessor, HeartbeatServiceProcessor);
DisassemblyProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
DisassemblyProcessor.prototype.process_disassembleRange = function(seqid, input, output) {
  var args = new Disassembly_disassembleRange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disassembleRange.length === 3) {
    Q.fcall(this._handler.disassembleRange.bind(this._handler),
      args._from,
      args._to,
      args.context
    ).then(function(result) {
      var result_obj = new Disassembly_disassembleRange_result({success: result});
      output.writeMessageBegin("disassembleRange", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Disassembly_disassembleRange_result(err);
        output.writeMessageBegin("disassembleRange", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disassembleRange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disassembleRange(args._from, args._to, args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Disassembly_disassembleRange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disassembleRange", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disassembleRange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DisassemblyProcessor.prototype.process_disassembleLines = function(seqid, input, output) {
  var args = new Disassembly_disassembleLines_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disassembleLines.length === 3) {
    Q.fcall(this._handler.disassembleLines.bind(this._handler),
      args._from,
      args.numLines,
      args.context
    ).then(function(result) {
      var result_obj = new Disassembly_disassembleLines_result({success: result});
      output.writeMessageBegin("disassembleLines", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Disassembly_disassembleLines_result(err);
        output.writeMessageBegin("disassembleLines", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disassembleLines", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disassembleLines(args._from, args.numLines, args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Disassembly_disassembleLines_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disassembleLines", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disassembleLines", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./iarbuild_types');
//HELPER FUNCTIONS AND STRUCTURES

var IarBuildEventListener_optionStatesChanged_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.Context(args.context);
    }
  }
};
IarBuildEventListener_optionStatesChanged_args.prototype = {};
IarBuildEventListener_optionStatesChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.Context();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_optionStatesChanged_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_optionStatesChanged_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_optionStatesChanged_result = function(args) {
};
IarBuildEventListener_optionStatesChanged_result.prototype = {};
IarBuildEventListener_optionStatesChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_optionStatesChanged_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_optionStatesChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_contentsAdded_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.Context(args.context);
    }
  }
};
IarBuildEventListener_contentsAdded_args.prototype = {};
IarBuildEventListener_contentsAdded_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.Context();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_contentsAdded_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_contentsAdded_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_contentsAdded_result = function(args) {
};
IarBuildEventListener_contentsAdded_result.prototype = {};
IarBuildEventListener_contentsAdded_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_contentsAdded_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_contentsAdded_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_contentsRemoved_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.Context(args.context);
    }
  }
};
IarBuildEventListener_contentsRemoved_args.prototype = {};
IarBuildEventListener_contentsRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.Context();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_contentsRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_contentsRemoved_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_contentsRemoved_result = function(args) {
};
IarBuildEventListener_contentsRemoved_result.prototype = {};
IarBuildEventListener_contentsRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_contentsRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_contentsRemoved_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logAddCategory_args = function(args) {
  this.cat = null;
  if (args) {
    if (args.cat !== undefined && args.cat !== null) {
      this.cat = args.cat;
    }
  }
};
IarBuildEventListener_logAddCategory_args.prototype = {};
IarBuildEventListener_logAddCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logAddCategory_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logAddCategory_args');
  if (this.cat !== null && this.cat !== undefined) {
    output.writeFieldBegin('cat', Thrift.Type.STRING, 1);
    output.writeString(this.cat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logAddCategory_result = function(args) {
};
IarBuildEventListener_logAddCategory_result.prototype = {};
IarBuildEventListener_logAddCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logAddCategory_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logAddCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logRemoveCategory_args = function(args) {
  this.cat = null;
  if (args) {
    if (args.cat !== undefined && args.cat !== null) {
      this.cat = args.cat;
    }
  }
};
IarBuildEventListener_logRemoveCategory_args.prototype = {};
IarBuildEventListener_logRemoveCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logRemoveCategory_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logRemoveCategory_args');
  if (this.cat !== null && this.cat !== undefined) {
    output.writeFieldBegin('cat', Thrift.Type.STRING, 1);
    output.writeString(this.cat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logRemoveCategory_result = function(args) {
};
IarBuildEventListener_logRemoveCategory_result.prototype = {};
IarBuildEventListener_logRemoveCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logRemoveCategory_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logRemoveCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logStartSession_args = function(args) {
  this.cat = null;
  if (args) {
    if (args.cat !== undefined && args.cat !== null) {
      this.cat = args.cat;
    }
  }
};
IarBuildEventListener_logStartSession_args.prototype = {};
IarBuildEventListener_logStartSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logStartSession_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logStartSession_args');
  if (this.cat !== null && this.cat !== undefined) {
    output.writeFieldBegin('cat', Thrift.Type.STRING, 1);
    output.writeString(this.cat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logStartSession_result = function(args) {
};
IarBuildEventListener_logStartSession_result.prototype = {};
IarBuildEventListener_logStartSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logStartSession_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logStartSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logEntry_args = function(args) {
  this.entry = null;
  if (args) {
    if (args.entry !== undefined && args.entry !== null) {
      this.entry = new ttypes.LogEntry(args.entry);
    }
  }
};
IarBuildEventListener_logEntry_args.prototype = {};
IarBuildEventListener_logEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.entry = new ttypes.LogEntry();
        this.entry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logEntry_args.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logEntry_args');
  if (this.entry !== null && this.entry !== undefined) {
    output.writeFieldBegin('entry', Thrift.Type.STRUCT, 1);
    this.entry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListener_logEntry_result = function(args) {
};
IarBuildEventListener_logEntry_result.prototype = {};
IarBuildEventListener_logEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IarBuildEventListener_logEntry_result.prototype.write = function(output) {
  output.writeStructBegin('IarBuildEventListener_logEntry_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IarBuildEventListenerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
IarBuildEventListenerClient.prototype = {};
IarBuildEventListenerClient.prototype.seqid = function() { return this._seqid; };
IarBuildEventListenerClient.prototype.new_seqid = function() { return this._seqid += 1; };

IarBuildEventListenerClient.prototype.optionStatesChanged = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_optionStatesChanged(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_optionStatesChanged(context);
  }
};

IarBuildEventListenerClient.prototype.send_optionStatesChanged = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new IarBuildEventListener_optionStatesChanged_args(params);
  try {
    output.writeMessageBegin('optionStatesChanged', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_optionStatesChanged = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_optionStatesChanged_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.contentsAdded = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_contentsAdded(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_contentsAdded(context);
  }
};

IarBuildEventListenerClient.prototype.send_contentsAdded = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new IarBuildEventListener_contentsAdded_args(params);
  try {
    output.writeMessageBegin('contentsAdded', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_contentsAdded = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_contentsAdded_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.contentsRemoved = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_contentsRemoved(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_contentsRemoved(context);
  }
};

IarBuildEventListenerClient.prototype.send_contentsRemoved = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new IarBuildEventListener_contentsRemoved_args(params);
  try {
    output.writeMessageBegin('contentsRemoved', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_contentsRemoved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_contentsRemoved_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.logAddCategory = function(cat, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logAddCategory(cat);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logAddCategory(cat);
  }
};

IarBuildEventListenerClient.prototype.send_logAddCategory = function(cat) {
  var output = new this.pClass(this.output);
  var params = {
    cat: cat
  };
  var args = new IarBuildEventListener_logAddCategory_args(params);
  try {
    output.writeMessageBegin('logAddCategory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_logAddCategory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_logAddCategory_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.logRemoveCategory = function(cat, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logRemoveCategory(cat);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logRemoveCategory(cat);
  }
};

IarBuildEventListenerClient.prototype.send_logRemoveCategory = function(cat) {
  var output = new this.pClass(this.output);
  var params = {
    cat: cat
  };
  var args = new IarBuildEventListener_logRemoveCategory_args(params);
  try {
    output.writeMessageBegin('logRemoveCategory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_logRemoveCategory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_logRemoveCategory_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.logStartSession = function(cat, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logStartSession(cat);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logStartSession(cat);
  }
};

IarBuildEventListenerClient.prototype.send_logStartSession = function(cat) {
  var output = new this.pClass(this.output);
  var params = {
    cat: cat
  };
  var args = new IarBuildEventListener_logStartSession_args(params);
  try {
    output.writeMessageBegin('logStartSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_logStartSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_logStartSession_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

IarBuildEventListenerClient.prototype.logEntry = function(entry, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logEntry(entry);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logEntry(entry);
  }
};

IarBuildEventListenerClient.prototype.send_logEntry = function(entry) {
  var output = new this.pClass(this.output);
  var params = {
    entry: entry
  };
  var args = new IarBuildEventListener_logEntry_args(params);
  try {
    output.writeMessageBegin('logEntry', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

IarBuildEventListenerClient.prototype.recv_logEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IarBuildEventListener_logEntry_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var IarBuildEventListenerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
IarBuildEventListenerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
IarBuildEventListenerProcessor.prototype.process_optionStatesChanged = function(seqid, input, output) {
  var args = new IarBuildEventListener_optionStatesChanged_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.optionStatesChanged.length === 1) {
    Q.fcall(this._handler.optionStatesChanged.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_optionStatesChanged_result({success: result});
      output.writeMessageBegin("optionStatesChanged", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("optionStatesChanged", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.optionStatesChanged(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_optionStatesChanged_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("optionStatesChanged", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("optionStatesChanged", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_contentsAdded = function(seqid, input, output) {
  var args = new IarBuildEventListener_contentsAdded_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.contentsAdded.length === 1) {
    Q.fcall(this._handler.contentsAdded.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_contentsAdded_result({success: result});
      output.writeMessageBegin("contentsAdded", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("contentsAdded", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.contentsAdded(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_contentsAdded_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("contentsAdded", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("contentsAdded", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_contentsRemoved = function(seqid, input, output) {
  var args = new IarBuildEventListener_contentsRemoved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.contentsRemoved.length === 1) {
    Q.fcall(this._handler.contentsRemoved.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_contentsRemoved_result({success: result});
      output.writeMessageBegin("contentsRemoved", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("contentsRemoved", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.contentsRemoved(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_contentsRemoved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("contentsRemoved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("contentsRemoved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_logAddCategory = function(seqid, input, output) {
  var args = new IarBuildEventListener_logAddCategory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logAddCategory.length === 1) {
    Q.fcall(this._handler.logAddCategory.bind(this._handler),
      args.cat
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_logAddCategory_result({success: result});
      output.writeMessageBegin("logAddCategory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("logAddCategory", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logAddCategory(args.cat, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_logAddCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logAddCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logAddCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_logRemoveCategory = function(seqid, input, output) {
  var args = new IarBuildEventListener_logRemoveCategory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logRemoveCategory.length === 1) {
    Q.fcall(this._handler.logRemoveCategory.bind(this._handler),
      args.cat
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_logRemoveCategory_result({success: result});
      output.writeMessageBegin("logRemoveCategory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("logRemoveCategory", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logRemoveCategory(args.cat, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_logRemoveCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logRemoveCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logRemoveCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_logStartSession = function(seqid, input, output) {
  var args = new IarBuildEventListener_logStartSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logStartSession.length === 1) {
    Q.fcall(this._handler.logStartSession.bind(this._handler),
      args.cat
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_logStartSession_result({success: result});
      output.writeMessageBegin("logStartSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("logStartSession", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logStartSession(args.cat, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_logStartSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logStartSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logStartSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
IarBuildEventListenerProcessor.prototype.process_logEntry = function(seqid, input, output) {
  var args = new IarBuildEventListener_logEntry_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logEntry.length === 1) {
    Q.fcall(this._handler.logEntry.bind(this._handler),
      args.entry
    ).then(function(result) {
      var result_obj = new IarBuildEventListener_logEntry_result({success: result});
      output.writeMessageBegin("logEntry", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("logEntry", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logEntry(args.entry, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new IarBuildEventListener_logEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

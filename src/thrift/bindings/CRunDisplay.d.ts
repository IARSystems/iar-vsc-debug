//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import ServiceRegistry_ttypes = require('./ServiceRegistry_types');
import shared_ttypes = require('./shared_types');


import ttypes = require('./crun_types');
import CRunBreakAction = ttypes.CRunBreakAction
import CRUN_DISPLAY_SERVICE = ttypes.CRUN_DISPLAY_SERVICE
import CRUN_BACKEND_SERVICE = ttypes.CRUN_BACKEND_SERVICE
import CRunMessage = ttypes.CRunMessage

/**
 * Service for presenting C-RUN messages to the user.
 */
declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  itemAdded(message: CRunMessage, partnerNamespace: string): Q.Promise<void>;

  itemAdded(message: CRunMessage, partnerNamespace: string, callback?: (error: void, response: void)=>void): void;

  itemUpdated(message: CRunMessage, partnerNamespace: string): Q.Promise<void>;

  itemUpdated(message: CRunMessage, partnerNamespace: string, callback?: (error: void, response: void)=>void): void;

  itemRemoved(index: number, partnerNamespace: string): Q.Promise<void>;

  itemRemoved(index: number, partnerNamespace: string, callback?: (error: void, response: void)=>void): void;

  updateAll(partnerNamespace: string): Q.Promise<void>;

  updateAll(partnerNamespace: string, callback?: (error: void, response: void)=>void): void;

  filtersChanged(partnerNamespace: string): Q.Promise<void>;

  filtersChanged(partnerNamespace: string, callback?: (error: void, response: void)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_itemAdded(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_itemUpdated(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_itemRemoved(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_updateAll(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_filtersChanged(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

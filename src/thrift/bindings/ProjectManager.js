//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./projectmanager_types');
//HELPER FUNCTIONS AND STRUCTURES

var ProjectManager_CreateEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_CreateEwpFile_args.prototype = {};
ProjectManager_CreateEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwpFile_result.prototype = {};
ProjectManager_CreateEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_LoadEwpFile_args.prototype = {};
ProjectManager_LoadEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_LoadEwpFile_result.prototype = {};
ProjectManager_LoadEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_SaveEwpFile_args.prototype = {};
ProjectManager_SaveEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwpFile_result.prototype = {};
ProjectManager_SaveEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_GetProject_args.prototype = {};
ProjectManager_GetProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetProject_result.prototype = {};
ProjectManager_GetProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_CloseProject_args.prototype = {};
ProjectManager_CloseProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CloseProject_result.prototype = {};
ProjectManager_CloseProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_args = function(args) {
  this.config = null;
  this.project = null;
  this.isDebug = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.Configuration(args.config);
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.isDebug !== undefined && args.isDebug !== null) {
      this.isDebug = args.isDebug;
    }
  }
};
ProjectManager_AddConfiguration_args.prototype = {};
ProjectManager_AddConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDebug = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.isDebug !== null && this.isDebug !== undefined) {
    output.writeFieldBegin('isDebug', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDebug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_result = function(args) {
};
ProjectManager_AddConfiguration_result.prototype = {};
ProjectManager_AddConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_args = function(args) {
  this.configurationName = null;
  this.project = null;
  if (args) {
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_RemoveConfiguration_args.prototype = {};
ProjectManager_RemoveConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_args');
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 1);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_result = function(args) {
};
ProjectManager_RemoveConfiguration_result.prototype = {};
ProjectManager_RemoveConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_GetConfigurations_args.prototype = {};
ProjectManager_GetConfigurations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Configuration]);
    }
  }
};
ProjectManager_GetConfigurations_result.prototype = {};
ProjectManager_GetConfigurations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.Configuration();
          elem28.read(input);
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_GetRootNode_args.prototype = {};
ProjectManager_GetRootNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
ProjectManager_GetRootNode_result.prototype = {};
ProjectManager_GetRootNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_args = function(args) {
  this.ctx = null;
  this.node = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_SetNode_args.prototype = {};
ProjectManager_SetNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_result = function(args) {
};
ProjectManager_SetNode_result.prototype = {};
ProjectManager_SetNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_args = function(args) {
};
ProjectManager_GetToolchains_args.prototype = {};
ProjectManager_GetToolchains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Toolchain]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetToolchains_result.prototype = {};
ProjectManager_GetToolchains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = new ttypes.Toolchain();
          elem33.read(input);
          this.success.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_args = function(args) {
  this.toolchain = null;
  if (args) {
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = new ttypes.Toolchain(args.toolchain);
    }
  }
};
ProjectManager_AddToolchain_args.prototype = {};
ProjectManager_AddToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.toolchain = new ttypes.Toolchain();
        this.toolchain.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_args');
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRUCT, 1);
    this.toolchain.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_AddToolchain_result.prototype = {};
ProjectManager_AddToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_BuildProject_args.prototype = {};
ProjectManager_BuildProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_BuildProject_result.prototype = {};
ProjectManager_BuildProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(ProjectManagerClient, HeartbeatServiceClient);
ProjectManagerClient.prototype.seqid = function() { return this._seqid; };
ProjectManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

ProjectManagerClient.prototype.CreateEwpFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateEwpFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateEwpFile(file_path);
  }
};

ProjectManagerClient.prototype.send_CreateEwpFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_CreateEwpFile_args(params);
  try {
    output.writeMessageBegin('CreateEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CreateEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateEwpFile failed: unknown result');
};

ProjectManagerClient.prototype.LoadEwpFile = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_LoadEwpFile(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_LoadEwpFile(file_path);
  }
};

ProjectManagerClient.prototype.send_LoadEwpFile = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_LoadEwpFile_args(params);
  try {
    output.writeMessageBegin('LoadEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_LoadEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_LoadEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('LoadEwpFile failed: unknown result');
};

ProjectManagerClient.prototype.SaveEwpFile = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveEwpFile(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveEwpFile(project);
  }
};

ProjectManagerClient.prototype.send_SaveEwpFile = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_SaveEwpFile_args(params);
  try {
    output.writeMessageBegin('SaveEwpFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwpFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SaveEwpFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.GetProject = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetProject(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetProject(file_path);
  }
};

ProjectManagerClient.prototype.send_GetProject = function(file_path) {
  var output = new this.pClass(this.output);
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_GetProject_args(params);
  try {
    output.writeMessageBegin('GetProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetProject failed: unknown result');
};

ProjectManagerClient.prototype.CloseProject = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CloseProject(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CloseProject(project);
  }
};

ProjectManagerClient.prototype.send_CloseProject = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_CloseProject_args(params);
  try {
    output.writeMessageBegin('CloseProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CloseProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_CloseProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.AddConfiguration = function(config, project, isDebug, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddConfiguration(config, project, isDebug);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddConfiguration(config, project, isDebug);
  }
};

ProjectManagerClient.prototype.send_AddConfiguration = function(config, project, isDebug) {
  var output = new this.pClass(this.output);
  var params = {
    config: config,
    project: project,
    isDebug: isDebug
  };
  var args = new ProjectManager_AddConfiguration_args(params);
  try {
    output.writeMessageBegin('AddConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.RemoveConfiguration = function(configurationName, project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveConfiguration(configurationName, project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveConfiguration(configurationName, project);
  }
};

ProjectManagerClient.prototype.send_RemoveConfiguration = function(configurationName, project) {
  var output = new this.pClass(this.output);
  var params = {
    configurationName: configurationName,
    project: project
  };
  var args = new ProjectManager_RemoveConfiguration_args(params);
  try {
    output.writeMessageBegin('RemoveConfiguration', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_RemoveConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetConfigurations = function(project, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetConfigurations(project);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetConfigurations(project);
  }
};

ProjectManagerClient.prototype.send_GetConfigurations = function(project) {
  var output = new this.pClass(this.output);
  var params = {
    project: project
  };
  var args = new ProjectManager_GetConfigurations_args(params);
  try {
    output.writeMessageBegin('GetConfigurations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetConfigurations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetConfigurations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetConfigurations failed: unknown result');
};

ProjectManagerClient.prototype.GetRootNode = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetRootNode(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetRootNode(ctx);
  }
};

ProjectManagerClient.prototype.send_GetRootNode = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_GetRootNode_args(params);
  try {
    output.writeMessageBegin('GetRootNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetRootNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetRootNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetRootNode failed: unknown result');
};

ProjectManagerClient.prototype.SetNode = function(ctx, node, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetNode(ctx, node);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetNode(ctx, node);
  }
};

ProjectManagerClient.prototype.send_SetNode = function(ctx, node) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    node: node
  };
  var args = new ProjectManager_SetNode_args(params);
  try {
    output.writeMessageBegin('SetNode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_SetNode_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ProjectManagerClient.prototype.GetToolchains = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetToolchains();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetToolchains();
  }
};

ProjectManagerClient.prototype.send_GetToolchains = function() {
  var output = new this.pClass(this.output);
  var args = new ProjectManager_GetToolchains_args();
  try {
    output.writeMessageBegin('GetToolchains', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolchains = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_GetToolchains_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetToolchains failed: unknown result');
};

ProjectManagerClient.prototype.AddToolchain = function(toolchain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddToolchain(toolchain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddToolchain(toolchain);
  }
};

ProjectManagerClient.prototype.send_AddToolchain = function(toolchain) {
  var output = new this.pClass(this.output);
  var params = {
    toolchain: toolchain
  };
  var args = new ProjectManager_AddToolchain_args(params);
  try {
    output.writeMessageBegin('AddToolchain', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddToolchain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_AddToolchain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

ProjectManagerClient.prototype.BuildProject = function(prj, configurationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BuildProject(prj, configurationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BuildProject(prj, configurationName);
  }
};

ProjectManagerClient.prototype.send_BuildProject = function(prj, configurationName) {
  var output = new this.pClass(this.output);
  var params = {
    prj: prj,
    configurationName: configurationName
  };
  var args = new ProjectManager_BuildProject_args(params);
  try {
    output.writeMessageBegin('BuildProject', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_BuildProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ProjectManager_BuildProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var ProjectManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(ProjectManagerProcessor, HeartbeatServiceProcessor);
ProjectManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ProjectManagerProcessor.prototype.process_CreateEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_CreateEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateEwpFile.length === 1) {
    Q.fcall(this._handler.CreateEwpFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_CreateEwpFile_result({success: result});
      output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CreateEwpFile_result(err);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CreateEwpFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CreateEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_LoadEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_LoadEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.LoadEwpFile.length === 1) {
    Q.fcall(this._handler.LoadEwpFile.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_LoadEwpFile_result({success: result});
      output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_LoadEwpFile_result(err);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.LoadEwpFile(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_LoadEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SaveEwpFile = function(seqid, input, output) {
  var args = new ProjectManager_SaveEwpFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveEwpFile.length === 1) {
    Q.fcall(this._handler.SaveEwpFile.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_SaveEwpFile_result({success: result});
      output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_SaveEwpFile_result(err);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SaveEwpFile(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_SaveEwpFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveEwpFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetProject = function(seqid, input, output) {
  var args = new ProjectManager_GetProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetProject.length === 1) {
    Q.fcall(this._handler.GetProject.bind(this._handler),
      args.file_path
    ).then(function(result) {
      var result_obj = new ProjectManager_GetProject_result({success: result});
      output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetProject_result(err);
        output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetProject(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_CloseProject = function(seqid, input, output) {
  var args = new ProjectManager_CloseProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CloseProject.length === 1) {
    Q.fcall(this._handler.CloseProject.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_CloseProject_result({success: result});
      output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_CloseProject_result(err);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CloseProject(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_CloseProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CloseProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_AddConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddConfiguration.length === 3) {
    Q.fcall(this._handler.AddConfiguration.bind(this._handler),
      args.config,
      args.project,
      args.isDebug
    ).then(function(result) {
      var result_obj = new ProjectManager_AddConfiguration_result({success: result});
      output.writeMessageBegin("AddConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("AddConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddConfiguration(args.config, args.project, args.isDebug, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_AddConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_RemoveConfiguration = function(seqid, input, output) {
  var args = new ProjectManager_RemoveConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveConfiguration.length === 2) {
    Q.fcall(this._handler.RemoveConfiguration.bind(this._handler),
      args.configurationName,
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_RemoveConfiguration_result({success: result});
      output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.RemoveConfiguration(args.configurationName, args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_RemoveConfiguration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetConfigurations = function(seqid, input, output) {
  var args = new ProjectManager_GetConfigurations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetConfigurations.length === 1) {
    Q.fcall(this._handler.GetConfigurations.bind(this._handler),
      args.project
    ).then(function(result) {
      var result_obj = new ProjectManager_GetConfigurations_result({success: result});
      output.writeMessageBegin("GetConfigurations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetConfigurations(args.project, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetConfigurations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetConfigurations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetConfigurations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetRootNode = function(seqid, input, output) {
  var args = new ProjectManager_GetRootNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetRootNode.length === 1) {
    Q.fcall(this._handler.GetRootNode.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ProjectManager_GetRootNode_result({success: result});
      output.writeMessageBegin("GetRootNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetRootNode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetRootNode(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_GetRootNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetRootNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_SetNode = function(seqid, input, output) {
  var args = new ProjectManager_SetNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetNode.length === 2) {
    Q.fcall(this._handler.SetNode.bind(this._handler),
      args.ctx,
      args.node
    ).then(function(result) {
      var result_obj = new ProjectManager_SetNode_result({success: result});
      output.writeMessageBegin("SetNode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetNode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetNode(args.ctx, args.node, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ProjectManager_SetNode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetNode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_GetToolchains = function(seqid, input, output) {
  var args = new ProjectManager_GetToolchains_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetToolchains.length === 0) {
    Q.fcall(this._handler.GetToolchains.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ProjectManager_GetToolchains_result({success: result});
      output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_GetToolchains_result(err);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetToolchains(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_GetToolchains_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetToolchains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_AddToolchain = function(seqid, input, output) {
  var args = new ProjectManager_AddToolchain_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddToolchain.length === 1) {
    Q.fcall(this._handler.AddToolchain.bind(this._handler),
      args.toolchain
    ).then(function(result) {
      var result_obj = new ProjectManager_AddToolchain_result({success: result});
      output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_AddToolchain_result(err);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.AddToolchain(args.toolchain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_AddToolchain_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddToolchain", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ProjectManagerProcessor.prototype.process_BuildProject = function(seqid, input, output) {
  var args = new ProjectManager_BuildProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BuildProject.length === 2) {
    Q.fcall(this._handler.BuildProject.bind(this._handler),
      args.prj,
      args.configurationName
    ).then(function(result) {
      var result_obj = new ProjectManager_BuildProject_result({success: result});
      output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ProjectManagerError) {
        result = new ProjectManager_BuildProject_result(err);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.BuildProject(args.prj, args.configurationName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ProjectManagerError) {
        result_obj = new ProjectManager_BuildProject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BuildProject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BuildProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

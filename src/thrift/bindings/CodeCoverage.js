//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./codecoverage_types');
//HELPER FUNCTIONS AND STRUCTURES

var CodeCoverage_getSessionId_args = function(args) {
};
CodeCoverage_getSessionId_args.prototype = {};
CodeCoverage_getSessionId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_getSessionId_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_getSessionId_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_getSessionId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_getSessionId_result.prototype = {};
CodeCoverage_getSessionId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_getSessionId_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_getSessionId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_enable_args = function(args) {
  this.enable = null;
  if (args) {
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
CodeCoverage_enable_args.prototype = {};
CodeCoverage_enable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_enable_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_enable_args');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_enable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_enable_result.prototype = {};
CodeCoverage_enable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_enable_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_enable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_isEnabled_args = function(args) {
};
CodeCoverage_isEnabled_args.prototype = {};
CodeCoverage_isEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_isEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_isEnabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_isEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_isEnabled_result.prototype = {};
CodeCoverage_isEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_isEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_isEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_hasMetaDataSupport_args = function(args) {
};
CodeCoverage_hasMetaDataSupport_args.prototype = {};
CodeCoverage_hasMetaDataSupport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_hasMetaDataSupport_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_hasMetaDataSupport_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_hasMetaDataSupport_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_hasMetaDataSupport_result.prototype = {};
CodeCoverage_hasMetaDataSupport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_hasMetaDataSupport_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_hasMetaDataSupport_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_clearCachedData_args = function(args) {
};
CodeCoverage_clearCachedData_args.prototype = {};
CodeCoverage_clearCachedData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_clearCachedData_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_clearCachedData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_clearCachedData_result = function(args) {
};
CodeCoverage_clearCachedData_result.prototype = {};
CodeCoverage_clearCachedData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_clearCachedData_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_clearCachedData_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_isInitialized_args = function(args) {
};
CodeCoverage_isInitialized_args.prototype = {};
CodeCoverage_isInitialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_isInitialized_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_isInitialized_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_isInitialized_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_isInitialized_result.prototype = {};
CodeCoverage_isInitialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_isInitialized_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_isInitialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_initializeMetaData_args = function(args) {
};
CodeCoverage_initializeMetaData_args.prototype = {};
CodeCoverage_initializeMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_initializeMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_initializeMetaData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_initializeMetaData_result = function(args) {
};
CodeCoverage_initializeMetaData_result.prototype = {};
CodeCoverage_initializeMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_initializeMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_initializeMetaData_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_reinitMetaData_args = function(args) {
};
CodeCoverage_reinitMetaData_args.prototype = {};
CodeCoverage_reinitMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_reinitMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_reinitMetaData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_reinitMetaData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_reinitMetaData_result.prototype = {};
CodeCoverage_reinitMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_reinitMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_reinitMetaData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_refreshMetaData_args = function(args) {
};
CodeCoverage_refreshMetaData_args.prototype = {};
CodeCoverage_refreshMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_refreshMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_refreshMetaData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_refreshMetaData_result = function(args) {
};
CodeCoverage_refreshMetaData_result.prototype = {};
CodeCoverage_refreshMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_refreshMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_refreshMetaData_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_getXMLData_args = function(args) {
};
CodeCoverage_getXMLData_args.prototype = {};
CodeCoverage_getXMLData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_getXMLData_args.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_getXMLData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverage_getXMLData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CodeCoverage_getXMLData_result.prototype = {};
CodeCoverage_getXMLData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CodeCoverage_getXMLData_result.prototype.write = function(output) {
  output.writeStructBegin('CodeCoverage_getXMLData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CodeCoverageClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(CodeCoverageClient, HeartbeatServiceClient);
CodeCoverageClient.prototype.seqid = function() { return this._seqid; };
CodeCoverageClient.prototype.new_seqid = function() { return this._seqid += 1; };

CodeCoverageClient.prototype.getSessionId = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSessionId();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSessionId();
  }
};

CodeCoverageClient.prototype.send_getSessionId = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_getSessionId_args();
  try {
    output.writeMessageBegin('getSessionId', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_getSessionId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_getSessionId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSessionId failed: unknown result');
};

CodeCoverageClient.prototype.enable = function(enable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enable(enable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enable(enable);
  }
};

CodeCoverageClient.prototype.send_enable = function(enable) {
  var output = new this.pClass(this.output);
  var params = {
    enable: enable
  };
  var args = new CodeCoverage_enable_args(params);
  try {
    output.writeMessageBegin('enable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_enable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_enable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('enable failed: unknown result');
};

CodeCoverageClient.prototype.isEnabled = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isEnabled();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isEnabled();
  }
};

CodeCoverageClient.prototype.send_isEnabled = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_isEnabled_args();
  try {
    output.writeMessageBegin('isEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_isEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_isEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isEnabled failed: unknown result');
};

CodeCoverageClient.prototype.hasMetaDataSupport = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hasMetaDataSupport();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hasMetaDataSupport();
  }
};

CodeCoverageClient.prototype.send_hasMetaDataSupport = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_hasMetaDataSupport_args();
  try {
    output.writeMessageBegin('hasMetaDataSupport', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_hasMetaDataSupport = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_hasMetaDataSupport_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasMetaDataSupport failed: unknown result');
};

CodeCoverageClient.prototype.clearCachedData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clearCachedData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clearCachedData();
  }
};

CodeCoverageClient.prototype.send_clearCachedData = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_clearCachedData_args();
  try {
    output.writeMessageBegin('clearCachedData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_clearCachedData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_clearCachedData_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CodeCoverageClient.prototype.isInitialized = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isInitialized();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isInitialized();
  }
};

CodeCoverageClient.prototype.send_isInitialized = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_isInitialized_args();
  try {
    output.writeMessageBegin('isInitialized', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_isInitialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_isInitialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isInitialized failed: unknown result');
};

CodeCoverageClient.prototype.initializeMetaData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_initializeMetaData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_initializeMetaData();
  }
};

CodeCoverageClient.prototype.send_initializeMetaData = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_initializeMetaData_args();
  try {
    output.writeMessageBegin('initializeMetaData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_initializeMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_initializeMetaData_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CodeCoverageClient.prototype.reinitMetaData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reinitMetaData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reinitMetaData();
  }
};

CodeCoverageClient.prototype.send_reinitMetaData = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_reinitMetaData_args();
  try {
    output.writeMessageBegin('reinitMetaData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_reinitMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_reinitMetaData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reinitMetaData failed: unknown result');
};

CodeCoverageClient.prototype.refreshMetaData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refreshMetaData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refreshMetaData();
  }
};

CodeCoverageClient.prototype.send_refreshMetaData = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_refreshMetaData_args();
  try {
    output.writeMessageBegin('refreshMetaData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_refreshMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_refreshMetaData_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

CodeCoverageClient.prototype.getXMLData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getXMLData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getXMLData();
  }
};

CodeCoverageClient.prototype.send_getXMLData = function() {
  var output = new this.pClass(this.output);
  var args = new CodeCoverage_getXMLData_args();
  try {
    output.writeMessageBegin('getXMLData', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

CodeCoverageClient.prototype.recv_getXMLData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CodeCoverage_getXMLData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getXMLData failed: unknown result');
};
var CodeCoverageProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(CodeCoverageProcessor, HeartbeatServiceProcessor);
CodeCoverageProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
CodeCoverageProcessor.prototype.process_getSessionId = function(seqid, input, output) {
  var args = new CodeCoverage_getSessionId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSessionId.length === 0) {
    Q.fcall(this._handler.getSessionId.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_getSessionId_result({success: result});
      output.writeMessageBegin("getSessionId", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getSessionId", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSessionId(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_getSessionId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSessionId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSessionId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_enable = function(seqid, input, output) {
  var args = new CodeCoverage_enable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enable.length === 1) {
    Q.fcall(this._handler.enable.bind(this._handler),
      args.enable
    ).then(function(result) {
      var result_obj = new CodeCoverage_enable_result({success: result});
      output.writeMessageBegin("enable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("enable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.enable(args.enable, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_enable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_isEnabled = function(seqid, input, output) {
  var args = new CodeCoverage_isEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isEnabled.length === 0) {
    Q.fcall(this._handler.isEnabled.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_isEnabled_result({success: result});
      output.writeMessageBegin("isEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isEnabled(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_isEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_hasMetaDataSupport = function(seqid, input, output) {
  var args = new CodeCoverage_hasMetaDataSupport_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hasMetaDataSupport.length === 0) {
    Q.fcall(this._handler.hasMetaDataSupport.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_hasMetaDataSupport_result({success: result});
      output.writeMessageBegin("hasMetaDataSupport", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("hasMetaDataSupport", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.hasMetaDataSupport(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_hasMetaDataSupport_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("hasMetaDataSupport", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasMetaDataSupport", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_clearCachedData = function(seqid, input, output) {
  var args = new CodeCoverage_clearCachedData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clearCachedData.length === 0) {
    Q.fcall(this._handler.clearCachedData.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_clearCachedData_result({success: result});
      output.writeMessageBegin("clearCachedData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("clearCachedData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clearCachedData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_clearCachedData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clearCachedData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clearCachedData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_isInitialized = function(seqid, input, output) {
  var args = new CodeCoverage_isInitialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isInitialized.length === 0) {
    Q.fcall(this._handler.isInitialized.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_isInitialized_result({success: result});
      output.writeMessageBegin("isInitialized", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isInitialized", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isInitialized(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_isInitialized_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isInitialized", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isInitialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_initializeMetaData = function(seqid, input, output) {
  var args = new CodeCoverage_initializeMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.initializeMetaData.length === 0) {
    Q.fcall(this._handler.initializeMetaData.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_initializeMetaData_result({success: result});
      output.writeMessageBegin("initializeMetaData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("initializeMetaData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.initializeMetaData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_initializeMetaData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("initializeMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("initializeMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_reinitMetaData = function(seqid, input, output) {
  var args = new CodeCoverage_reinitMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reinitMetaData.length === 0) {
    Q.fcall(this._handler.reinitMetaData.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_reinitMetaData_result({success: result});
      output.writeMessageBegin("reinitMetaData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("reinitMetaData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.reinitMetaData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_reinitMetaData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reinitMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reinitMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_refreshMetaData = function(seqid, input, output) {
  var args = new CodeCoverage_refreshMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refreshMetaData.length === 0) {
    Q.fcall(this._handler.refreshMetaData.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_refreshMetaData_result({success: result});
      output.writeMessageBegin("refreshMetaData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("refreshMetaData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.refreshMetaData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_refreshMetaData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("refreshMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refreshMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CodeCoverageProcessor.prototype.process_getXMLData = function(seqid, input, output) {
  var args = new CodeCoverage_getXMLData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getXMLData.length === 0) {
    Q.fcall(this._handler.getXMLData.bind(this._handler)
    ).then(function(result) {
      var result_obj = new CodeCoverage_getXMLData_result({success: result});
      output.writeMessageBegin("getXMLData", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getXMLData", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getXMLData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CodeCoverage_getXMLData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getXMLData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getXMLData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

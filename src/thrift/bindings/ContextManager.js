//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./cspy_types');
//HELPER FUNCTIONS AND STRUCTURES

var ContextManager_setInspectionContext_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_setInspectionContext_args.prototype = {};
ContextManager_setInspectionContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setInspectionContext_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setInspectionContext_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setInspectionContext_result = function(args) {
};
ContextManager_setInspectionContext_result.prototype = {};
ContextManager_setInspectionContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setInspectionContext_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setInspectionContext_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_findContext_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_findContext_args.prototype = {};
ContextManager_findContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_findContext_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_findContext_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_findContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ContextRef(args.success);
    }
  }
};
ContextManager_findContext_result.prototype = {};
ContextManager_findContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ContextRef();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_findContext_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_findContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStack_args = function(args) {
  this.context = null;
  this.low = null;
  this.high = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
    if (args.low !== undefined && args.low !== null) {
      this.low = args.low;
    }
    if (args.high !== undefined && args.high !== null) {
      this.high = args.high;
    }
  }
};
ContextManager_getStack_args.prototype = {};
ContextManager_getStack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.low = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.high = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStack_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStack_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.low !== null && this.low !== undefined) {
    output.writeFieldBegin('low', Thrift.Type.I32, 2);
    output.writeI32(this.low);
    output.writeFieldEnd();
  }
  if (this.high !== null && this.high !== undefined) {
    output.writeFieldBegin('high', Thrift.Type.I32, 3);
    output.writeI32(this.high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStack_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.ContextInfo]);
    }
  }
};
ContextManager_getStack_result.prototype = {};
ContextManager_getStack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = new shared_ttypes.ContextInfo();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStack_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success) {
      if (this.success.hasOwnProperty(iter119)) {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStackDepth_args = function(args) {
  this.context = null;
  this.maxDepth = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
    if (args.maxDepth !== undefined && args.maxDepth !== null) {
      this.maxDepth = args.maxDepth;
    }
  }
};
ContextManager_getStackDepth_args.prototype = {};
ContextManager_getStackDepth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxDepth = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStackDepth_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStackDepth_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.maxDepth !== null && this.maxDepth !== undefined) {
    output.writeFieldBegin('maxDepth', Thrift.Type.I32, 2);
    output.writeI32(this.maxDepth);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStackDepth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_getStackDepth_result.prototype = {};
ContextManager_getStackDepth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStackDepth_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStackDepth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getContextInfo_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_getContextInfo_args.prototype = {};
ContextManager_getContextInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getContextInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getContextInfo_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getContextInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ContextInfo(args.success);
    }
  }
};
ContextManager_getContextInfo_result.prototype = {};
ContextManager_getContextInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ContextInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getContextInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getContextInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_compareContexts_args = function(args) {
  this.ctx1 = null;
  this.ctx2 = null;
  if (args) {
    if (args.ctx1 !== undefined && args.ctx1 !== null) {
      this.ctx1 = new shared_ttypes.ContextRef(args.ctx1);
    }
    if (args.ctx2 !== undefined && args.ctx2 !== null) {
      this.ctx2 = new shared_ttypes.ContextRef(args.ctx2);
    }
  }
};
ContextManager_compareContexts_args.prototype = {};
ContextManager_compareContexts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx1 = new shared_ttypes.ContextRef();
        this.ctx1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx2 = new shared_ttypes.ContextRef();
        this.ctx2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_compareContexts_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_compareContexts_args');
  if (this.ctx1 !== null && this.ctx1 !== undefined) {
    output.writeFieldBegin('ctx1', Thrift.Type.STRUCT, 1);
    this.ctx1.write(output);
    output.writeFieldEnd();
  }
  if (this.ctx2 !== null && this.ctx2 !== undefined) {
    output.writeFieldBegin('ctx2', Thrift.Type.STRUCT, 2);
    this.ctx2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_compareContexts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_compareContexts_result.prototype = {};
ContextManager_compareContexts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_compareContexts_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_compareContexts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getLocals_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_getLocals_args.prototype = {};
ContextManager_getLocals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getLocals_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getLocals_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getLocals_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Symbol]);
    }
  }
};
ContextManager_getLocals_result.prototype = {};
ContextManager_getLocals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3121 = input.readListBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var elem123 = null;
          elem123 = new shared_ttypes.Symbol();
          elem123.read(input);
          this.success.push(elem123);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getLocals_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getLocals_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter124 in this.success) {
      if (this.success.hasOwnProperty(iter124)) {
        iter124 = this.success[iter124];
        iter124.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getParameters_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_getParameters_args.prototype = {};
ContextManager_getParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getParameters_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getParameters_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getParameters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Symbol]);
    }
  }
};
ContextManager_getParameters_result.prototype = {};
ContextManager_getParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3126 = input.readListBegin();
        var _size125 = _rtmp3126.size || 0;
        for (var _i127 = 0; _i127 < _size125; ++_i127) {
          var elem128 = null;
          elem128 = new shared_ttypes.Symbol();
          elem128.read(input);
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getParameters_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter129 in this.success) {
      if (this.success.hasOwnProperty(iter129)) {
        iter129 = this.success[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_isExecuting_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_isExecuting_args.prototype = {};
ContextManager_isExecuting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_isExecuting_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_isExecuting_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_isExecuting_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_isExecuting_result.prototype = {};
ContextManager_isExecuting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_isExecuting_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_isExecuting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setExecLocation_args = function(args) {
  this.ctx = null;
  this.ule = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
  }
};
ContextManager_setExecLocation_args.prototype = {};
ContextManager_setExecLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setExecLocation_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setExecLocation_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 2);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setExecLocation_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ContextManager_setExecLocation_result.prototype = {};
ContextManager_setExecLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setExecLocation_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setExecLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManagerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(ContextManagerClient, HeartbeatServiceClient);
ContextManagerClient.prototype.seqid = function() { return this._seqid; };
ContextManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };

ContextManagerClient.prototype.setInspectionContext = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setInspectionContext(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setInspectionContext(context);
  }
};

ContextManagerClient.prototype.send_setInspectionContext = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new ContextManager_setInspectionContext_args(params);
  try {
    output.writeMessageBegin('setInspectionContext', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_setInspectionContext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_setInspectionContext_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ContextManagerClient.prototype.findContext = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContext(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContext(context);
  }
};

ContextManagerClient.prototype.send_findContext = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new ContextManager_findContext_args(params);
  try {
    output.writeMessageBegin('findContext', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_findContext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_findContext_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContext failed: unknown result');
};

ContextManagerClient.prototype.getStack = function(context, low, high, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStack(context, low, high);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStack(context, low, high);
  }
};

ContextManagerClient.prototype.send_getStack = function(context, low, high) {
  var output = new this.pClass(this.output);
  var params = {
    context: context,
    low: low,
    high: high
  };
  var args = new ContextManager_getStack_args(params);
  try {
    output.writeMessageBegin('getStack', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getStack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_getStack_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStack failed: unknown result');
};

ContextManagerClient.prototype.getStackDepth = function(context, maxDepth, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStackDepth(context, maxDepth);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStackDepth(context, maxDepth);
  }
};

ContextManagerClient.prototype.send_getStackDepth = function(context, maxDepth) {
  var output = new this.pClass(this.output);
  var params = {
    context: context,
    maxDepth: maxDepth
  };
  var args = new ContextManager_getStackDepth_args(params);
  try {
    output.writeMessageBegin('getStackDepth', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getStackDepth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_getStackDepth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStackDepth failed: unknown result');
};

ContextManagerClient.prototype.getContextInfo = function(context, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContextInfo(context);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContextInfo(context);
  }
};

ContextManagerClient.prototype.send_getContextInfo = function(context) {
  var output = new this.pClass(this.output);
  var params = {
    context: context
  };
  var args = new ContextManager_getContextInfo_args(params);
  try {
    output.writeMessageBegin('getContextInfo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getContextInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_getContextInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContextInfo failed: unknown result');
};

ContextManagerClient.prototype.compareContexts = function(ctx1, ctx2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compareContexts(ctx1, ctx2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compareContexts(ctx1, ctx2);
  }
};

ContextManagerClient.prototype.send_compareContexts = function(ctx1, ctx2) {
  var output = new this.pClass(this.output);
  var params = {
    ctx1: ctx1,
    ctx2: ctx2
  };
  var args = new ContextManager_compareContexts_args(params);
  try {
    output.writeMessageBegin('compareContexts', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_compareContexts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_compareContexts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('compareContexts failed: unknown result');
};

ContextManagerClient.prototype.getLocals = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLocals(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLocals(ctx);
  }
};

ContextManagerClient.prototype.send_getLocals = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_getLocals_args(params);
  try {
    output.writeMessageBegin('getLocals', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getLocals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_getLocals_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLocals failed: unknown result');
};

ContextManagerClient.prototype.getParameters = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getParameters(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getParameters(ctx);
  }
};

ContextManagerClient.prototype.send_getParameters = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_getParameters_args(params);
  try {
    output.writeMessageBegin('getParameters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getParameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_getParameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getParameters failed: unknown result');
};

ContextManagerClient.prototype.isExecuting = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isExecuting(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isExecuting(ctx);
  }
};

ContextManagerClient.prototype.send_isExecuting = function(ctx) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_isExecuting_args(params);
  try {
    output.writeMessageBegin('isExecuting', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_isExecuting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_isExecuting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isExecuting failed: unknown result');
};

ContextManagerClient.prototype.setExecLocation = function(ctx, ule, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setExecLocation(ctx, ule);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setExecLocation(ctx, ule);
  }
};

ContextManagerClient.prototype.send_setExecLocation = function(ctx, ule) {
  var output = new this.pClass(this.output);
  var params = {
    ctx: ctx,
    ule: ule
  };
  var args = new ContextManager_setExecLocation_args(params);
  try {
    output.writeMessageBegin('setExecLocation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_setExecLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContextManager_setExecLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
var ContextManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(ContextManagerProcessor, HeartbeatServiceProcessor);
ContextManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ContextManagerProcessor.prototype.process_setInspectionContext = function(seqid, input, output) {
  var args = new ContextManager_setInspectionContext_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setInspectionContext.length === 1) {
    Q.fcall(this._handler.setInspectionContext.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new ContextManager_setInspectionContext_result({success: result});
      output.writeMessageBegin("setInspectionContext", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setInspectionContext", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setInspectionContext(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_setInspectionContext_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setInspectionContext", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setInspectionContext", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_findContext = function(seqid, input, output) {
  var args = new ContextManager_findContext_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContext.length === 1) {
    Q.fcall(this._handler.findContext.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new ContextManager_findContext_result({success: result});
      output.writeMessageBegin("findContext", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("findContext", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findContext(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_findContext_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findContext", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContext", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_getStack = function(seqid, input, output) {
  var args = new ContextManager_getStack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStack.length === 3) {
    Q.fcall(this._handler.getStack.bind(this._handler),
      args.context,
      args.low,
      args.high
    ).then(function(result) {
      var result_obj = new ContextManager_getStack_result({success: result});
      output.writeMessageBegin("getStack", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getStack", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStack(args.context, args.low, args.high, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_getStack_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStack", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_getStackDepth = function(seqid, input, output) {
  var args = new ContextManager_getStackDepth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStackDepth.length === 2) {
    Q.fcall(this._handler.getStackDepth.bind(this._handler),
      args.context,
      args.maxDepth
    ).then(function(result) {
      var result_obj = new ContextManager_getStackDepth_result({success: result});
      output.writeMessageBegin("getStackDepth", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getStackDepth", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getStackDepth(args.context, args.maxDepth, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_getStackDepth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStackDepth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStackDepth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_getContextInfo = function(seqid, input, output) {
  var args = new ContextManager_getContextInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContextInfo.length === 1) {
    Q.fcall(this._handler.getContextInfo.bind(this._handler),
      args.context
    ).then(function(result) {
      var result_obj = new ContextManager_getContextInfo_result({success: result});
      output.writeMessageBegin("getContextInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getContextInfo", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getContextInfo(args.context, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_getContextInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContextInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContextInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_compareContexts = function(seqid, input, output) {
  var args = new ContextManager_compareContexts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compareContexts.length === 2) {
    Q.fcall(this._handler.compareContexts.bind(this._handler),
      args.ctx1,
      args.ctx2
    ).then(function(result) {
      var result_obj = new ContextManager_compareContexts_result({success: result});
      output.writeMessageBegin("compareContexts", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("compareContexts", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.compareContexts(args.ctx1, args.ctx2, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_compareContexts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("compareContexts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compareContexts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_getLocals = function(seqid, input, output) {
  var args = new ContextManager_getLocals_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLocals.length === 1) {
    Q.fcall(this._handler.getLocals.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ContextManager_getLocals_result({success: result});
      output.writeMessageBegin("getLocals", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getLocals", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getLocals(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_getLocals_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLocals", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLocals", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_getParameters = function(seqid, input, output) {
  var args = new ContextManager_getParameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getParameters.length === 1) {
    Q.fcall(this._handler.getParameters.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ContextManager_getParameters_result({success: result});
      output.writeMessageBegin("getParameters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getParameters", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getParameters(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_getParameters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getParameters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getParameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_isExecuting = function(seqid, input, output) {
  var args = new ContextManager_isExecuting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isExecuting.length === 1) {
    Q.fcall(this._handler.isExecuting.bind(this._handler),
      args.ctx
    ).then(function(result) {
      var result_obj = new ContextManager_isExecuting_result({success: result});
      output.writeMessageBegin("isExecuting", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isExecuting", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isExecuting(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContextManager_isExecuting_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isExecuting", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isExecuting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContextManagerProcessor.prototype.process_setExecLocation = function(seqid, input, output) {
  var args = new ContextManager_setExecLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setExecLocation.length === 2) {
    Q.fcall(this._handler.setExecLocation.bind(this._handler),
      args.ctx,
      args.ule
    ).then(function(result) {
      var result_obj = new ContextManager_setExecLocation_result({success: result});
      output.writeMessageBegin("setExecLocation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new ContextManager_setExecLocation_result(err);
        output.writeMessageBegin("setExecLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setExecLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setExecLocation(args.ctx, args.ule, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new ContextManager_setExecLocation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setExecLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setExecLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

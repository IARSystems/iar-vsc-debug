//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');
var cspy_ttypes = require('./cspy_types');
var ServiceRegistry_ttypes = require('./ServiceRegistry_types');


var ttypes = require('./ampsync_types');
//HELPER FUNCTIONS AND STRUCTURES

var SoftCTI_SetSoftCTI_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
SoftCTI_SetSoftCTI_args.prototype = {};
SoftCTI_SetSoftCTI_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_SetSoftCTI_args.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_SetSoftCTI_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_SetSoftCTI_result = function(args) {
};
SoftCTI_SetSoftCTI_result.prototype = {};
SoftCTI_SetSoftCTI_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_SetSoftCTI_result.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_SetSoftCTI_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_GetSoftCTI_args = function(args) {
};
SoftCTI_GetSoftCTI_args.prototype = {};
SoftCTI_GetSoftCTI_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_GetSoftCTI_args.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_GetSoftCTI_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_GetSoftCTI_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SoftCTI_GetSoftCTI_result.prototype = {};
SoftCTI_GetSoftCTI_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_GetSoftCTI_result.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_GetSoftCTI_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_CoreStarting_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
SoftCTI_CoreStarting_args.prototype = {};
SoftCTI_CoreStarting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_CoreStarting_args.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_CoreStarting_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_CoreStarting_result = function(args) {
};
SoftCTI_CoreStarting_result.prototype = {};
SoftCTI_CoreStarting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_CoreStarting_result.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_CoreStarting_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_CoreStopping_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
SoftCTI_CoreStopping_args.prototype = {};
SoftCTI_CoreStopping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_CoreStopping_args.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_CoreStopping_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTI_CoreStopping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SoftCTI_CoreStopping_result.prototype = {};
SoftCTI_CoreStopping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SoftCTI_CoreStopping_result.prototype.write = function(output) {
  output.writeStructBegin('SoftCTI_CoreStopping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SoftCTIClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
SoftCTIClient.prototype = {};
SoftCTIClient.prototype.seqid = function() { return this._seqid; };
SoftCTIClient.prototype.new_seqid = function() { return this._seqid += 1; };

SoftCTIClient.prototype.SetSoftCTI = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetSoftCTI(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetSoftCTI(on);
  }
};

SoftCTIClient.prototype.send_SetSoftCTI = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new SoftCTI_SetSoftCTI_args(params);
  try {
    output.writeMessageBegin('SetSoftCTI', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SoftCTIClient.prototype.recv_SetSoftCTI = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SoftCTI_SetSoftCTI_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

SoftCTIClient.prototype.GetSoftCTI = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetSoftCTI();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetSoftCTI();
  }
};

SoftCTIClient.prototype.send_GetSoftCTI = function() {
  var output = new this.pClass(this.output);
  var args = new SoftCTI_GetSoftCTI_args();
  try {
    output.writeMessageBegin('GetSoftCTI', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SoftCTIClient.prototype.recv_GetSoftCTI = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SoftCTI_GetSoftCTI_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetSoftCTI failed: unknown result');
};

SoftCTIClient.prototype.CoreStarting = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CoreStarting(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CoreStarting(core);
  }
};

SoftCTIClient.prototype.send_CoreStarting = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new SoftCTI_CoreStarting_args(params);
  try {
    output.writeMessageBegin('CoreStarting', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SoftCTIClient.prototype.CoreStopping = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CoreStopping(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CoreStopping(core);
  }
};

SoftCTIClient.prototype.send_CoreStopping = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new SoftCTI_CoreStopping_args(params);
  try {
    output.writeMessageBegin('CoreStopping', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SoftCTIClient.prototype.recv_CoreStopping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SoftCTI_CoreStopping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CoreStopping failed: unknown result');
};
var SoftCTIProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
SoftCTIProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
SoftCTIProcessor.prototype.process_SetSoftCTI = function(seqid, input, output) {
  var args = new SoftCTI_SetSoftCTI_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetSoftCTI.length === 1) {
    Q.fcall(this._handler.SetSoftCTI.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new SoftCTI_SetSoftCTI_result({success: result});
      output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.SetSoftCTI(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SoftCTI_SetSoftCTI_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SoftCTIProcessor.prototype.process_GetSoftCTI = function(seqid, input, output) {
  var args = new SoftCTI_GetSoftCTI_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetSoftCTI.length === 0) {
    Q.fcall(this._handler.GetSoftCTI.bind(this._handler)
    ).then(function(result) {
      var result_obj = new SoftCTI_GetSoftCTI_result({success: result});
      output.writeMessageBegin("GetSoftCTI", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("GetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.GetSoftCTI(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SoftCTI_GetSoftCTI_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetSoftCTI", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetSoftCTI", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
SoftCTIProcessor.prototype.process_CoreStarting = function(seqid, input, output) {
  var args = new SoftCTI_CoreStarting_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.CoreStarting(args.core);
};
SoftCTIProcessor.prototype.process_CoreStopping = function(seqid, input, output) {
  var args = new SoftCTI_CoreStopping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CoreStopping.length === 1) {
    Q.fcall(this._handler.CoreStopping.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new SoftCTI_CoreStopping_result({success: result});
      output.writeMessageBegin("CoreStopping", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("CoreStopping", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.CoreStopping(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SoftCTI_CoreStopping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CoreStopping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CoreStopping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./cspy_types');
//HELPER FUNCTIONS AND STRUCTURES

var Debugger_getVersionString_args = function(args) {
};
Debugger_getVersionString_args.prototype = {};
Debugger_getVersionString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getVersionString_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getVersionString_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getVersionString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Debugger_getVersionString_result.prototype = {};
Debugger_getVersionString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getVersionString_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getVersionString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_startSession_args = function(args) {
  this.sessionConfig = null;
  if (args) {
    if (args.sessionConfig !== undefined && args.sessionConfig !== null) {
      this.sessionConfig = new ttypes.SessionConfiguration(args.sessionConfig);
    }
  }
};
Debugger_startSession_args.prototype = {};
Debugger_startSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConfig = new ttypes.SessionConfiguration();
        this.sessionConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_startSession_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_startSession_args');
  if (this.sessionConfig !== null && this.sessionConfig !== undefined) {
    output.writeFieldBegin('sessionConfig', Thrift.Type.STRUCT, 1);
    this.sessionConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_startSession_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_startSession_result.prototype = {};
Debugger_startSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_startSession_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_startSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stopSession_args = function(args) {
};
Debugger_stopSession_args.prototype = {};
Debugger_stopSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stopSession_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stopSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stopSession_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_stopSession_result.prototype = {};
Debugger_stopSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stopSession_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stopSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getDebugSettings_args = function(args) {
};
Debugger_getDebugSettings_args.prototype = {};
Debugger_getDebugSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getDebugSettings_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getDebugSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getDebugSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DebugSettings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getDebugSettings_result.prototype = {};
Debugger_getDebugSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DebugSettings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getDebugSettings_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getDebugSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setDebugSettings_args = function(args) {
  this.settings = null;
  if (args) {
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.DebugSettings(args.settings);
    }
  }
};
Debugger_setDebugSettings_args.prototype = {};
Debugger_setDebugSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.DebugSettings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setDebugSettings_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setDebugSettings_args');
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 1);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setDebugSettings_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_setDebugSettings_result.prototype = {};
Debugger_setDebugSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setDebugSettings_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setDebugSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_exit_args = function(args) {
};
Debugger_exit_args.prototype = {};
Debugger_exit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_exit_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_exit_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_exit_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_exit_result.prototype = {};
Debugger_exit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_exit_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_exit_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_isOnline_args = function(args) {
};
Debugger_isOnline_args.prototype = {};
Debugger_isOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_isOnline_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_isOnline_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_isOnline_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_isOnline_result.prototype = {};
Debugger_isOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_isOnline_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_isOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadModule_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
Debugger_loadModule_args.prototype = {};
Debugger_loadModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadModule_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadModule_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadModule_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_loadModule_result.prototype = {};
Debugger_loadModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadModule_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadModule_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadModuleWithOptions_args = function(args) {
  this.filename = null;
  this.options = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.ModuleLoadingOptions(args.options);
    }
  }
};
Debugger_loadModuleWithOptions_args.prototype = {};
Debugger_loadModuleWithOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.ModuleLoadingOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadModuleWithOptions_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadModuleWithOptions_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 2);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadModuleWithOptions_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_loadModuleWithOptions_result.prototype = {};
Debugger_loadModuleWithOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadModuleWithOptions_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadModuleWithOptions_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_flashModule_args = function(args) {
  this.boardFile = null;
  this.executable = null;
  this.arguments = null;
  this.extraExecutables = null;
  if (args) {
    if (args.boardFile !== undefined && args.boardFile !== null) {
      this.boardFile = args.boardFile;
    }
    if (args.executable !== undefined && args.executable !== null) {
      this.executable = args.executable;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [null]);
    }
    if (args.extraExecutables !== undefined && args.extraExecutables !== null) {
      this.extraExecutables = Thrift.copyList(args.extraExecutables, [null]);
    }
  }
};
Debugger_flashModule_args.prototype = {};
Debugger_flashModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.boardFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.executable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString();
          this.arguments.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.extraExecutables = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = input.readString();
          this.extraExecutables.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_flashModule_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_flashModule_args');
  if (this.boardFile !== null && this.boardFile !== undefined) {
    output.writeFieldBegin('boardFile', Thrift.Type.STRING, 1);
    output.writeString(this.boardFile);
    output.writeFieldEnd();
  }
  if (this.executable !== null && this.executable !== undefined) {
    output.writeFieldBegin('executable', Thrift.Type.STRING, 2);
    output.writeString(this.executable);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.arguments.length);
    for (var iter38 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter38)) {
        iter38 = this.arguments[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraExecutables !== null && this.extraExecutables !== undefined) {
    output.writeFieldBegin('extraExecutables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.extraExecutables.length);
    for (var iter39 in this.extraExecutables) {
      if (this.extraExecutables.hasOwnProperty(iter39)) {
        iter39 = this.extraExecutables[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_flashModule_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_flashModule_result.prototype = {};
Debugger_flashModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_flashModule_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_flashModule_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getFlashPasses_args = function(args) {
  this.boardFile = null;
  if (args) {
    if (args.boardFile !== undefined && args.boardFile !== null) {
      this.boardFile = args.boardFile;
    }
  }
};
Debugger_getFlashPasses_args.prototype = {};
Debugger_getFlashPasses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.boardFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getFlashPasses_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getFlashPasses_args');
  if (this.boardFile !== null && this.boardFile !== undefined) {
    output.writeFieldBegin('boardFile', Thrift.Type.STRING, 1);
    output.writeString(this.boardFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getFlashPasses_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Thrift.copyList, null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getFlashPasses_result.prototype = {};
Debugger_getFlashPasses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = [];
          var _rtmp345 = input.readListBegin();
          var _size44 = _rtmp345.size || 0;
          for (var _i46 = 0; _i46 < _size44; ++_i46) {
            var elem47 = null;
            elem47 = input.readString();
            elem43.push(elem47);
          }
          input.readListEnd();
          this.success.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getFlashPasses_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getFlashPasses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter48 in this.success) {
      if (this.success.hasOwnProperty(iter48)) {
        iter48 = this.success[iter48];
        output.writeListBegin(Thrift.Type.STRING, iter48.length);
        for (var iter49 in iter48) {
          if (iter48.hasOwnProperty(iter49)) {
            iter49 = iter48[iter49];
            output.writeString(iter49);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_eraseFlash_args = function(args) {
  this.boardFile = null;
  this.nPasses = null;
  if (args) {
    if (args.boardFile !== undefined && args.boardFile !== null) {
      this.boardFile = args.boardFile;
    }
    if (args.nPasses !== undefined && args.nPasses !== null) {
      this.nPasses = Thrift.copyList(args.nPasses, [null]);
    }
  }
};
Debugger_eraseFlash_args.prototype = {};
Debugger_eraseFlash_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.boardFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nPasses = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = input.readBool();
          this.nPasses.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_eraseFlash_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_eraseFlash_args');
  if (this.boardFile !== null && this.boardFile !== undefined) {
    output.writeFieldBegin('boardFile', Thrift.Type.STRING, 1);
    output.writeString(this.boardFile);
    output.writeFieldEnd();
  }
  if (this.nPasses !== null && this.nPasses !== undefined) {
    output.writeFieldBegin('nPasses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.BOOL, this.nPasses.length);
    for (var iter54 in this.nPasses) {
      if (this.nPasses.hasOwnProperty(iter54)) {
        iter54 = this.nPasses[iter54];
        output.writeBool(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_eraseFlash_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_eraseFlash_result.prototype = {};
Debugger_eraseFlash_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_eraseFlash_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_eraseFlash_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getModules_args = function(args) {
};
Debugger_getModules_args.prototype = {};
Debugger_getModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getModules_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getModules_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getModules_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ModuleData]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getModules_result.prototype = {};
Debugger_getModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = new ttypes.ModuleData();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getModules_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getModules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success) {
      if (this.success.hasOwnProperty(iter59)) {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadMacroFile_args = function(args) {
  this.macro = null;
  if (args) {
    if (args.macro !== undefined && args.macro !== null) {
      this.macro = args.macro;
    }
  }
};
Debugger_loadMacroFile_args.prototype = {};
Debugger_loadMacroFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.macro = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadMacroFile_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadMacroFile_args');
  if (this.macro !== null && this.macro !== undefined) {
    output.writeFieldBegin('macro', Thrift.Type.STRING, 1);
    output.writeString(this.macro);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_loadMacroFile_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_loadMacroFile_result.prototype = {};
Debugger_loadMacroFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_loadMacroFile_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_loadMacroFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_unloadMacroFile_args = function(args) {
  this.macro = null;
  if (args) {
    if (args.macro !== undefined && args.macro !== null) {
      this.macro = args.macro;
    }
  }
};
Debugger_unloadMacroFile_args.prototype = {};
Debugger_unloadMacroFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.macro = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_unloadMacroFile_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_unloadMacroFile_args');
  if (this.macro !== null && this.macro !== undefined) {
    output.writeFieldBegin('macro', Thrift.Type.STRING, 1);
    output.writeString(this.macro);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_unloadMacroFile_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_unloadMacroFile_result.prototype = {};
Debugger_unloadMacroFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_unloadMacroFile_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_unloadMacroFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_runToULE_args = function(args) {
  this.ule = null;
  this.allowSingleStep = null;
  if (args) {
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
    if (args.allowSingleStep !== undefined && args.allowSingleStep !== null) {
      this.allowSingleStep = args.allowSingleStep;
    }
  }
};
Debugger_runToULE_args.prototype = {};
Debugger_runToULE_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSingleStep = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_runToULE_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_runToULE_args');
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 1);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  if (this.allowSingleStep !== null && this.allowSingleStep !== undefined) {
    output.writeFieldBegin('allowSingleStep', Thrift.Type.BOOL, 2);
    output.writeBool(this.allowSingleStep);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_runToULE_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_runToULE_result.prototype = {};
Debugger_runToULE_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_runToULE_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_runToULE_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getMulticoreFlags_args = function(args) {
};
Debugger_getMulticoreFlags_args.prototype = {};
Debugger_getMulticoreFlags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getMulticoreFlags_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getMulticoreFlags_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getMulticoreFlags_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getMulticoreFlags_result.prototype = {};
Debugger_getMulticoreFlags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getMulticoreFlags_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getMulticoreFlags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getThreadList_args = function(args) {
};
Debugger_getThreadList_args.prototype = {};
Debugger_getThreadList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getThreadList_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getThreadList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getThreadList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Thread]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getThreadList_result.prototype = {};
Debugger_getThreadList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = new ttypes.Thread();
          elem63.read(input);
          this.success.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getThreadList_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getThreadList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter64 in this.success) {
      if (this.success.hasOwnProperty(iter64)) {
        iter64 = this.success[iter64];
        iter64.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_isActiveThread_args = function(args) {
  this.t = null;
  if (args) {
    if (args.t !== undefined && args.t !== null) {
      this.t = new ttypes.Thread(args.t);
    }
  }
};
Debugger_isActiveThread_args.prototype = {};
Debugger_isActiveThread_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.t = new ttypes.Thread();
        this.t.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_isActiveThread_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_isActiveThread_args');
  if (this.t !== null && this.t !== undefined) {
    output.writeFieldBegin('t', Thrift.Type.STRUCT, 1);
    this.t.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_isActiveThread_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_isActiveThread_result.prototype = {};
Debugger_isActiveThread_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_isActiveThread_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_isActiveThread_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_evalExpression_args = function(args) {
  this.ref = null;
  this.expr = null;
  this.subExprIndex = null;
  this.format = null;
  this.prefix = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new shared_ttypes.ContextRef(args.ref);
    }
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    }
    if (args.subExprIndex !== undefined && args.subExprIndex !== null) {
      this.subExprIndex = Thrift.copyList(args.subExprIndex, [null]);
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
  }
};
Debugger_evalExpression_args.prototype = {};
Debugger_evalExpression_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new shared_ttypes.ContextRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.subExprIndex = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readI32();
          this.subExprIndex.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.prefix = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_evalExpression_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_evalExpression_args');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 2);
    output.writeString(this.expr);
    output.writeFieldEnd();
  }
  if (this.subExprIndex !== null && this.subExprIndex !== undefined) {
    output.writeFieldBegin('subExprIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.subExprIndex.length);
    for (var iter69 in this.subExprIndex) {
      if (this.subExprIndex.hasOwnProperty(iter69)) {
        iter69 = this.subExprIndex[iter69];
        output.writeI32(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 4);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.BOOL, 5);
    output.writeBool(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_evalExpression_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExprValue(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_evalExpression_result.prototype = {};
Debugger_evalExpression_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExprValue();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_evalExpression_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_evalExpression_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_assignExpression_args = function(args) {
  this.ref = null;
  this.expr = null;
  this.subExprIndex = null;
  this.rvalue = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new shared_ttypes.ContextRef(args.ref);
    }
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    }
    if (args.subExprIndex !== undefined && args.subExprIndex !== null) {
      this.subExprIndex = Thrift.copyList(args.subExprIndex, [null]);
    }
    if (args.rvalue !== undefined && args.rvalue !== null) {
      this.rvalue = new ttypes.ExprValue(args.rvalue);
    }
  }
};
Debugger_assignExpression_args.prototype = {};
Debugger_assignExpression_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new shared_ttypes.ContextRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.subExprIndex = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = input.readI32();
          this.subExprIndex.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rvalue = new ttypes.ExprValue();
        this.rvalue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_assignExpression_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_assignExpression_args');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 2);
    output.writeString(this.expr);
    output.writeFieldEnd();
  }
  if (this.subExprIndex !== null && this.subExprIndex !== undefined) {
    output.writeFieldBegin('subExprIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.subExprIndex.length);
    for (var iter74 in this.subExprIndex) {
      if (this.subExprIndex.hasOwnProperty(iter74)) {
        iter74 = this.subExprIndex[iter74];
        output.writeI32(iter74);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rvalue !== null && this.rvalue !== undefined) {
    output.writeFieldBegin('rvalue', Thrift.Type.STRUCT, 4);
    this.rvalue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_assignExpression_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_assignExpression_result.prototype = {};
Debugger_assignExpression_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_assignExpression_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_assignExpression_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getSubExpressionLabels_args = function(args) {
  this.ref = null;
  this.rootExpr = null;
  this.subExprIndex = null;
  this.startIndex = null;
  this.length = null;
  this.treatPointerAsArray = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new shared_ttypes.ContextRef(args.ref);
    }
    if (args.rootExpr !== undefined && args.rootExpr !== null) {
      this.rootExpr = args.rootExpr;
    }
    if (args.subExprIndex !== undefined && args.subExprIndex !== null) {
      this.subExprIndex = Thrift.copyList(args.subExprIndex, [null]);
    }
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    }
    if (args.length !== undefined && args.length !== null) {
      this.length = args.length;
    }
    if (args.treatPointerAsArray !== undefined && args.treatPointerAsArray !== null) {
      this.treatPointerAsArray = args.treatPointerAsArray;
    }
  }
};
Debugger_getSubExpressionLabels_args.prototype = {};
Debugger_getSubExpressionLabels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new shared_ttypes.ContextRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rootExpr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.subExprIndex = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = input.readI32();
          this.subExprIndex.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.treatPointerAsArray = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getSubExpressionLabels_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getSubExpressionLabels_args');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.rootExpr !== null && this.rootExpr !== undefined) {
    output.writeFieldBegin('rootExpr', Thrift.Type.STRING, 2);
    output.writeString(this.rootExpr);
    output.writeFieldEnd();
  }
  if (this.subExprIndex !== null && this.subExprIndex !== undefined) {
    output.writeFieldBegin('subExprIndex', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.subExprIndex.length);
    for (var iter79 in this.subExprIndex) {
      if (this.subExprIndex.hasOwnProperty(iter79)) {
        iter79 = this.subExprIndex[iter79];
        output.writeI32(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 4);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I32, 5);
    output.writeI32(this.length);
    output.writeFieldEnd();
  }
  if (this.treatPointerAsArray !== null && this.treatPointerAsArray !== undefined) {
    output.writeFieldBegin('treatPointerAsArray', Thrift.Type.BOOL, 6);
    output.writeBool(this.treatPointerAsArray);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getSubExpressionLabels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getSubExpressionLabels_result.prototype = {};
Debugger_getSubExpressionLabels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = input.readString();
          this.success.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getSubExpressionLabels_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getSubExpressionLabels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter84 in this.success) {
      if (this.success.hasOwnProperty(iter84)) {
        iter84 = this.success[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getLocationNames_args = function(args) {
};
Debugger_getLocationNames_args.prototype = {};
Debugger_getLocationNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getLocationNames_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getLocationNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getLocationNames_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getLocationNames_result.prototype = {};
Debugger_getLocationNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readString();
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getLocationNames_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getLocationNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter89 in this.success) {
      if (this.success.hasOwnProperty(iter89)) {
        iter89 = this.success[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getLocationNamesInGroup_args = function(args) {
  this.group = null;
  if (args) {
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
  }
};
Debugger_getLocationNamesInGroup_args.prototype = {};
Debugger_getLocationNamesInGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getLocationNamesInGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getLocationNamesInGroup_args');
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 1);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getLocationNamesInGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getLocationNamesInGroup_result.prototype = {};
Debugger_getLocationNamesInGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp391 = input.readListBegin();
        var _size90 = _rtmp391.size || 0;
        for (var _i92 = 0; _i92 < _size90; ++_i92) {
          var elem93 = null;
          elem93 = input.readString();
          this.success.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getLocationNamesInGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getLocationNamesInGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter94 in this.success) {
      if (this.success.hasOwnProperty(iter94)) {
        iter94 = this.success[iter94];
        output.writeString(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getRegisterGroups_args = function(args) {
};
Debugger_getRegisterGroups_args.prototype = {};
Debugger_getRegisterGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getRegisterGroups_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getRegisterGroups_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getRegisterGroups_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getRegisterGroups_result.prototype = {};
Debugger_getRegisterGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = input.readString();
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getRegisterGroups_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getRegisterGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter99 in this.success) {
      if (this.success.hasOwnProperty(iter99)) {
        iter99 = this.success[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getNamedLocation_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Debugger_getNamedLocation_args.prototype = {};
Debugger_getNamedLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getNamedLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getNamedLocation_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getNamedLocation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NamedLocation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getNamedLocation_result.prototype = {};
Debugger_getNamedLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NamedLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getNamedLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getNamedLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCoreState_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_getCoreState_args.prototype = {};
Debugger_getCoreState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCoreState_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCoreState_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCoreState_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getCoreState_result.prototype = {};
Debugger_getCoreState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCoreState_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCoreState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getNumberOfCores_args = function(args) {
};
Debugger_getNumberOfCores_args.prototype = {};
Debugger_getNumberOfCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getNumberOfCores_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getNumberOfCores_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getNumberOfCores_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getNumberOfCores_result.prototype = {};
Debugger_getNumberOfCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getNumberOfCores_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getNumberOfCores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCoreDescription_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_getCoreDescription_args.prototype = {};
Debugger_getCoreDescription_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCoreDescription_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCoreDescription_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCoreDescription_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Debugger_getCoreDescription_result.prototype = {};
Debugger_getCoreDescription_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCoreDescription_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCoreDescription_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCycleCounter_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_getCycleCounter_args.prototype = {};
Debugger_getCycleCounter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCycleCounter_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCycleCounter_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCycleCounter_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getCycleCounter_result.prototype = {};
Debugger_getCycleCounter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCycleCounter_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCycleCounter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCyclesPerSecond_args = function(args) {
};
Debugger_getCyclesPerSecond_args.prototype = {};
Debugger_getCyclesPerSecond_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCyclesPerSecond_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCyclesPerSecond_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getCyclesPerSecond_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getCyclesPerSecond_result.prototype = {};
Debugger_getCyclesPerSecond_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getCyclesPerSecond_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getCyclesPerSecond_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_hasCoreStoppedDeliberately_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_hasCoreStoppedDeliberately_args.prototype = {};
Debugger_hasCoreStoppedDeliberately_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_hasCoreStoppedDeliberately_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_hasCoreStoppedDeliberately_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_hasCoreStoppedDeliberately_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_hasCoreStoppedDeliberately_result.prototype = {};
Debugger_hasCoreStoppedDeliberately_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_hasCoreStoppedDeliberately_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_hasCoreStoppedDeliberately_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setResetStyles_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Debugger_setResetStyles_args.prototype = {};
Debugger_setResetStyles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setResetStyles_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setResetStyles_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setResetStyles_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_setResetStyles_result.prototype = {};
Debugger_setResetStyles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setResetStyles_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setResetStyles_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getResetStyles_args = function(args) {
};
Debugger_getResetStyles_args.prototype = {};
Debugger_getResetStyles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getResetStyles_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getResetStyles_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getResetStyles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ResetStyles]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getResetStyles_result.prototype = {};
Debugger_getResetStyles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3101 = input.readListBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var elem103 = null;
          elem103 = new ttypes.ResetStyles();
          elem103.read(input);
          this.success.push(elem103);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getResetStyles_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getResetStyles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter104 in this.success) {
      if (this.success.hasOwnProperty(iter104)) {
        iter104 = this.success[iter104];
        iter104.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_reset_args = function(args) {
};
Debugger_reset_args.prototype = {};
Debugger_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_reset_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_reset_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_reset_result.prototype = {};
Debugger_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_reset_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_reset_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_go_args = function(args) {
};
Debugger_go_args.prototype = {};
Debugger_go_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_go_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_go_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_go_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_go_result.prototype = {};
Debugger_go_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_go_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_go_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goCore_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_goCore_args.prototype = {};
Debugger_goCore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goCore_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goCore_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goCore_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_goCore_result.prototype = {};
Debugger_goCore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goCore_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goCore_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stop_args = function(args) {
};
Debugger_stop_args.prototype = {};
Debugger_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stop_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stop_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_stop_result.prototype = {};
Debugger_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stop_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stopCore_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_stopCore_args.prototype = {};
Debugger_stopCore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stopCore_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stopCore_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stopCore_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_stopCore_result.prototype = {};
Debugger_stopCore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stopCore_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stopCore_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_multiGo_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Debugger_multiGo_args.prototype = {};
Debugger_multiGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_multiGo_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_multiGo_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_multiGo_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_multiGo_result.prototype = {};
Debugger_multiGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_multiGo_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_multiGo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_step_args = function(args) {
  this.enterFunctionsWithoutSource = null;
  if (args) {
    if (args.enterFunctionsWithoutSource !== undefined && args.enterFunctionsWithoutSource !== null) {
      this.enterFunctionsWithoutSource = args.enterFunctionsWithoutSource;
    }
  }
};
Debugger_step_args.prototype = {};
Debugger_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enterFunctionsWithoutSource = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_step_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_step_args');
  if (this.enterFunctionsWithoutSource !== null && this.enterFunctionsWithoutSource !== undefined) {
    output.writeFieldBegin('enterFunctionsWithoutSource', Thrift.Type.BOOL, 1);
    output.writeBool(this.enterFunctionsWithoutSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_step_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_step_result.prototype = {};
Debugger_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_step_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_step_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stepOver_args = function(args) {
  this.enterFunctionsWithoutSource = null;
  if (args) {
    if (args.enterFunctionsWithoutSource !== undefined && args.enterFunctionsWithoutSource !== null) {
      this.enterFunctionsWithoutSource = args.enterFunctionsWithoutSource;
    }
  }
};
Debugger_stepOver_args.prototype = {};
Debugger_stepOver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enterFunctionsWithoutSource = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stepOver_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stepOver_args');
  if (this.enterFunctionsWithoutSource !== null && this.enterFunctionsWithoutSource !== undefined) {
    output.writeFieldBegin('enterFunctionsWithoutSource', Thrift.Type.BOOL, 1);
    output.writeBool(this.enterFunctionsWithoutSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stepOver_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_stepOver_result.prototype = {};
Debugger_stepOver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stepOver_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stepOver_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_nextStatement_args = function(args) {
  this.enterFunctionsWithoutSource = null;
  if (args) {
    if (args.enterFunctionsWithoutSource !== undefined && args.enterFunctionsWithoutSource !== null) {
      this.enterFunctionsWithoutSource = args.enterFunctionsWithoutSource;
    }
  }
};
Debugger_nextStatement_args.prototype = {};
Debugger_nextStatement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enterFunctionsWithoutSource = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_nextStatement_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_nextStatement_args');
  if (this.enterFunctionsWithoutSource !== null && this.enterFunctionsWithoutSource !== undefined) {
    output.writeFieldBegin('enterFunctionsWithoutSource', Thrift.Type.BOOL, 1);
    output.writeBool(this.enterFunctionsWithoutSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_nextStatement_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_nextStatement_result.prototype = {};
Debugger_nextStatement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_nextStatement_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_nextStatement_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stepOut_args = function(args) {
};
Debugger_stepOut_args.prototype = {};
Debugger_stepOut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stepOut_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stepOut_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_stepOut_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_stepOut_result.prototype = {};
Debugger_stepOut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_stepOut_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_stepOut_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_instructionStep_args = function(args) {
};
Debugger_instructionStep_args.prototype = {};
Debugger_instructionStep_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_instructionStep_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_instructionStep_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_instructionStep_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_instructionStep_result.prototype = {};
Debugger_instructionStep_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_instructionStep_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_instructionStep_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_instructionStepOver_args = function(args) {
};
Debugger_instructionStepOver_args.prototype = {};
Debugger_instructionStepOver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_instructionStepOver_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_instructionStepOver_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_instructionStepOver_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_instructionStepOver_result.prototype = {};
Debugger_instructionStepOver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_instructionStepOver_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_instructionStepOver_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goToLocation_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
  }
};
Debugger_goToLocation_args.prototype = {};
Debugger_goToLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goToLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goToLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goToLocation_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_goToLocation_result.prototype = {};
Debugger_goToLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goToLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goToLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goToLocations_args = function(args) {
  this.locations = null;
  if (args) {
    if (args.locations !== undefined && args.locations !== null) {
      this.locations = Thrift.copyList(args.locations, [shared_ttypes.Location]);
    }
  }
};
Debugger_goToLocations_args.prototype = {};
Debugger_goToLocations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.locations = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = new shared_ttypes.Location();
          elem108.read(input);
          this.locations.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goToLocations_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goToLocations_args');
  if (this.locations !== null && this.locations !== undefined) {
    output.writeFieldBegin('locations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.locations.length);
    for (var iter109 in this.locations) {
      if (this.locations.hasOwnProperty(iter109)) {
        iter109 = this.locations[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_goToLocations_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_goToLocations_result.prototype = {};
Debugger_goToLocations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_goToLocations_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_goToLocations_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_supportsExceptions_args = function(args) {
};
Debugger_supportsExceptions_args.prototype = {};
Debugger_supportsExceptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_supportsExceptions_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_supportsExceptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_supportsExceptions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_supportsExceptions_result.prototype = {};
Debugger_supportsExceptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_supportsExceptions_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_supportsExceptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getBreakOnThrow_args = function(args) {
};
Debugger_getBreakOnThrow_args.prototype = {};
Debugger_getBreakOnThrow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getBreakOnThrow_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getBreakOnThrow_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getBreakOnThrow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getBreakOnThrow_result.prototype = {};
Debugger_getBreakOnThrow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getBreakOnThrow_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getBreakOnThrow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setBreakOnThrow_args = function(args) {
  this.enable = null;
  if (args) {
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
Debugger_setBreakOnThrow_args.prototype = {};
Debugger_setBreakOnThrow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setBreakOnThrow_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setBreakOnThrow_args');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setBreakOnThrow_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_setBreakOnThrow_result.prototype = {};
Debugger_setBreakOnThrow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setBreakOnThrow_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setBreakOnThrow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getBreakOnUncaughtException_args = function(args) {
};
Debugger_getBreakOnUncaughtException_args.prototype = {};
Debugger_getBreakOnUncaughtException_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getBreakOnUncaughtException_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getBreakOnUncaughtException_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getBreakOnUncaughtException_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getBreakOnUncaughtException_result.prototype = {};
Debugger_getBreakOnUncaughtException_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getBreakOnUncaughtException_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getBreakOnUncaughtException_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setBreakOnUncaughtException_args = function(args) {
  this.enable = null;
  if (args) {
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
Debugger_setBreakOnUncaughtException_args.prototype = {};
Debugger_setBreakOnUncaughtException_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setBreakOnUncaughtException_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setBreakOnUncaughtException_args');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_setBreakOnUncaughtException_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_setBreakOnUncaughtException_result.prototype = {};
Debugger_setBreakOnUncaughtException_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_setBreakOnUncaughtException_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_setBreakOnUncaughtException_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getZoneByName_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Debugger_getZoneByName_args.prototype = {};
Debugger_getZoneByName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getZoneByName_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getZoneByName_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getZoneByName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ZoneInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getZoneByName_result.prototype = {};
Debugger_getZoneByName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ZoneInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getZoneByName_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getZoneByName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getZoneById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Debugger_getZoneById_args.prototype = {};
Debugger_getZoneById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getZoneById_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getZoneById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getZoneById_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ZoneInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getZoneById_result.prototype = {};
Debugger_getZoneById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ZoneInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getZoneById_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getZoneById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getAllZones_args = function(args) {
};
Debugger_getAllZones_args.prototype = {};
Debugger_getAllZones_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getAllZones_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getAllZones_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getAllZones_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.ZoneInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Debugger_getAllZones_result.prototype = {};
Debugger_getAllZones_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3111 = input.readListBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          var elem113 = null;
          elem113 = new shared_ttypes.ZoneInfo();
          elem113.read(input);
          this.success.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getAllZones_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getAllZones_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter114 in this.success) {
      if (this.success.hasOwnProperty(iter114)) {
        iter114 = this.success[iter114];
        iter114.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getTraceTime_args = function(args) {
};
Debugger_getTraceTime_args.prototype = {};
Debugger_getTraceTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getTraceTime_args.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getTraceTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Debugger_getTraceTime_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Debugger_getTraceTime_result.prototype = {};
Debugger_getTraceTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Debugger_getTraceTime_result.prototype.write = function(output) {
  output.writeStructBegin('Debugger_getTraceTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(DebuggerClient, HeartbeatServiceClient);
DebuggerClient.prototype.seqid = function() { return this._seqid; };
DebuggerClient.prototype.new_seqid = function() { return this._seqid += 1; };

DebuggerClient.prototype.getVersionString = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVersionString();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVersionString();
  }
};

DebuggerClient.prototype.send_getVersionString = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getVersionString_args();
  try {
    output.writeMessageBegin('getVersionString', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getVersionString = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getVersionString_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVersionString failed: unknown result');
};

DebuggerClient.prototype.startSession = function(sessionConfig, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startSession(sessionConfig);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startSession(sessionConfig);
  }
};

DebuggerClient.prototype.send_startSession = function(sessionConfig) {
  var output = new this.pClass(this.output);
  var params = {
    sessionConfig: sessionConfig
  };
  var args = new Debugger_startSession_args(params);
  try {
    output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_startSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_startSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.stopSession = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopSession();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopSession();
  }
};

DebuggerClient.prototype.send_stopSession = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_stopSession_args();
  try {
    output.writeMessageBegin('stopSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_stopSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_stopSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getDebugSettings = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDebugSettings();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDebugSettings();
  }
};

DebuggerClient.prototype.send_getDebugSettings = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getDebugSettings_args();
  try {
    output.writeMessageBegin('getDebugSettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getDebugSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getDebugSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDebugSettings failed: unknown result');
};

DebuggerClient.prototype.setDebugSettings = function(settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setDebugSettings(settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setDebugSettings(settings);
  }
};

DebuggerClient.prototype.send_setDebugSettings = function(settings) {
  var output = new this.pClass(this.output);
  var params = {
    settings: settings
  };
  var args = new Debugger_setDebugSettings_args(params);
  try {
    output.writeMessageBegin('setDebugSettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_setDebugSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_setDebugSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.exit = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exit();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exit();
  }
};

DebuggerClient.prototype.send_exit = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_exit_args();
  try {
    output.writeMessageBegin('exit', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_exit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_exit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.isOnline = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isOnline();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isOnline();
  }
};

DebuggerClient.prototype.send_isOnline = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_isOnline_args();
  try {
    output.writeMessageBegin('isOnline', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_isOnline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_isOnline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isOnline failed: unknown result');
};

DebuggerClient.prototype.loadModule = function(filename, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadModule(filename);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadModule(filename);
  }
};

DebuggerClient.prototype.send_loadModule = function(filename) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename
  };
  var args = new Debugger_loadModule_args(params);
  try {
    output.writeMessageBegin('loadModule', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_loadModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_loadModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.loadModuleWithOptions = function(filename, options, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadModuleWithOptions(filename, options);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadModuleWithOptions(filename, options);
  }
};

DebuggerClient.prototype.send_loadModuleWithOptions = function(filename, options) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename,
    options: options
  };
  var args = new Debugger_loadModuleWithOptions_args(params);
  try {
    output.writeMessageBegin('loadModuleWithOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_loadModuleWithOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_loadModuleWithOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.flashModule = function(boardFile, executable, arguments, extraExecutables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flashModule(boardFile, executable, arguments, extraExecutables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flashModule(boardFile, executable, arguments, extraExecutables);
  }
};

DebuggerClient.prototype.send_flashModule = function(boardFile, executable, arguments, extraExecutables) {
  var output = new this.pClass(this.output);
  var params = {
    boardFile: boardFile,
    executable: executable,
    arguments: arguments,
    extraExecutables: extraExecutables
  };
  var args = new Debugger_flashModule_args(params);
  try {
    output.writeMessageBegin('flashModule', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_flashModule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_flashModule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getFlashPasses = function(boardFile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFlashPasses(boardFile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFlashPasses(boardFile);
  }
};

DebuggerClient.prototype.send_getFlashPasses = function(boardFile) {
  var output = new this.pClass(this.output);
  var params = {
    boardFile: boardFile
  };
  var args = new Debugger_getFlashPasses_args(params);
  try {
    output.writeMessageBegin('getFlashPasses', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getFlashPasses = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getFlashPasses_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlashPasses failed: unknown result');
};

DebuggerClient.prototype.eraseFlash = function(boardFile, nPasses, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_eraseFlash(boardFile, nPasses);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_eraseFlash(boardFile, nPasses);
  }
};

DebuggerClient.prototype.send_eraseFlash = function(boardFile, nPasses) {
  var output = new this.pClass(this.output);
  var params = {
    boardFile: boardFile,
    nPasses: nPasses
  };
  var args = new Debugger_eraseFlash_args(params);
  try {
    output.writeMessageBegin('eraseFlash', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_eraseFlash = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_eraseFlash_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getModules = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModules();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModules();
  }
};

DebuggerClient.prototype.send_getModules = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getModules_args();
  try {
    output.writeMessageBegin('getModules', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getModules = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getModules_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModules failed: unknown result');
};

DebuggerClient.prototype.loadMacroFile = function(macro, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loadMacroFile(macro);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loadMacroFile(macro);
  }
};

DebuggerClient.prototype.send_loadMacroFile = function(macro) {
  var output = new this.pClass(this.output);
  var params = {
    macro: macro
  };
  var args = new Debugger_loadMacroFile_args(params);
  try {
    output.writeMessageBegin('loadMacroFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_loadMacroFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_loadMacroFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.unloadMacroFile = function(macro, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unloadMacroFile(macro);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unloadMacroFile(macro);
  }
};

DebuggerClient.prototype.send_unloadMacroFile = function(macro) {
  var output = new this.pClass(this.output);
  var params = {
    macro: macro
  };
  var args = new Debugger_unloadMacroFile_args(params);
  try {
    output.writeMessageBegin('unloadMacroFile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_unloadMacroFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_unloadMacroFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.runToULE = function(ule, allowSingleStep, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runToULE(ule, allowSingleStep);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runToULE(ule, allowSingleStep);
  }
};

DebuggerClient.prototype.send_runToULE = function(ule, allowSingleStep) {
  var output = new this.pClass(this.output);
  var params = {
    ule: ule,
    allowSingleStep: allowSingleStep
  };
  var args = new Debugger_runToULE_args(params);
  try {
    output.writeMessageBegin('runToULE', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_runToULE = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_runToULE_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getMulticoreFlags = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMulticoreFlags();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMulticoreFlags();
  }
};

DebuggerClient.prototype.send_getMulticoreFlags = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getMulticoreFlags_args();
  try {
    output.writeMessageBegin('getMulticoreFlags', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getMulticoreFlags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getMulticoreFlags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMulticoreFlags failed: unknown result');
};

DebuggerClient.prototype.getThreadList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getThreadList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getThreadList();
  }
};

DebuggerClient.prototype.send_getThreadList = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getThreadList_args();
  try {
    output.writeMessageBegin('getThreadList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getThreadList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getThreadList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getThreadList failed: unknown result');
};

DebuggerClient.prototype.isActiveThread = function(t, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isActiveThread(t);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isActiveThread(t);
  }
};

DebuggerClient.prototype.send_isActiveThread = function(t) {
  var output = new this.pClass(this.output);
  var params = {
    t: t
  };
  var args = new Debugger_isActiveThread_args(params);
  try {
    output.writeMessageBegin('isActiveThread', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_isActiveThread = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_isActiveThread_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isActiveThread failed: unknown result');
};

DebuggerClient.prototype.evalExpression = function(ref, expr, subExprIndex, format, prefix, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_evalExpression(ref, expr, subExprIndex, format, prefix);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_evalExpression(ref, expr, subExprIndex, format, prefix);
  }
};

DebuggerClient.prototype.send_evalExpression = function(ref, expr, subExprIndex, format, prefix) {
  var output = new this.pClass(this.output);
  var params = {
    ref: ref,
    expr: expr,
    subExprIndex: subExprIndex,
    format: format,
    prefix: prefix
  };
  var args = new Debugger_evalExpression_args(params);
  try {
    output.writeMessageBegin('evalExpression', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_evalExpression = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_evalExpression_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('evalExpression failed: unknown result');
};

DebuggerClient.prototype.assignExpression = function(ref, expr, subExprIndex, rvalue, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_assignExpression(ref, expr, subExprIndex, rvalue);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_assignExpression(ref, expr, subExprIndex, rvalue);
  }
};

DebuggerClient.prototype.send_assignExpression = function(ref, expr, subExprIndex, rvalue) {
  var output = new this.pClass(this.output);
  var params = {
    ref: ref,
    expr: expr,
    subExprIndex: subExprIndex,
    rvalue: rvalue
  };
  var args = new Debugger_assignExpression_args(params);
  try {
    output.writeMessageBegin('assignExpression', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_assignExpression = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_assignExpression_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getSubExpressionLabels = function(ref, rootExpr, subExprIndex, startIndex, length, treatPointerAsArray, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubExpressionLabels(ref, rootExpr, subExprIndex, startIndex, length, treatPointerAsArray);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubExpressionLabels(ref, rootExpr, subExprIndex, startIndex, length, treatPointerAsArray);
  }
};

DebuggerClient.prototype.send_getSubExpressionLabels = function(ref, rootExpr, subExprIndex, startIndex, length, treatPointerAsArray) {
  var output = new this.pClass(this.output);
  var params = {
    ref: ref,
    rootExpr: rootExpr,
    subExprIndex: subExprIndex,
    startIndex: startIndex,
    length: length,
    treatPointerAsArray: treatPointerAsArray
  };
  var args = new Debugger_getSubExpressionLabels_args(params);
  try {
    output.writeMessageBegin('getSubExpressionLabels', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getSubExpressionLabels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getSubExpressionLabels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubExpressionLabels failed: unknown result');
};

DebuggerClient.prototype.getLocationNames = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLocationNames();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLocationNames();
  }
};

DebuggerClient.prototype.send_getLocationNames = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getLocationNames_args();
  try {
    output.writeMessageBegin('getLocationNames', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getLocationNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getLocationNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLocationNames failed: unknown result');
};

DebuggerClient.prototype.getLocationNamesInGroup = function(group, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLocationNamesInGroup(group);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLocationNamesInGroup(group);
  }
};

DebuggerClient.prototype.send_getLocationNamesInGroup = function(group) {
  var output = new this.pClass(this.output);
  var params = {
    group: group
  };
  var args = new Debugger_getLocationNamesInGroup_args(params);
  try {
    output.writeMessageBegin('getLocationNamesInGroup', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getLocationNamesInGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getLocationNamesInGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLocationNamesInGroup failed: unknown result');
};

DebuggerClient.prototype.getRegisterGroups = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRegisterGroups();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRegisterGroups();
  }
};

DebuggerClient.prototype.send_getRegisterGroups = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getRegisterGroups_args();
  try {
    output.writeMessageBegin('getRegisterGroups', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getRegisterGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getRegisterGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegisterGroups failed: unknown result');
};

DebuggerClient.prototype.getNamedLocation = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNamedLocation(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNamedLocation(name);
  }
};

DebuggerClient.prototype.send_getNamedLocation = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new Debugger_getNamedLocation_args(params);
  try {
    output.writeMessageBegin('getNamedLocation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getNamedLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getNamedLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNamedLocation failed: unknown result');
};

DebuggerClient.prototype.getCoreState = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoreState(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoreState(core);
  }
};

DebuggerClient.prototype.send_getCoreState = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_getCoreState_args(params);
  try {
    output.writeMessageBegin('getCoreState', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getCoreState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getCoreState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoreState failed: unknown result');
};

DebuggerClient.prototype.getNumberOfCores = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNumberOfCores();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNumberOfCores();
  }
};

DebuggerClient.prototype.send_getNumberOfCores = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getNumberOfCores_args();
  try {
    output.writeMessageBegin('getNumberOfCores', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getNumberOfCores = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getNumberOfCores_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNumberOfCores failed: unknown result');
};

DebuggerClient.prototype.getCoreDescription = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoreDescription(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoreDescription(core);
  }
};

DebuggerClient.prototype.send_getCoreDescription = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_getCoreDescription_args(params);
  try {
    output.writeMessageBegin('getCoreDescription', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getCoreDescription = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getCoreDescription_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoreDescription failed: unknown result');
};

DebuggerClient.prototype.getCycleCounter = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCycleCounter(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCycleCounter(core);
  }
};

DebuggerClient.prototype.send_getCycleCounter = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_getCycleCounter_args(params);
  try {
    output.writeMessageBegin('getCycleCounter', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getCycleCounter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getCycleCounter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCycleCounter failed: unknown result');
};

DebuggerClient.prototype.getCyclesPerSecond = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCyclesPerSecond();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCyclesPerSecond();
  }
};

DebuggerClient.prototype.send_getCyclesPerSecond = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getCyclesPerSecond_args();
  try {
    output.writeMessageBegin('getCyclesPerSecond', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getCyclesPerSecond = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getCyclesPerSecond_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCyclesPerSecond failed: unknown result');
};

DebuggerClient.prototype.hasCoreStoppedDeliberately = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hasCoreStoppedDeliberately(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hasCoreStoppedDeliberately(core);
  }
};

DebuggerClient.prototype.send_hasCoreStoppedDeliberately = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_hasCoreStoppedDeliberately_args(params);
  try {
    output.writeMessageBegin('hasCoreStoppedDeliberately', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_hasCoreStoppedDeliberately = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_hasCoreStoppedDeliberately_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasCoreStoppedDeliberately failed: unknown result');
};

DebuggerClient.prototype.setResetStyles = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setResetStyles(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setResetStyles(id);
  }
};

DebuggerClient.prototype.send_setResetStyles = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Debugger_setResetStyles_args(params);
  try {
    output.writeMessageBegin('setResetStyles', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_setResetStyles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_setResetStyles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getResetStyles = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResetStyles();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResetStyles();
  }
};

DebuggerClient.prototype.send_getResetStyles = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getResetStyles_args();
  try {
    output.writeMessageBegin('getResetStyles', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getResetStyles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getResetStyles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResetStyles failed: unknown result');
};

DebuggerClient.prototype.reset = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reset();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reset();
  }
};

DebuggerClient.prototype.send_reset = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_reset_args();
  try {
    output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_reset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.go = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_go();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_go();
  }
};

DebuggerClient.prototype.send_go = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_go_args();
  try {
    output.writeMessageBegin('go', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_go = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_go_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.goCore = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_goCore(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_goCore(core);
  }
};

DebuggerClient.prototype.send_goCore = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_goCore_args(params);
  try {
    output.writeMessageBegin('goCore', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_goCore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_goCore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.stop = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop();
  }
};

DebuggerClient.prototype.send_stop = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_stop_args();
  try {
    output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.stopCore = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopCore(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopCore(core);
  }
};

DebuggerClient.prototype.send_stopCore = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_stopCore_args(params);
  try {
    output.writeMessageBegin('stopCore', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_stopCore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_stopCore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.multiGo = function(core, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multiGo(core);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multiGo(core);
  }
};

DebuggerClient.prototype.send_multiGo = function(core) {
  var output = new this.pClass(this.output);
  var params = {
    core: core
  };
  var args = new Debugger_multiGo_args(params);
  try {
    output.writeMessageBegin('multiGo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_multiGo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_multiGo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.step = function(enterFunctionsWithoutSource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_step(enterFunctionsWithoutSource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_step(enterFunctionsWithoutSource);
  }
};

DebuggerClient.prototype.send_step = function(enterFunctionsWithoutSource) {
  var output = new this.pClass(this.output);
  var params = {
    enterFunctionsWithoutSource: enterFunctionsWithoutSource
  };
  var args = new Debugger_step_args(params);
  try {
    output.writeMessageBegin('step', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_step = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_step_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.stepOver = function(enterFunctionsWithoutSource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stepOver(enterFunctionsWithoutSource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stepOver(enterFunctionsWithoutSource);
  }
};

DebuggerClient.prototype.send_stepOver = function(enterFunctionsWithoutSource) {
  var output = new this.pClass(this.output);
  var params = {
    enterFunctionsWithoutSource: enterFunctionsWithoutSource
  };
  var args = new Debugger_stepOver_args(params);
  try {
    output.writeMessageBegin('stepOver', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_stepOver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_stepOver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.nextStatement = function(enterFunctionsWithoutSource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_nextStatement(enterFunctionsWithoutSource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_nextStatement(enterFunctionsWithoutSource);
  }
};

DebuggerClient.prototype.send_nextStatement = function(enterFunctionsWithoutSource) {
  var output = new this.pClass(this.output);
  var params = {
    enterFunctionsWithoutSource: enterFunctionsWithoutSource
  };
  var args = new Debugger_nextStatement_args(params);
  try {
    output.writeMessageBegin('nextStatement', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_nextStatement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_nextStatement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.stepOut = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stepOut();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stepOut();
  }
};

DebuggerClient.prototype.send_stepOut = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_stepOut_args();
  try {
    output.writeMessageBegin('stepOut', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_stepOut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_stepOut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.instructionStep = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_instructionStep();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_instructionStep();
  }
};

DebuggerClient.prototype.send_instructionStep = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_instructionStep_args();
  try {
    output.writeMessageBegin('instructionStep', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_instructionStep = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_instructionStep_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.instructionStepOver = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_instructionStepOver();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_instructionStepOver();
  }
};

DebuggerClient.prototype.send_instructionStepOver = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_instructionStepOver_args();
  try {
    output.writeMessageBegin('instructionStepOver', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_instructionStepOver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_instructionStepOver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.goToLocation = function(location, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_goToLocation(location);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_goToLocation(location);
  }
};

DebuggerClient.prototype.send_goToLocation = function(location) {
  var output = new this.pClass(this.output);
  var params = {
    location: location
  };
  var args = new Debugger_goToLocation_args(params);
  try {
    output.writeMessageBegin('goToLocation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_goToLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_goToLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.goToLocations = function(locations, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_goToLocations(locations);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_goToLocations(locations);
  }
};

DebuggerClient.prototype.send_goToLocations = function(locations) {
  var output = new this.pClass(this.output);
  var params = {
    locations: locations
  };
  var args = new Debugger_goToLocations_args(params);
  try {
    output.writeMessageBegin('goToLocations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_goToLocations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_goToLocations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.supportsExceptions = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_supportsExceptions();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_supportsExceptions();
  }
};

DebuggerClient.prototype.send_supportsExceptions = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_supportsExceptions_args();
  try {
    output.writeMessageBegin('supportsExceptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_supportsExceptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_supportsExceptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('supportsExceptions failed: unknown result');
};

DebuggerClient.prototype.getBreakOnThrow = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBreakOnThrow();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBreakOnThrow();
  }
};

DebuggerClient.prototype.send_getBreakOnThrow = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getBreakOnThrow_args();
  try {
    output.writeMessageBegin('getBreakOnThrow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getBreakOnThrow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getBreakOnThrow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBreakOnThrow failed: unknown result');
};

DebuggerClient.prototype.setBreakOnThrow = function(enable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBreakOnThrow(enable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBreakOnThrow(enable);
  }
};

DebuggerClient.prototype.send_setBreakOnThrow = function(enable) {
  var output = new this.pClass(this.output);
  var params = {
    enable: enable
  };
  var args = new Debugger_setBreakOnThrow_args(params);
  try {
    output.writeMessageBegin('setBreakOnThrow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_setBreakOnThrow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_setBreakOnThrow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getBreakOnUncaughtException = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBreakOnUncaughtException();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBreakOnUncaughtException();
  }
};

DebuggerClient.prototype.send_getBreakOnUncaughtException = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getBreakOnUncaughtException_args();
  try {
    output.writeMessageBegin('getBreakOnUncaughtException', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getBreakOnUncaughtException = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getBreakOnUncaughtException_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBreakOnUncaughtException failed: unknown result');
};

DebuggerClient.prototype.setBreakOnUncaughtException = function(enable, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBreakOnUncaughtException(enable);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBreakOnUncaughtException(enable);
  }
};

DebuggerClient.prototype.send_setBreakOnUncaughtException = function(enable) {
  var output = new this.pClass(this.output);
  var params = {
    enable: enable
  };
  var args = new Debugger_setBreakOnUncaughtException_args(params);
  try {
    output.writeMessageBegin('setBreakOnUncaughtException', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_setBreakOnUncaughtException = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_setBreakOnUncaughtException_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

DebuggerClient.prototype.getZoneByName = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getZoneByName(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getZoneByName(name);
  }
};

DebuggerClient.prototype.send_getZoneByName = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new Debugger_getZoneByName_args(params);
  try {
    output.writeMessageBegin('getZoneByName', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getZoneByName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getZoneByName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getZoneByName failed: unknown result');
};

DebuggerClient.prototype.getZoneById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getZoneById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getZoneById(id);
  }
};

DebuggerClient.prototype.send_getZoneById = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Debugger_getZoneById_args(params);
  try {
    output.writeMessageBegin('getZoneById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getZoneById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getZoneById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getZoneById failed: unknown result');
};

DebuggerClient.prototype.getAllZones = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllZones();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllZones();
  }
};

DebuggerClient.prototype.send_getAllZones = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getAllZones_args();
  try {
    output.writeMessageBegin('getAllZones', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getAllZones = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getAllZones_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllZones failed: unknown result');
};

DebuggerClient.prototype.getTraceTime = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTraceTime();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTraceTime();
  }
};

DebuggerClient.prototype.send_getTraceTime = function() {
  var output = new this.pClass(this.output);
  var args = new Debugger_getTraceTime_args();
  try {
    output.writeMessageBegin('getTraceTime', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebuggerClient.prototype.recv_getTraceTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Debugger_getTraceTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTraceTime failed: unknown result');
};
var DebuggerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(DebuggerProcessor, HeartbeatServiceProcessor);
DebuggerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
DebuggerProcessor.prototype.process_getVersionString = function(seqid, input, output) {
  var args = new Debugger_getVersionString_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVersionString.length === 0) {
    Q.fcall(this._handler.getVersionString.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getVersionString_result({success: result});
      output.writeMessageBegin("getVersionString", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getVersionString", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getVersionString(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Debugger_getVersionString_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getVersionString", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVersionString", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_startSession = function(seqid, input, output) {
  var args = new Debugger_startSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startSession.length === 1) {
    Q.fcall(this._handler.startSession.bind(this._handler),
      args.sessionConfig
    ).then(function(result) {
      var result_obj = new Debugger_startSession_result({success: result});
      output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_startSession_result(err);
        output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.startSession(args.sessionConfig, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_startSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_stopSession = function(seqid, input, output) {
  var args = new Debugger_stopSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopSession.length === 0) {
    Q.fcall(this._handler.stopSession.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_stopSession_result({success: result});
      output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_stopSession_result(err);
        output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stopSession(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_stopSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getDebugSettings = function(seqid, input, output) {
  var args = new Debugger_getDebugSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDebugSettings.length === 0) {
    Q.fcall(this._handler.getDebugSettings.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getDebugSettings_result({success: result});
      output.writeMessageBegin("getDebugSettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getDebugSettings_result(err);
        output.writeMessageBegin("getDebugSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDebugSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDebugSettings(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getDebugSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDebugSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDebugSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_setDebugSettings = function(seqid, input, output) {
  var args = new Debugger_setDebugSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setDebugSettings.length === 1) {
    Q.fcall(this._handler.setDebugSettings.bind(this._handler),
      args.settings
    ).then(function(result) {
      var result_obj = new Debugger_setDebugSettings_result({success: result});
      output.writeMessageBegin("setDebugSettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_setDebugSettings_result(err);
        output.writeMessageBegin("setDebugSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setDebugSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setDebugSettings(args.settings, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_setDebugSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setDebugSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setDebugSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_exit = function(seqid, input, output) {
  var args = new Debugger_exit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exit.length === 0) {
    Q.fcall(this._handler.exit.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_exit_result({success: result});
      output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_exit_result(err);
        output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exit(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_exit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_isOnline = function(seqid, input, output) {
  var args = new Debugger_isOnline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isOnline.length === 0) {
    Q.fcall(this._handler.isOnline.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_isOnline_result({success: result});
      output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_isOnline_result(err);
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isOnline(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_isOnline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isOnline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isOnline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_loadModule = function(seqid, input, output) {
  var args = new Debugger_loadModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadModule.length === 1) {
    Q.fcall(this._handler.loadModule.bind(this._handler),
      args.filename
    ).then(function(result) {
      var result_obj = new Debugger_loadModule_result({success: result});
      output.writeMessageBegin("loadModule", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_loadModule_result(err);
        output.writeMessageBegin("loadModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loadModule(args.filename, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_loadModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_loadModuleWithOptions = function(seqid, input, output) {
  var args = new Debugger_loadModuleWithOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadModuleWithOptions.length === 2) {
    Q.fcall(this._handler.loadModuleWithOptions.bind(this._handler),
      args.filename,
      args.options
    ).then(function(result) {
      var result_obj = new Debugger_loadModuleWithOptions_result({success: result});
      output.writeMessageBegin("loadModuleWithOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_loadModuleWithOptions_result(err);
        output.writeMessageBegin("loadModuleWithOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadModuleWithOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loadModuleWithOptions(args.filename, args.options, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_loadModuleWithOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadModuleWithOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadModuleWithOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_flashModule = function(seqid, input, output) {
  var args = new Debugger_flashModule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flashModule.length === 4) {
    Q.fcall(this._handler.flashModule.bind(this._handler),
      args.boardFile,
      args.executable,
      args.arguments,
      args.extraExecutables
    ).then(function(result) {
      var result_obj = new Debugger_flashModule_result({success: result});
      output.writeMessageBegin("flashModule", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_flashModule_result(err);
        output.writeMessageBegin("flashModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flashModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.flashModule(args.boardFile, args.executable, args.arguments, args.extraExecutables, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_flashModule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("flashModule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flashModule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getFlashPasses = function(seqid, input, output) {
  var args = new Debugger_getFlashPasses_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFlashPasses.length === 1) {
    Q.fcall(this._handler.getFlashPasses.bind(this._handler),
      args.boardFile
    ).then(function(result) {
      var result_obj = new Debugger_getFlashPasses_result({success: result});
      output.writeMessageBegin("getFlashPasses", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getFlashPasses_result(err);
        output.writeMessageBegin("getFlashPasses", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFlashPasses", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getFlashPasses(args.boardFile, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getFlashPasses_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFlashPasses", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFlashPasses", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_eraseFlash = function(seqid, input, output) {
  var args = new Debugger_eraseFlash_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.eraseFlash.length === 2) {
    Q.fcall(this._handler.eraseFlash.bind(this._handler),
      args.boardFile,
      args.nPasses
    ).then(function(result) {
      var result_obj = new Debugger_eraseFlash_result({success: result});
      output.writeMessageBegin("eraseFlash", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_eraseFlash_result(err);
        output.writeMessageBegin("eraseFlash", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("eraseFlash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.eraseFlash(args.boardFile, args.nPasses, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_eraseFlash_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("eraseFlash", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("eraseFlash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getModules = function(seqid, input, output) {
  var args = new Debugger_getModules_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModules.length === 0) {
    Q.fcall(this._handler.getModules.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getModules_result({success: result});
      output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getModules_result(err);
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModules", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getModules(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getModules_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getModules", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModules", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_loadMacroFile = function(seqid, input, output) {
  var args = new Debugger_loadMacroFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loadMacroFile.length === 1) {
    Q.fcall(this._handler.loadMacroFile.bind(this._handler),
      args.macro
    ).then(function(result) {
      var result_obj = new Debugger_loadMacroFile_result({success: result});
      output.writeMessageBegin("loadMacroFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_loadMacroFile_result(err);
        output.writeMessageBegin("loadMacroFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadMacroFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.loadMacroFile(args.macro, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_loadMacroFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("loadMacroFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loadMacroFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_unloadMacroFile = function(seqid, input, output) {
  var args = new Debugger_unloadMacroFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unloadMacroFile.length === 1) {
    Q.fcall(this._handler.unloadMacroFile.bind(this._handler),
      args.macro
    ).then(function(result) {
      var result_obj = new Debugger_unloadMacroFile_result({success: result});
      output.writeMessageBegin("unloadMacroFile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_unloadMacroFile_result(err);
        output.writeMessageBegin("unloadMacroFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unloadMacroFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unloadMacroFile(args.macro, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_unloadMacroFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unloadMacroFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unloadMacroFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_runToULE = function(seqid, input, output) {
  var args = new Debugger_runToULE_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runToULE.length === 2) {
    Q.fcall(this._handler.runToULE.bind(this._handler),
      args.ule,
      args.allowSingleStep
    ).then(function(result) {
      var result_obj = new Debugger_runToULE_result({success: result});
      output.writeMessageBegin("runToULE", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_runToULE_result(err);
        output.writeMessageBegin("runToULE", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runToULE", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.runToULE(args.ule, args.allowSingleStep, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_runToULE_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runToULE", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runToULE", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getMulticoreFlags = function(seqid, input, output) {
  var args = new Debugger_getMulticoreFlags_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMulticoreFlags.length === 0) {
    Q.fcall(this._handler.getMulticoreFlags.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getMulticoreFlags_result({success: result});
      output.writeMessageBegin("getMulticoreFlags", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getMulticoreFlags_result(err);
        output.writeMessageBegin("getMulticoreFlags", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMulticoreFlags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getMulticoreFlags(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getMulticoreFlags_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getMulticoreFlags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMulticoreFlags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getThreadList = function(seqid, input, output) {
  var args = new Debugger_getThreadList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getThreadList.length === 0) {
    Q.fcall(this._handler.getThreadList.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getThreadList_result({success: result});
      output.writeMessageBegin("getThreadList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getThreadList_result(err);
        output.writeMessageBegin("getThreadList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getThreadList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getThreadList(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getThreadList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getThreadList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getThreadList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_isActiveThread = function(seqid, input, output) {
  var args = new Debugger_isActiveThread_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isActiveThread.length === 1) {
    Q.fcall(this._handler.isActiveThread.bind(this._handler),
      args.t
    ).then(function(result) {
      var result_obj = new Debugger_isActiveThread_result({success: result});
      output.writeMessageBegin("isActiveThread", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_isActiveThread_result(err);
        output.writeMessageBegin("isActiveThread", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isActiveThread", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isActiveThread(args.t, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_isActiveThread_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isActiveThread", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isActiveThread", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_evalExpression = function(seqid, input, output) {
  var args = new Debugger_evalExpression_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.evalExpression.length === 5) {
    Q.fcall(this._handler.evalExpression.bind(this._handler),
      args.ref,
      args.expr,
      args.subExprIndex,
      args.format,
      args.prefix
    ).then(function(result) {
      var result_obj = new Debugger_evalExpression_result({success: result});
      output.writeMessageBegin("evalExpression", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_evalExpression_result(err);
        output.writeMessageBegin("evalExpression", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evalExpression", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.evalExpression(args.ref, args.expr, args.subExprIndex, args.format, args.prefix, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_evalExpression_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("evalExpression", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("evalExpression", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_assignExpression = function(seqid, input, output) {
  var args = new Debugger_assignExpression_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.assignExpression.length === 4) {
    Q.fcall(this._handler.assignExpression.bind(this._handler),
      args.ref,
      args.expr,
      args.subExprIndex,
      args.rvalue
    ).then(function(result) {
      var result_obj = new Debugger_assignExpression_result({success: result});
      output.writeMessageBegin("assignExpression", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_assignExpression_result(err);
        output.writeMessageBegin("assignExpression", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("assignExpression", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.assignExpression(args.ref, args.expr, args.subExprIndex, args.rvalue, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_assignExpression_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("assignExpression", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("assignExpression", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getSubExpressionLabels = function(seqid, input, output) {
  var args = new Debugger_getSubExpressionLabels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubExpressionLabels.length === 6) {
    Q.fcall(this._handler.getSubExpressionLabels.bind(this._handler),
      args.ref,
      args.rootExpr,
      args.subExprIndex,
      args.startIndex,
      args.length,
      args.treatPointerAsArray
    ).then(function(result) {
      var result_obj = new Debugger_getSubExpressionLabels_result({success: result});
      output.writeMessageBegin("getSubExpressionLabels", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getSubExpressionLabels_result(err);
        output.writeMessageBegin("getSubExpressionLabels", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubExpressionLabels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSubExpressionLabels(args.ref, args.rootExpr, args.subExprIndex, args.startIndex, args.length, args.treatPointerAsArray, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getSubExpressionLabels_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSubExpressionLabels", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSubExpressionLabels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getLocationNames = function(seqid, input, output) {
  var args = new Debugger_getLocationNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLocationNames.length === 0) {
    Q.fcall(this._handler.getLocationNames.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getLocationNames_result({success: result});
      output.writeMessageBegin("getLocationNames", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getLocationNames_result(err);
        output.writeMessageBegin("getLocationNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLocationNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getLocationNames(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getLocationNames_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLocationNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLocationNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getLocationNamesInGroup = function(seqid, input, output) {
  var args = new Debugger_getLocationNamesInGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLocationNamesInGroup.length === 1) {
    Q.fcall(this._handler.getLocationNamesInGroup.bind(this._handler),
      args.group
    ).then(function(result) {
      var result_obj = new Debugger_getLocationNamesInGroup_result({success: result});
      output.writeMessageBegin("getLocationNamesInGroup", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getLocationNamesInGroup_result(err);
        output.writeMessageBegin("getLocationNamesInGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLocationNamesInGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getLocationNamesInGroup(args.group, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getLocationNamesInGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLocationNamesInGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLocationNamesInGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getRegisterGroups = function(seqid, input, output) {
  var args = new Debugger_getRegisterGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRegisterGroups.length === 0) {
    Q.fcall(this._handler.getRegisterGroups.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getRegisterGroups_result({success: result});
      output.writeMessageBegin("getRegisterGroups", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getRegisterGroups_result(err);
        output.writeMessageBegin("getRegisterGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegisterGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRegisterGroups(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getRegisterGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRegisterGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegisterGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getNamedLocation = function(seqid, input, output) {
  var args = new Debugger_getNamedLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNamedLocation.length === 1) {
    Q.fcall(this._handler.getNamedLocation.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new Debugger_getNamedLocation_result({success: result});
      output.writeMessageBegin("getNamedLocation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getNamedLocation_result(err);
        output.writeMessageBegin("getNamedLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNamedLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNamedLocation(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getNamedLocation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNamedLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNamedLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getCoreState = function(seqid, input, output) {
  var args = new Debugger_getCoreState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoreState.length === 1) {
    Q.fcall(this._handler.getCoreState.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_getCoreState_result({success: result});
      output.writeMessageBegin("getCoreState", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getCoreState_result(err);
        output.writeMessageBegin("getCoreState", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoreState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCoreState(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getCoreState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCoreState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoreState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getNumberOfCores = function(seqid, input, output) {
  var args = new Debugger_getNumberOfCores_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNumberOfCores.length === 0) {
    Q.fcall(this._handler.getNumberOfCores.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getNumberOfCores_result({success: result});
      output.writeMessageBegin("getNumberOfCores", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getNumberOfCores_result(err);
        output.writeMessageBegin("getNumberOfCores", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNumberOfCores", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNumberOfCores(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getNumberOfCores_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNumberOfCores", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNumberOfCores", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getCoreDescription = function(seqid, input, output) {
  var args = new Debugger_getCoreDescription_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoreDescription.length === 1) {
    Q.fcall(this._handler.getCoreDescription.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_getCoreDescription_result({success: result});
      output.writeMessageBegin("getCoreDescription", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getCoreDescription", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCoreDescription(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Debugger_getCoreDescription_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCoreDescription", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoreDescription", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getCycleCounter = function(seqid, input, output) {
  var args = new Debugger_getCycleCounter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCycleCounter.length === 1) {
    Q.fcall(this._handler.getCycleCounter.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_getCycleCounter_result({success: result});
      output.writeMessageBegin("getCycleCounter", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getCycleCounter_result(err);
        output.writeMessageBegin("getCycleCounter", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCycleCounter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCycleCounter(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getCycleCounter_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCycleCounter", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCycleCounter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getCyclesPerSecond = function(seqid, input, output) {
  var args = new Debugger_getCyclesPerSecond_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCyclesPerSecond.length === 0) {
    Q.fcall(this._handler.getCyclesPerSecond.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getCyclesPerSecond_result({success: result});
      output.writeMessageBegin("getCyclesPerSecond", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getCyclesPerSecond_result(err);
        output.writeMessageBegin("getCyclesPerSecond", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCyclesPerSecond", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCyclesPerSecond(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getCyclesPerSecond_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCyclesPerSecond", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCyclesPerSecond", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_hasCoreStoppedDeliberately = function(seqid, input, output) {
  var args = new Debugger_hasCoreStoppedDeliberately_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hasCoreStoppedDeliberately.length === 1) {
    Q.fcall(this._handler.hasCoreStoppedDeliberately.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_hasCoreStoppedDeliberately_result({success: result});
      output.writeMessageBegin("hasCoreStoppedDeliberately", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_hasCoreStoppedDeliberately_result(err);
        output.writeMessageBegin("hasCoreStoppedDeliberately", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasCoreStoppedDeliberately", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.hasCoreStoppedDeliberately(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_hasCoreStoppedDeliberately_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("hasCoreStoppedDeliberately", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasCoreStoppedDeliberately", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_setResetStyles = function(seqid, input, output) {
  var args = new Debugger_setResetStyles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setResetStyles.length === 1) {
    Q.fcall(this._handler.setResetStyles.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Debugger_setResetStyles_result({success: result});
      output.writeMessageBegin("setResetStyles", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_setResetStyles_result(err);
        output.writeMessageBegin("setResetStyles", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setResetStyles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setResetStyles(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_setResetStyles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setResetStyles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setResetStyles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getResetStyles = function(seqid, input, output) {
  var args = new Debugger_getResetStyles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getResetStyles.length === 0) {
    Q.fcall(this._handler.getResetStyles.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getResetStyles_result({success: result});
      output.writeMessageBegin("getResetStyles", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getResetStyles_result(err);
        output.writeMessageBegin("getResetStyles", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResetStyles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResetStyles(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getResetStyles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResetStyles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResetStyles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new Debugger_reset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reset.length === 0) {
    Q.fcall(this._handler.reset.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_reset_result({success: result});
      output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_reset_result(err);
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.reset(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_reset_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_go = function(seqid, input, output) {
  var args = new Debugger_go_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.go.length === 0) {
    Q.fcall(this._handler.go.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_go_result({success: result});
      output.writeMessageBegin("go", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_go_result(err);
        output.writeMessageBegin("go", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("go", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.go(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_go_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("go", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("go", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_goCore = function(seqid, input, output) {
  var args = new Debugger_goCore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.goCore.length === 1) {
    Q.fcall(this._handler.goCore.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_goCore_result({success: result});
      output.writeMessageBegin("goCore", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_goCore_result(err);
        output.writeMessageBegin("goCore", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goCore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.goCore(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_goCore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("goCore", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goCore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new Debugger_stop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop.length === 0) {
    Q.fcall(this._handler.stop.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_stop_result({success: result});
      output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_stop_result(err);
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stop(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_stop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_stopCore = function(seqid, input, output) {
  var args = new Debugger_stopCore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopCore.length === 1) {
    Q.fcall(this._handler.stopCore.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_stopCore_result({success: result});
      output.writeMessageBegin("stopCore", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_stopCore_result(err);
        output.writeMessageBegin("stopCore", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopCore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stopCore(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_stopCore_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopCore", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopCore", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_multiGo = function(seqid, input, output) {
  var args = new Debugger_multiGo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multiGo.length === 1) {
    Q.fcall(this._handler.multiGo.bind(this._handler),
      args.core
    ).then(function(result) {
      var result_obj = new Debugger_multiGo_result({success: result});
      output.writeMessageBegin("multiGo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_multiGo_result(err);
        output.writeMessageBegin("multiGo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.multiGo(args.core, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_multiGo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("multiGo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_step = function(seqid, input, output) {
  var args = new Debugger_step_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.step.length === 1) {
    Q.fcall(this._handler.step.bind(this._handler),
      args.enterFunctionsWithoutSource
    ).then(function(result) {
      var result_obj = new Debugger_step_result({success: result});
      output.writeMessageBegin("step", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_step_result(err);
        output.writeMessageBegin("step", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.step(args.enterFunctionsWithoutSource, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_step_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("step", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("step", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_stepOver = function(seqid, input, output) {
  var args = new Debugger_stepOver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stepOver.length === 1) {
    Q.fcall(this._handler.stepOver.bind(this._handler),
      args.enterFunctionsWithoutSource
    ).then(function(result) {
      var result_obj = new Debugger_stepOver_result({success: result});
      output.writeMessageBegin("stepOver", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_stepOver_result(err);
        output.writeMessageBegin("stepOver", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stepOver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stepOver(args.enterFunctionsWithoutSource, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_stepOver_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stepOver", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stepOver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_nextStatement = function(seqid, input, output) {
  var args = new Debugger_nextStatement_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.nextStatement.length === 1) {
    Q.fcall(this._handler.nextStatement.bind(this._handler),
      args.enterFunctionsWithoutSource
    ).then(function(result) {
      var result_obj = new Debugger_nextStatement_result({success: result});
      output.writeMessageBegin("nextStatement", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_nextStatement_result(err);
        output.writeMessageBegin("nextStatement", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("nextStatement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.nextStatement(args.enterFunctionsWithoutSource, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_nextStatement_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("nextStatement", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("nextStatement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_stepOut = function(seqid, input, output) {
  var args = new Debugger_stepOut_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stepOut.length === 0) {
    Q.fcall(this._handler.stepOut.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_stepOut_result({success: result});
      output.writeMessageBegin("stepOut", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_stepOut_result(err);
        output.writeMessageBegin("stepOut", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stepOut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stepOut(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_stepOut_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stepOut", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stepOut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_instructionStep = function(seqid, input, output) {
  var args = new Debugger_instructionStep_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.instructionStep.length === 0) {
    Q.fcall(this._handler.instructionStep.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_instructionStep_result({success: result});
      output.writeMessageBegin("instructionStep", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_instructionStep_result(err);
        output.writeMessageBegin("instructionStep", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("instructionStep", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.instructionStep(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_instructionStep_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("instructionStep", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("instructionStep", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_instructionStepOver = function(seqid, input, output) {
  var args = new Debugger_instructionStepOver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.instructionStepOver.length === 0) {
    Q.fcall(this._handler.instructionStepOver.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_instructionStepOver_result({success: result});
      output.writeMessageBegin("instructionStepOver", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_instructionStepOver_result(err);
        output.writeMessageBegin("instructionStepOver", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("instructionStepOver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.instructionStepOver(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_instructionStepOver_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("instructionStepOver", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("instructionStepOver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_goToLocation = function(seqid, input, output) {
  var args = new Debugger_goToLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.goToLocation.length === 1) {
    Q.fcall(this._handler.goToLocation.bind(this._handler),
      args.location
    ).then(function(result) {
      var result_obj = new Debugger_goToLocation_result({success: result});
      output.writeMessageBegin("goToLocation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_goToLocation_result(err);
        output.writeMessageBegin("goToLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goToLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.goToLocation(args.location, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_goToLocation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("goToLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goToLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_goToLocations = function(seqid, input, output) {
  var args = new Debugger_goToLocations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.goToLocations.length === 1) {
    Q.fcall(this._handler.goToLocations.bind(this._handler),
      args.locations
    ).then(function(result) {
      var result_obj = new Debugger_goToLocations_result({success: result});
      output.writeMessageBegin("goToLocations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_goToLocations_result(err);
        output.writeMessageBegin("goToLocations", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goToLocations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.goToLocations(args.locations, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_goToLocations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("goToLocations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("goToLocations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_supportsExceptions = function(seqid, input, output) {
  var args = new Debugger_supportsExceptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.supportsExceptions.length === 0) {
    Q.fcall(this._handler.supportsExceptions.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_supportsExceptions_result({success: result});
      output.writeMessageBegin("supportsExceptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_supportsExceptions_result(err);
        output.writeMessageBegin("supportsExceptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("supportsExceptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.supportsExceptions(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_supportsExceptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("supportsExceptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("supportsExceptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getBreakOnThrow = function(seqid, input, output) {
  var args = new Debugger_getBreakOnThrow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBreakOnThrow.length === 0) {
    Q.fcall(this._handler.getBreakOnThrow.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getBreakOnThrow_result({success: result});
      output.writeMessageBegin("getBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getBreakOnThrow_result(err);
        output.writeMessageBegin("getBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakOnThrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBreakOnThrow(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getBreakOnThrow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakOnThrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_setBreakOnThrow = function(seqid, input, output) {
  var args = new Debugger_setBreakOnThrow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBreakOnThrow.length === 1) {
    Q.fcall(this._handler.setBreakOnThrow.bind(this._handler),
      args.enable
    ).then(function(result) {
      var result_obj = new Debugger_setBreakOnThrow_result({success: result});
      output.writeMessageBegin("setBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_setBreakOnThrow_result(err);
        output.writeMessageBegin("setBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakOnThrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBreakOnThrow(args.enable, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_setBreakOnThrow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBreakOnThrow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakOnThrow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getBreakOnUncaughtException = function(seqid, input, output) {
  var args = new Debugger_getBreakOnUncaughtException_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBreakOnUncaughtException.length === 0) {
    Q.fcall(this._handler.getBreakOnUncaughtException.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getBreakOnUncaughtException_result({success: result});
      output.writeMessageBegin("getBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getBreakOnUncaughtException_result(err);
        output.writeMessageBegin("getBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakOnUncaughtException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getBreakOnUncaughtException(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getBreakOnUncaughtException_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBreakOnUncaughtException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_setBreakOnUncaughtException = function(seqid, input, output) {
  var args = new Debugger_setBreakOnUncaughtException_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBreakOnUncaughtException.length === 1) {
    Q.fcall(this._handler.setBreakOnUncaughtException.bind(this._handler),
      args.enable
    ).then(function(result) {
      var result_obj = new Debugger_setBreakOnUncaughtException_result({success: result});
      output.writeMessageBegin("setBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_setBreakOnUncaughtException_result(err);
        output.writeMessageBegin("setBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakOnUncaughtException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBreakOnUncaughtException(args.enable, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_setBreakOnUncaughtException_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBreakOnUncaughtException", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBreakOnUncaughtException", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getZoneByName = function(seqid, input, output) {
  var args = new Debugger_getZoneByName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getZoneByName.length === 1) {
    Q.fcall(this._handler.getZoneByName.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new Debugger_getZoneByName_result({success: result});
      output.writeMessageBegin("getZoneByName", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getZoneByName_result(err);
        output.writeMessageBegin("getZoneByName", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZoneByName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getZoneByName(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getZoneByName_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getZoneByName", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZoneByName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getZoneById = function(seqid, input, output) {
  var args = new Debugger_getZoneById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getZoneById.length === 1) {
    Q.fcall(this._handler.getZoneById.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Debugger_getZoneById_result({success: result});
      output.writeMessageBegin("getZoneById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getZoneById_result(err);
        output.writeMessageBegin("getZoneById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZoneById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getZoneById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getZoneById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getZoneById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getZoneById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getAllZones = function(seqid, input, output) {
  var args = new Debugger_getAllZones_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllZones.length === 0) {
    Q.fcall(this._handler.getAllZones.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getAllZones_result({success: result});
      output.writeMessageBegin("getAllZones", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof shared_ttypes.CSpyException) {
        result = new Debugger_getAllZones_result(err);
        output.writeMessageBegin("getAllZones", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllZones", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllZones(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof shared_ttypes.CSpyException) {
        result_obj = new Debugger_getAllZones_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllZones", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllZones", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebuggerProcessor.prototype.process_getTraceTime = function(seqid, input, output) {
  var args = new Debugger_getTraceTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTraceTime.length === 0) {
    Q.fcall(this._handler.getTraceTime.bind(this._handler)
    ).then(function(result) {
      var result_obj = new Debugger_getTraceTime_result({success: result});
      output.writeMessageBegin("getTraceTime", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getTraceTime", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTraceTime(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Debugger_getTraceTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTraceTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTraceTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

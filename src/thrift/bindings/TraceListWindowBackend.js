//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ListWindowBackend = require('./ListWindowBackend');
var ListWindowBackendClient = ListWindowBackend.Client;
var ListWindowBackendProcessor = ListWindowBackend.Processor;
var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var TraceListWindowBackend_isEnabled_args = function(args) {
};
TraceListWindowBackend_isEnabled_args.prototype = {};
TraceListWindowBackend_isEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isEnabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isEnabled_result.prototype = {};
TraceListWindowBackend_isEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canEnable_args = function(args) {
};
TraceListWindowBackend_canEnable_args.prototype = {};
TraceListWindowBackend_canEnable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canEnable_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canEnable_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canEnable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canEnable_result.prototype = {};
TraceListWindowBackend_canEnable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canEnable_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canEnable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setEnabled_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setEnabled_args.prototype = {};
TraceListWindowBackend_setEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setEnabled_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setEnabled_result = function(args) {
};
TraceListWindowBackend_setEnabled_result.prototype = {};
TraceListWindowBackend_setEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setEnabled_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canClear_args = function(args) {
};
TraceListWindowBackend_canClear_args.prototype = {};
TraceListWindowBackend_canClear_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canClear_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canClear_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canClear_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canClear_result.prototype = {};
TraceListWindowBackend_canClear_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canClear_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canClear_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_clear_args = function(args) {
};
TraceListWindowBackend_clear_args.prototype = {};
TraceListWindowBackend_clear_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_clear_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_clear_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_clear_result = function(args) {
};
TraceListWindowBackend_clear_result.prototype = {};
TraceListWindowBackend_clear_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_clear_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_clear_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isMixedMode_args = function(args) {
};
TraceListWindowBackend_isMixedMode_args.prototype = {};
TraceListWindowBackend_isMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isMixedMode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isMixedMode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isMixedMode_result.prototype = {};
TraceListWindowBackend_isMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isMixedMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canUseMixedMode_args = function(args) {
};
TraceListWindowBackend_canUseMixedMode_args.prototype = {};
TraceListWindowBackend_canUseMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canUseMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canUseMixedMode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canUseMixedMode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canUseMixedMode_result.prototype = {};
TraceListWindowBackend_canUseMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canUseMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canUseMixedMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setMixedMode_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setMixedMode_args.prototype = {};
TraceListWindowBackend_setMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setMixedMode_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setMixedMode_result = function(args) {
};
TraceListWindowBackend_setMixedMode_result.prototype = {};
TraceListWindowBackend_setMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setMixedMode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canSave_args = function(args) {
};
TraceListWindowBackend_canSave_args.prototype = {};
TraceListWindowBackend_canSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canSave_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canSave_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canSave_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canSave_result.prototype = {};
TraceListWindowBackend_canSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canSave_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canSave_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_save_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
TraceListWindowBackend_save_args.prototype = {};
TraceListWindowBackend_save_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_save_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_save_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_save_result = function(args) {
};
TraceListWindowBackend_save_result.prototype = {};
TraceListWindowBackend_save_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_save_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_save_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilename_args = function(args) {
};
TraceListWindowBackend_getDefaultSaveFilename_args.prototype = {};
TraceListWindowBackend_getDefaultSaveFilename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilename_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilename_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilename_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_getDefaultSaveFilename_result.prototype = {};
TraceListWindowBackend_getDefaultSaveFilename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilename_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilename_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilenameExt_args = function(args) {
};
TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype = {};
TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilenameExt_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilenameExt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype = {};
TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilenameExt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canFind_args = function(args) {
};
TraceListWindowBackend_canFind_args.prototype = {};
TraceListWindowBackend_canFind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canFind_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canFind_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canFind_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canFind_result.prototype = {};
TraceListWindowBackend_canFind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canFind_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canFind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getFindParams_args = function(args) {
};
TraceListWindowBackend_getFindParams_args.prototype = {};
TraceListWindowBackend_getFindParams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getFindParams_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getFindParams_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getFindParams_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TraceFindParams(args.success);
    }
  }
};
TraceListWindowBackend_getFindParams_result.prototype = {};
TraceListWindowBackend_getFindParams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TraceFindParams();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getFindParams_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getFindParams_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_find_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.TraceFindParams(args.params);
    }
  }
};
TraceListWindowBackend_find_args.prototype = {};
TraceListWindowBackend_find_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.TraceFindParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_find_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_find_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_find_result = function(args) {
};
TraceListWindowBackend_find_result.prototype = {};
TraceListWindowBackend_find_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_find_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_find_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_findLocal_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.TraceFindParams(args.params);
    }
  }
};
TraceListWindowBackend_findLocal_args.prototype = {};
TraceListWindowBackend_findLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.TraceFindParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_findLocal_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_findLocal_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_findLocal_result = function(args) {
};
TraceListWindowBackend_findLocal_result.prototype = {};
TraceListWindowBackend_findLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_findLocal_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_findLocal_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canBrowse_args = function(args) {
};
TraceListWindowBackend_canBrowse_args.prototype = {};
TraceListWindowBackend_canBrowse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canBrowse_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canBrowse_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canBrowse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canBrowse_result.prototype = {};
TraceListWindowBackend_canBrowse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canBrowse_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canBrowse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isBrowsing_args = function(args) {
};
TraceListWindowBackend_isBrowsing_args.prototype = {};
TraceListWindowBackend_isBrowsing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isBrowsing_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isBrowsing_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isBrowsing_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isBrowsing_result.prototype = {};
TraceListWindowBackend_isBrowsing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isBrowsing_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isBrowsing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setBrowseMode_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setBrowseMode_args.prototype = {};
TraceListWindowBackend_setBrowseMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setBrowseMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setBrowseMode_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setBrowseMode_result = function(args) {
};
TraceListWindowBackend_setBrowseMode_result.prototype = {};
TraceListWindowBackend_setBrowseMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setBrowseMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setBrowseMode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getProgress_args = function(args) {
};
TraceListWindowBackend_getProgress_args.prototype = {};
TraceListWindowBackend_getProgress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getProgress_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getProgress_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getProgress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TraceProgress(args.success);
    }
  }
};
TraceListWindowBackend_getProgress_result.prototype = {};
TraceListWindowBackend_getProgress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TraceProgress();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getProgress_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getProgress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_supportsTraceSettings_args = function(args) {
};
TraceListWindowBackend_supportsTraceSettings_args.prototype = {};
TraceListWindowBackend_supportsTraceSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_supportsTraceSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_supportsTraceSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_supportsTraceSettings_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_supportsTraceSettings_result.prototype = {};
TraceListWindowBackend_supportsTraceSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_supportsTraceSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_supportsTraceSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackendClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(TraceListWindowBackendClient, ListWindowBackendClient);
TraceListWindowBackendClient.prototype.seqid = function() { return this._seqid; };
TraceListWindowBackendClient.prototype.new_seqid = function() { return this._seqid += 1; };

TraceListWindowBackendClient.prototype.isEnabled = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isEnabled();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isEnabled();
  }
};

TraceListWindowBackendClient.prototype.send_isEnabled = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_isEnabled_args();
  try {
    output.writeMessageBegin('isEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_isEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isEnabled failed: unknown result');
};

TraceListWindowBackendClient.prototype.canEnable = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canEnable();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canEnable();
  }
};

TraceListWindowBackendClient.prototype.send_canEnable = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canEnable_args();
  try {
    output.writeMessageBegin('canEnable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canEnable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canEnable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canEnable failed: unknown result');
};

TraceListWindowBackendClient.prototype.setEnabled = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setEnabled(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setEnabled(on);
  }
};

TraceListWindowBackendClient.prototype.send_setEnabled = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setEnabled_args(params);
  try {
    output.writeMessageBegin('setEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_setEnabled_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.canClear = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canClear();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canClear();
  }
};

TraceListWindowBackendClient.prototype.send_canClear = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canClear_args();
  try {
    output.writeMessageBegin('canClear', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canClear = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canClear_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canClear failed: unknown result');
};

TraceListWindowBackendClient.prototype.clear = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear();
  }
};

TraceListWindowBackendClient.prototype.send_clear = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_clear_args();
  try {
    output.writeMessageBegin('clear', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_clear = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_clear_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.isMixedMode = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isMixedMode();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isMixedMode();
  }
};

TraceListWindowBackendClient.prototype.send_isMixedMode = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_isMixedMode_args();
  try {
    output.writeMessageBegin('isMixedMode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isMixedMode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_isMixedMode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isMixedMode failed: unknown result');
};

TraceListWindowBackendClient.prototype.canUseMixedMode = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canUseMixedMode();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canUseMixedMode();
  }
};

TraceListWindowBackendClient.prototype.send_canUseMixedMode = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canUseMixedMode_args();
  try {
    output.writeMessageBegin('canUseMixedMode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canUseMixedMode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canUseMixedMode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canUseMixedMode failed: unknown result');
};

TraceListWindowBackendClient.prototype.setMixedMode = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setMixedMode(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setMixedMode(on);
  }
};

TraceListWindowBackendClient.prototype.send_setMixedMode = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setMixedMode_args(params);
  try {
    output.writeMessageBegin('setMixedMode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setMixedMode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_setMixedMode_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.canSave = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canSave();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canSave();
  }
};

TraceListWindowBackendClient.prototype.send_canSave = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canSave_args();
  try {
    output.writeMessageBegin('canSave', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canSave = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canSave_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canSave failed: unknown result');
};

TraceListWindowBackendClient.prototype.save = function(filename, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_save(filename);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_save(filename);
  }
};

TraceListWindowBackendClient.prototype.send_save = function(filename) {
  var output = new this.pClass(this.output);
  var params = {
    filename: filename
  };
  var args = new TraceListWindowBackend_save_args(params);
  try {
    output.writeMessageBegin('save', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_save = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_save_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.getDefaultSaveFilename = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultSaveFilename();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultSaveFilename();
  }
};

TraceListWindowBackendClient.prototype.send_getDefaultSaveFilename = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_getDefaultSaveFilename_args();
  try {
    output.writeMessageBegin('getDefaultSaveFilename', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getDefaultSaveFilename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_getDefaultSaveFilename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultSaveFilename failed: unknown result');
};

TraceListWindowBackendClient.prototype.getDefaultSaveFilenameExt = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultSaveFilenameExt();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultSaveFilenameExt();
  }
};

TraceListWindowBackendClient.prototype.send_getDefaultSaveFilenameExt = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_getDefaultSaveFilenameExt_args();
  try {
    output.writeMessageBegin('getDefaultSaveFilenameExt', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getDefaultSaveFilenameExt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_getDefaultSaveFilenameExt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultSaveFilenameExt failed: unknown result');
};

TraceListWindowBackendClient.prototype.canFind = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canFind();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canFind();
  }
};

TraceListWindowBackendClient.prototype.send_canFind = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canFind_args();
  try {
    output.writeMessageBegin('canFind', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canFind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canFind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canFind failed: unknown result');
};

TraceListWindowBackendClient.prototype.getFindParams = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFindParams();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFindParams();
  }
};

TraceListWindowBackendClient.prototype.send_getFindParams = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_getFindParams_args();
  try {
    output.writeMessageBegin('getFindParams', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getFindParams = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_getFindParams_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFindParams failed: unknown result');
};

TraceListWindowBackendClient.prototype.find = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_find(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_find(params);
  }
};

TraceListWindowBackendClient.prototype.send_find = function(params) {
  var output = new this.pClass(this.output);
  var params = {
    params: params
  };
  var args = new TraceListWindowBackend_find_args(params);
  try {
    output.writeMessageBegin('find', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_find = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_find_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.findLocal = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findLocal(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findLocal(params);
  }
};

TraceListWindowBackendClient.prototype.send_findLocal = function(params) {
  var output = new this.pClass(this.output);
  var params = {
    params: params
  };
  var args = new TraceListWindowBackend_findLocal_args(params);
  try {
    output.writeMessageBegin('findLocal', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_findLocal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_findLocal_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.canBrowse = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_canBrowse();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_canBrowse();
  }
};

TraceListWindowBackendClient.prototype.send_canBrowse = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_canBrowse_args();
  try {
    output.writeMessageBegin('canBrowse', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canBrowse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_canBrowse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('canBrowse failed: unknown result');
};

TraceListWindowBackendClient.prototype.isBrowsing = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isBrowsing();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isBrowsing();
  }
};

TraceListWindowBackendClient.prototype.send_isBrowsing = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_isBrowsing_args();
  try {
    output.writeMessageBegin('isBrowsing', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isBrowsing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_isBrowsing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isBrowsing failed: unknown result');
};

TraceListWindowBackendClient.prototype.setBrowseMode = function(on, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBrowseMode(on);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBrowseMode(on);
  }
};

TraceListWindowBackendClient.prototype.send_setBrowseMode = function(on) {
  var output = new this.pClass(this.output);
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setBrowseMode_args(params);
  try {
    output.writeMessageBegin('setBrowseMode', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setBrowseMode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_setBrowseMode_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TraceListWindowBackendClient.prototype.getProgress = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProgress();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProgress();
  }
};

TraceListWindowBackendClient.prototype.send_getProgress = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_getProgress_args();
  try {
    output.writeMessageBegin('getProgress', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getProgress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_getProgress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProgress failed: unknown result');
};

TraceListWindowBackendClient.prototype.supportsTraceSettings = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_supportsTraceSettings();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_supportsTraceSettings();
  }
};

TraceListWindowBackendClient.prototype.send_supportsTraceSettings = function() {
  var output = new this.pClass(this.output);
  var args = new TraceListWindowBackend_supportsTraceSettings_args();
  try {
    output.writeMessageBegin('supportsTraceSettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_supportsTraceSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TraceListWindowBackend_supportsTraceSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('supportsTraceSettings failed: unknown result');
};
var TraceListWindowBackendProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(TraceListWindowBackendProcessor, ListWindowBackendProcessor);
TraceListWindowBackendProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
TraceListWindowBackendProcessor.prototype.process_isEnabled = function(seqid, input, output) {
  var args = new TraceListWindowBackend_isEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isEnabled.length === 0) {
    Q.fcall(this._handler.isEnabled.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_isEnabled_result({success: result});
      output.writeMessageBegin("isEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isEnabled(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_isEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canEnable = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canEnable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canEnable.length === 0) {
    Q.fcall(this._handler.canEnable.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canEnable_result({success: result});
      output.writeMessageBegin("canEnable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canEnable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canEnable(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canEnable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canEnable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canEnable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_setEnabled = function(seqid, input, output) {
  var args = new TraceListWindowBackend_setEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setEnabled.length === 1) {
    Q.fcall(this._handler.setEnabled.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_setEnabled_result({success: result});
      output.writeMessageBegin("setEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setEnabled", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setEnabled(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_setEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canClear = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canClear_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canClear.length === 0) {
    Q.fcall(this._handler.canClear.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canClear_result({success: result});
      output.writeMessageBegin("canClear", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canClear", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canClear(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canClear_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canClear", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canClear", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_clear = function(seqid, input, output) {
  var args = new TraceListWindowBackend_clear_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear.length === 0) {
    Q.fcall(this._handler.clear.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_clear_result({success: result});
      output.writeMessageBegin("clear", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("clear", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clear(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_clear_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_isMixedMode = function(seqid, input, output) {
  var args = new TraceListWindowBackend_isMixedMode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isMixedMode.length === 0) {
    Q.fcall(this._handler.isMixedMode.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_isMixedMode_result({success: result});
      output.writeMessageBegin("isMixedMode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isMixedMode(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_isMixedMode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isMixedMode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canUseMixedMode = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canUseMixedMode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canUseMixedMode.length === 0) {
    Q.fcall(this._handler.canUseMixedMode.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canUseMixedMode_result({success: result});
      output.writeMessageBegin("canUseMixedMode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canUseMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canUseMixedMode(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canUseMixedMode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canUseMixedMode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canUseMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_setMixedMode = function(seqid, input, output) {
  var args = new TraceListWindowBackend_setMixedMode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setMixedMode.length === 1) {
    Q.fcall(this._handler.setMixedMode.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_setMixedMode_result({success: result});
      output.writeMessageBegin("setMixedMode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setMixedMode(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_setMixedMode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setMixedMode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setMixedMode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canSave = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canSave_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canSave.length === 0) {
    Q.fcall(this._handler.canSave.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canSave_result({success: result});
      output.writeMessageBegin("canSave", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canSave", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canSave(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canSave_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canSave", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canSave", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_save = function(seqid, input, output) {
  var args = new TraceListWindowBackend_save_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.save.length === 1) {
    Q.fcall(this._handler.save.bind(this._handler),
      args.filename
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_save_result({success: result});
      output.writeMessageBegin("save", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("save", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.save(args.filename, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_save_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("save", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("save", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_getDefaultSaveFilename = function(seqid, input, output) {
  var args = new TraceListWindowBackend_getDefaultSaveFilename_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultSaveFilename.length === 0) {
    Q.fcall(this._handler.getDefaultSaveFilename.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_getDefaultSaveFilename_result({success: result});
      output.writeMessageBegin("getDefaultSaveFilename", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getDefaultSaveFilename", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultSaveFilename(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_getDefaultSaveFilename_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultSaveFilename", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultSaveFilename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_getDefaultSaveFilenameExt = function(seqid, input, output) {
  var args = new TraceListWindowBackend_getDefaultSaveFilenameExt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultSaveFilenameExt.length === 0) {
    Q.fcall(this._handler.getDefaultSaveFilenameExt.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_getDefaultSaveFilenameExt_result({success: result});
      output.writeMessageBegin("getDefaultSaveFilenameExt", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getDefaultSaveFilenameExt", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultSaveFilenameExt(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_getDefaultSaveFilenameExt_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultSaveFilenameExt", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultSaveFilenameExt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canFind = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canFind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canFind.length === 0) {
    Q.fcall(this._handler.canFind.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canFind_result({success: result});
      output.writeMessageBegin("canFind", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canFind", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canFind(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canFind_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canFind", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canFind", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_getFindParams = function(seqid, input, output) {
  var args = new TraceListWindowBackend_getFindParams_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFindParams.length === 0) {
    Q.fcall(this._handler.getFindParams.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_getFindParams_result({success: result});
      output.writeMessageBegin("getFindParams", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getFindParams", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getFindParams(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_getFindParams_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFindParams", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFindParams", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_find = function(seqid, input, output) {
  var args = new TraceListWindowBackend_find_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.find.length === 1) {
    Q.fcall(this._handler.find.bind(this._handler),
      args.params
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_find_result({success: result});
      output.writeMessageBegin("find", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("find", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.find(args.params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_find_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("find", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("find", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_findLocal = function(seqid, input, output) {
  var args = new TraceListWindowBackend_findLocal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findLocal.length === 1) {
    Q.fcall(this._handler.findLocal.bind(this._handler),
      args.params
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_findLocal_result({success: result});
      output.writeMessageBegin("findLocal", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("findLocal", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findLocal(args.params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_findLocal_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findLocal", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findLocal", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_canBrowse = function(seqid, input, output) {
  var args = new TraceListWindowBackend_canBrowse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.canBrowse.length === 0) {
    Q.fcall(this._handler.canBrowse.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_canBrowse_result({success: result});
      output.writeMessageBegin("canBrowse", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("canBrowse", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.canBrowse(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_canBrowse_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("canBrowse", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("canBrowse", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_isBrowsing = function(seqid, input, output) {
  var args = new TraceListWindowBackend_isBrowsing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isBrowsing.length === 0) {
    Q.fcall(this._handler.isBrowsing.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_isBrowsing_result({success: result});
      output.writeMessageBegin("isBrowsing", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("isBrowsing", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isBrowsing(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_isBrowsing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isBrowsing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isBrowsing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_setBrowseMode = function(seqid, input, output) {
  var args = new TraceListWindowBackend_setBrowseMode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBrowseMode.length === 1) {
    Q.fcall(this._handler.setBrowseMode.bind(this._handler),
      args.on
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_setBrowseMode_result({success: result});
      output.writeMessageBegin("setBrowseMode", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("setBrowseMode", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setBrowseMode(args.on, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_setBrowseMode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setBrowseMode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBrowseMode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_getProgress = function(seqid, input, output) {
  var args = new TraceListWindowBackend_getProgress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProgress.length === 0) {
    Q.fcall(this._handler.getProgress.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_getProgress_result({success: result});
      output.writeMessageBegin("getProgress", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getProgress", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getProgress(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_getProgress_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProgress", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProgress", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TraceListWindowBackendProcessor.prototype.process_supportsTraceSettings = function(seqid, input, output) {
  var args = new TraceListWindowBackend_supportsTraceSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.supportsTraceSettings.length === 0) {
    Q.fcall(this._handler.supportsTraceSettings.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TraceListWindowBackend_supportsTraceSettings_result({success: result});
      output.writeMessageBegin("supportsTraceSettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("supportsTraceSettings", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.supportsTraceSettings(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TraceListWindowBackend_supportsTraceSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("supportsTraceSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("supportsTraceSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

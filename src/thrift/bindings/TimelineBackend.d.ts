/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import ServiceRegistry_ttypes = require('./ServiceRegistry_types');
import shared_ttypes = require('./shared_types');


import ttypes = require('./timeline_types');
import TIMELINE_FRONTEND_SERVICE = ttypes.TIMELINE_FRONTEND_SERVICE
import TIMELINE_BACKEND_SERVICE = ttypes.TIMELINE_BACKEND_SERVICE
import DbuTimelineDataAvailableNotification = ttypes.DbuTimelineDataAvailableNotification
import DbuTimelineChannelAvailableNotification = ttypes.DbuTimelineChannelAvailableNotification
import DbuTimelineChannelRemovedNotification = ttypes.DbuTimelineChannelRemovedNotification
import DbuTimelineCpuClockChangedNotification = ttypes.DbuTimelineCpuClockChangedNotification
import DbuTimelineEnablementChangedNotification = ttypes.DbuTimelineEnablementChangedNotification
import TimelineChannelInfo = ttypes.TimelineChannelInfo
import HeartbeatService = require('./HeartbeatService');

/**
 * Service for retrieving Timeline data from the backend
 */
declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  getChannels(): Q.Promise<TimelineChannelInfo[]>;

  getChannels(callback?: (error: void, response: TimelineChannelInfo[])=>void): void;

  getCPUClock(): Q.Promise<Int64>;

  getCPUClock(callback?: (error: void, response: Int64)=>void): void;

  readData(id: string, startTime: Int64, endTime: Int64): Q.Promise<string>;

  readData(id: string, startTime: Int64, endTime: Int64, callback?: (error: void, response: string)=>void): void;

  readOverflows(id: string, startTime: Int64, endTime: Int64): Q.Promise<string>;

  readOverflows(id: string, startTime: Int64, endTime: Int64, callback?: (error: void, response: string)=>void): void;

  enable(id: string, enabled: boolean): Q.Promise<void>;

  enable(id: string, enabled: boolean, callback?: (error: void, response: void)=>void): void;

  isEnabled(id: string): Q.Promise<boolean>;

  isEnabled(id: string, callback?: (error: void, response: boolean)=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getChannels(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCPUClock(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_readData(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_readOverflows(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enable(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isEnabled(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

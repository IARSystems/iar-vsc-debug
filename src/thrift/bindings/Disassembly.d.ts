/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./disassembly_types');
import DISASSEMBLY_SERVICE = ttypes.DISASSEMBLY_SERVICE
import DisassembledLocation = ttypes.DisassembledLocation
import HeartbeatService = require('./HeartbeatService');

declare class Client extends HeartbeatService.Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  disassembleRange(_from: shared_ttypes.Location, _to: shared_ttypes.Location, context: shared_ttypes.ContextRef): Q.Promise<DisassembledLocation[]>;

  disassembleRange(_from: shared_ttypes.Location, _to: shared_ttypes.Location, context: shared_ttypes.ContextRef, callback?: (error: shared_ttypes.CSpyException, response: DisassembledLocation[])=>void): void;

  disassembleLines(_from: shared_ttypes.Location, numLines: number, context: shared_ttypes.ContextRef): Q.Promise<DisassembledLocation[]>;

  disassembleLines(_from: shared_ttypes.Location, numLines: number, context: shared_ttypes.ContextRef, callback?: (error: shared_ttypes.CSpyException, response: DisassembledLocation[])=>void): void;
}

declare class Processor extends HeartbeatService.Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_disassembleRange(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_disassembleLines(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}

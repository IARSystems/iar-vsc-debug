//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');
import cspy_ttypes = require('./cspy_types');
import ServiceRegistry_ttypes = require('./ServiceRegistry_types');



declare enum SessionState {
  Offline = 0,
  SettingConfig = 1,
  Building = 2,
  BuildDone = 3,
  StartFlashing = 4,
  DoneFlashing = 5,
  StartLoading = 6,
  DoneLoading = 7,
  StartAllLoaded = 8,
  DoneAllLoaded = 9,
  Running = 10,
  EndSession = 11,
  StartPartnerRegistryReset = 12,
  DonePartnerRegistryReset = 13,
  Terminate = 14,
  RestartAtOffline = 15,
  Disconnect = 16,
}

declare enum LowLevelAction {
  kDontCallLowLevelGo = 0,
  kStartCPU = 1,
  kStartAllCPUs = 2,
  kPollingOnly = 3,
}

declare enum CoreLowLevelResult {
  kFullStop = 0,
  kReportToKernel = 1,
  kSympathetic = 2,
  kGoAgain = 3,
  kTurnedZombie = 4,
  kError = 5,
  kIllegal = 6,
}

declare enum WhatNext {
  kReturnFromDriverGo = 0,
  kLowLevelGoAgain = 1,
  kReturnError = 2,
  kReturnFromDriverGoAndStop = 3,
}

declare enum CoreStatus {
  kCoreStopped = 0,
  kCoreRunning = 1,
  kCoreZombie = 2,
}

declare enum Tools {
  EmbeddedWorkbench = 0,
  CSpyBat = 1,
  CSpyServer = 2,
  CSpyRuby = 3,
}

declare class PartnerInformation {
  public id: number;
  public cspyConfiguration: cspy_ttypes.SessionConfiguration;
  public configuration: { [k: string]: string; };
  public isAlive: boolean;

    constructor(args?: { id: number; cspyConfiguration: cspy_ttypes.SessionConfiguration; configuration: { [k: string]: string; }; isAlive: boolean; });
}

declare class CoreInfo {
  public id: number;
  public name: string;
  public status: cspy_ttypes.DkCoreStatusConstants;
  public statusString: string;
  public pc: string;
  public cc: string;
  public partner: number;
  public localCoreId: number;

    constructor(args?: { id: number; name: string; status: cspy_ttypes.DkCoreStatusConstants; statusString: string; pc: string; cc: string; partner: number; localCoreId: number; });
}

declare class UnknownPartner extends Thrift.TException {
  public id: number;

    constructor(args?: { id: number; });
}

declare class CoreRange {
  public first: number;
  public last: number;

    constructor(args?: { first: number; last: number; });
}

declare class Event {
  public type: string;
  public properties: { [k: string]: string; };

    constructor(args?: { type: string; properties?: { [k: string]: string; }; });
}

declare class EventBusRegistrationFailed extends Thrift.TException {
  public message: string;
  public type: number;

    constructor(args?: { message: string; type: number; });
}

declare class NumberOfCoresInfo {
  public numberOfCores: number;
  public localCores: number;
  public localCoreOffset: number;

    constructor(args?: { numberOfCores: number; localCores: number; localCoreOffset: number; });
}

declare class FailedToStartPartner extends Thrift.TException {
  public partner: number;
  public message: string;

    constructor(args?: { partner: number; message: string; });
}

declare var CORES_REGISTRY_SERVICE: string;

declare var PARTNER_REGISTRY_SERVICE: string;

declare var EVENT_BUS_SERVICE: string;

declare var SESSION_SYNCHRONIZER_SERVICE: string;

declare var GATE_KEEPER_SERVICE: string;

declare var MULTI_CORE_LOG_SERVICE: string;

declare var SOFT_CTI_SERVICE: string;

declare var DEBUGGER_STARTER_SERVICE: string;

declare var PARTNER_REGISTRY_PARTNER_SET_EVENT: string;

declare var PARTNER_REGISTRY_PARTNER_IS_ALIVE_EVENT: string;

declare var PARTNER_REGISTRY_PARTNER_IS_DECEASED_EVENT: string;

declare var PARTNER_REGISTRY_EVENT_PARTNER_ID: string;

declare var CORES_REGISTRY_UPDATED_EVENT: string;

declare var EVENT_SENDING_PARTNERID_KEY: string;

declare var SESSION_SYNCHRONIZER_SYNCSTART_EVENT: string;

declare var SESSION_SYNCHRONIZER_FROM_KEY: string;

declare var SESSION_SYNCHRONIZER_TO_KEY: string;

declare var SESSION_SYNCHRONIZER_SYNCSTART_SENDING_PARTNER_KEY: string;

declare var SESSION_SYNCHRONIZER_SYNCCOMMIT_EVENT: string;

declare var SESSION_SYNCHRONIZER_DEBUGGERSTART_EVENT: string;

declare var SESSION_SYNCHRONIZER_DEBUGGERENDSESSION_EVENT: string;

declare var SESSION_SYNCHRONIZER_DEBUGGERTERMINATE_EVENT: string;

declare var SESSION_SYNCHRONIZER_DEBUGGERDISCONNECT_EVENT: string;

declare var SESSION_SYNCHRONIZER_EVENT_PARTNER_ID: string;

declare var EXEC_CONTROL_GO_EVENT: string;

declare var EXEC_CONTROL_STOP_EVENT: string;

declare var EXEC_CONTROL_MULTISTOP_EVENT: string;

declare var EXEC_CONTROL_MULTIGO_EVENT: string;

declare var EXEC_CONTROL_SET_RUNALL_EVENT: string;

declare var EXEC_CONTROL_SET_RUNONE_EVENT: string;

declare var EXEC_CONTROL_EVENT_CORE_KEY_PREFIX: string;

declare var SOFT_CTI_STOP_ALL_EVENT: string;

declare var SOFT_CTI_EVENT_CORE_KEY_PREFIX: string;

declare var SOFT_CTI_EVENT_ID_KEY_PREFIX: string;

declare var DEBUGGER_STARTER_TOOL_TO_START_KEY: string;

declare var DEBUGKERNEL_EXEC_STARTED_EVENT: string;

declare var DEBUGKERNEL_EXEC_STOPPED_EVENT: string;

declare var DEBUGKERNEL_RESET_EVENT: string;

declare var DEBUGKERNEL_BEGIN_SESSION_EVENT: string;

declare var DEBUGKERNEL_END_SESSION_EVENT: string;

declare var DEBUGKERNEL_MEMMOY_CHANGED_EVENT: string;

declare var DEBUGKERNEL_SENDER: string;

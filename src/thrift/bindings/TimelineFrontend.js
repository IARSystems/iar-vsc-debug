//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ttypes = require('./timeline_types');
//HELPER FUNCTIONS AND STRUCTURES

var TimelineFrontend_dataAvailable_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineDataAvailableNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_dataAvailable_args.prototype = {};
TimelineFrontend_dataAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineDataAvailableNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_dataAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_dataAvailable_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_dataAvailable_result = function(args) {
};
TimelineFrontend_dataAvailable_result.prototype = {};
TimelineFrontend_dataAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_dataAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_dataAvailable_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelAvailable_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineChannelAvailableNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_channelAvailable_args.prototype = {};
TimelineFrontend_channelAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineChannelAvailableNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelAvailable_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelAvailable_result = function(args) {
};
TimelineFrontend_channelAvailable_result.prototype = {};
TimelineFrontend_channelAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelAvailable_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelRemoved_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineChannelRemovedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_channelRemoved_args.prototype = {};
TimelineFrontend_channelRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineChannelRemovedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelRemoved_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelRemoved_result = function(args) {
};
TimelineFrontend_channelRemoved_result.prototype = {};
TimelineFrontend_channelRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelRemoved_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_cpuClockChanged_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineCpuClockChangedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_cpuClockChanged_args.prototype = {};
TimelineFrontend_cpuClockChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineCpuClockChangedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_cpuClockChanged_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_cpuClockChanged_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_cpuClockChanged_result = function(args) {
};
TimelineFrontend_cpuClockChanged_result.prototype = {};
TimelineFrontend_cpuClockChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_cpuClockChanged_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_cpuClockChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_enablementChanged_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineEnablementChangedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_enablementChanged_args.prototype = {};
TimelineFrontend_enablementChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineEnablementChangedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_enablementChanged_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_enablementChanged_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_enablementChanged_result = function(args) {
};
TimelineFrontend_enablementChanged_result.prototype = {};
TimelineFrontend_enablementChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_enablementChanged_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_enablementChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontendClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
TimelineFrontendClient.prototype = {};
TimelineFrontendClient.prototype.seqid = function() { return this._seqid; };
TimelineFrontendClient.prototype.new_seqid = function() { return this._seqid += 1; };

TimelineFrontendClient.prototype.dataAvailable = function(note, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_dataAvailable(note, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_dataAvailable(note, partnerNamespace);
  }
};

TimelineFrontendClient.prototype.send_dataAvailable = function(note, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_dataAvailable_args(params);
  try {
    output.writeMessageBegin('dataAvailable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_dataAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimelineFrontend_dataAvailable_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TimelineFrontendClient.prototype.channelAvailable = function(note, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_channelAvailable(note, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_channelAvailable(note, partnerNamespace);
  }
};

TimelineFrontendClient.prototype.send_channelAvailable = function(note, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_channelAvailable_args(params);
  try {
    output.writeMessageBegin('channelAvailable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_channelAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimelineFrontend_channelAvailable_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TimelineFrontendClient.prototype.channelRemoved = function(note, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_channelRemoved(note, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_channelRemoved(note, partnerNamespace);
  }
};

TimelineFrontendClient.prototype.send_channelRemoved = function(note, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_channelRemoved_args(params);
  try {
    output.writeMessageBegin('channelRemoved', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_channelRemoved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimelineFrontend_channelRemoved_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TimelineFrontendClient.prototype.cpuClockChanged = function(note, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cpuClockChanged(note, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cpuClockChanged(note, partnerNamespace);
  }
};

TimelineFrontendClient.prototype.send_cpuClockChanged = function(note, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_cpuClockChanged_args(params);
  try {
    output.writeMessageBegin('cpuClockChanged', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_cpuClockChanged = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimelineFrontend_cpuClockChanged_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

TimelineFrontendClient.prototype.enablementChanged = function(note, partnerNamespace, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enablementChanged(note, partnerNamespace);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enablementChanged(note, partnerNamespace);
  }
};

TimelineFrontendClient.prototype.send_enablementChanged = function(note, partnerNamespace) {
  var output = new this.pClass(this.output);
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_enablementChanged_args(params);
  try {
    output.writeMessageBegin('enablementChanged', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_enablementChanged = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TimelineFrontend_enablementChanged_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var TimelineFrontendProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
TimelineFrontendProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
TimelineFrontendProcessor.prototype.process_dataAvailable = function(seqid, input, output) {
  var args = new TimelineFrontend_dataAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.dataAvailable.length === 2) {
    Q.fcall(this._handler.dataAvailable.bind(this._handler),
      args.note,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new TimelineFrontend_dataAvailable_result({success: result});
      output.writeMessageBegin("dataAvailable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("dataAvailable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.dataAvailable(args.note, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TimelineFrontend_dataAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("dataAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("dataAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TimelineFrontendProcessor.prototype.process_channelAvailable = function(seqid, input, output) {
  var args = new TimelineFrontend_channelAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.channelAvailable.length === 2) {
    Q.fcall(this._handler.channelAvailable.bind(this._handler),
      args.note,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new TimelineFrontend_channelAvailable_result({success: result});
      output.writeMessageBegin("channelAvailable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("channelAvailable", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.channelAvailable(args.note, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TimelineFrontend_channelAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("channelAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("channelAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TimelineFrontendProcessor.prototype.process_channelRemoved = function(seqid, input, output) {
  var args = new TimelineFrontend_channelRemoved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.channelRemoved.length === 2) {
    Q.fcall(this._handler.channelRemoved.bind(this._handler),
      args.note,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new TimelineFrontend_channelRemoved_result({success: result});
      output.writeMessageBegin("channelRemoved", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("channelRemoved", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.channelRemoved(args.note, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TimelineFrontend_channelRemoved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("channelRemoved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("channelRemoved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TimelineFrontendProcessor.prototype.process_cpuClockChanged = function(seqid, input, output) {
  var args = new TimelineFrontend_cpuClockChanged_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cpuClockChanged.length === 2) {
    Q.fcall(this._handler.cpuClockChanged.bind(this._handler),
      args.note,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new TimelineFrontend_cpuClockChanged_result({success: result});
      output.writeMessageBegin("cpuClockChanged", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("cpuClockChanged", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cpuClockChanged(args.note, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TimelineFrontend_cpuClockChanged_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cpuClockChanged", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cpuClockChanged", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TimelineFrontendProcessor.prototype.process_enablementChanged = function(seqid, input, output) {
  var args = new TimelineFrontend_enablementChanged_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enablementChanged.length === 2) {
    Q.fcall(this._handler.enablementChanged.bind(this._handler),
      args.note,
      args.partnerNamespace
    ).then(function(result) {
      var result_obj = new TimelineFrontend_enablementChanged_result({success: result});
      output.writeMessageBegin("enablementChanged", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("enablementChanged", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.enablementChanged(args.note, args.partnerNamespace, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TimelineFrontend_enablementChanged_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enablementChanged", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enablementChanged", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var ServiceRegistry_ttypes = require('./ServiceRegistry_types');
var shared_ttypes = require('./shared_types');


var ListWindowBackend = require('./ListWindowBackend');
var ListWindowBackendClient = ListWindowBackend.Client;
var ListWindowBackendProcessor = ListWindowBackend.Processor;
var ttypes = require('./listwindow_types');
//HELPER FUNCTIONS AND STRUCTURES

var QuickWatch_evaluate_args = function(args) {
  this.expr = null;
  if (args) {
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    }
  }
};
QuickWatch_evaluate_args.prototype = {};
QuickWatch_evaluate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuickWatch_evaluate_args.prototype.write = function(output) {
  output.writeStructBegin('QuickWatch_evaluate_args');
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 1);
    output.writeString(this.expr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QuickWatch_evaluate_result = function(args) {
};
QuickWatch_evaluate_result.prototype = {};
QuickWatch_evaluate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuickWatch_evaluate_result.prototype.write = function(output) {
  output.writeStructBegin('QuickWatch_evaluate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QuickWatchClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(QuickWatchClient, ListWindowBackendClient);
QuickWatchClient.prototype.seqid = function() { return this._seqid; };
QuickWatchClient.prototype.new_seqid = function() { return this._seqid += 1; };

QuickWatchClient.prototype.evaluate = function(expr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_evaluate(expr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_evaluate(expr);
  }
};

QuickWatchClient.prototype.send_evaluate = function(expr) {
  var output = new this.pClass(this.output);
  var params = {
    expr: expr
  };
  var args = new QuickWatch_evaluate_args(params);
  try {
    output.writeMessageBegin('evaluate', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var QuickWatchProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(QuickWatchProcessor, ListWindowBackendProcessor);
QuickWatchProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
QuickWatchProcessor.prototype.process_evaluate = function(seqid, input, output) {
  var args = new QuickWatch_evaluate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.evaluate(args.expr);
};

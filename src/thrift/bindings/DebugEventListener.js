//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var ttypes = require('./cspy_types');
//HELPER FUNCTIONS AND STRUCTURES

var DebugEventListener_postDebugEvent_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new ttypes.DebugEvent(args.event);
    }
  }
};
DebugEventListener_postDebugEvent_args.prototype = {};
DebugEventListener_postDebugEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.DebugEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postDebugEvent_args.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postDebugEvent_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postDebugEvent_result = function(args) {
};
DebugEventListener_postDebugEvent_result.prototype = {};
DebugEventListener_postDebugEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postDebugEvent_result.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postDebugEvent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postLogEvent_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new ttypes.LogEvent(args.event);
    }
  }
};
DebugEventListener_postLogEvent_args.prototype = {};
DebugEventListener_postLogEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.LogEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postLogEvent_args.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postLogEvent_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postLogEvent_result = function(args) {
};
DebugEventListener_postLogEvent_result.prototype = {};
DebugEventListener_postLogEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postLogEvent_result.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postLogEvent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postInspectionContextChangedEvent_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new ttypes.InspectionContextChangedEvent(args.event);
    }
  }
};
DebugEventListener_postInspectionContextChangedEvent_args.prototype = {};
DebugEventListener_postInspectionContextChangedEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.InspectionContextChangedEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postInspectionContextChangedEvent_args.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postInspectionContextChangedEvent_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postInspectionContextChangedEvent_result = function(args) {
};
DebugEventListener_postInspectionContextChangedEvent_result.prototype = {};
DebugEventListener_postInspectionContextChangedEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postInspectionContextChangedEvent_result.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postInspectionContextChangedEvent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postBaseContextChangedEvent_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new ttypes.BaseContextChangedEvent(args.event);
    }
  }
};
DebugEventListener_postBaseContextChangedEvent_args.prototype = {};
DebugEventListener_postBaseContextChangedEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.BaseContextChangedEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postBaseContextChangedEvent_args.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postBaseContextChangedEvent_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 1);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListener_postBaseContextChangedEvent_result = function(args) {
};
DebugEventListener_postBaseContextChangedEvent_result.prototype = {};
DebugEventListener_postBaseContextChangedEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEventListener_postBaseContextChangedEvent_result.prototype.write = function(output) {
  output.writeStructBegin('DebugEventListener_postBaseContextChangedEvent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEventListenerClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
DebugEventListenerClient.prototype = {};
DebugEventListenerClient.prototype.seqid = function() { return this._seqid; };
DebugEventListenerClient.prototype.new_seqid = function() { return this._seqid += 1; };

DebugEventListenerClient.prototype.postDebugEvent = function(event, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postDebugEvent(event);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postDebugEvent(event);
  }
};

DebugEventListenerClient.prototype.send_postDebugEvent = function(event) {
  var output = new this.pClass(this.output);
  var params = {
    event: event
  };
  var args = new DebugEventListener_postDebugEvent_args(params);
  try {
    output.writeMessageBegin('postDebugEvent', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebugEventListenerClient.prototype.postLogEvent = function(event, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postLogEvent(event);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postLogEvent(event);
  }
};

DebugEventListenerClient.prototype.send_postLogEvent = function(event) {
  var output = new this.pClass(this.output);
  var params = {
    event: event
  };
  var args = new DebugEventListener_postLogEvent_args(params);
  try {
    output.writeMessageBegin('postLogEvent', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebugEventListenerClient.prototype.recv_postLogEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DebugEventListener_postLogEvent_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

DebugEventListenerClient.prototype.postInspectionContextChangedEvent = function(event, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postInspectionContextChangedEvent(event);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postInspectionContextChangedEvent(event);
  }
};

DebugEventListenerClient.prototype.send_postInspectionContextChangedEvent = function(event) {
  var output = new this.pClass(this.output);
  var params = {
    event: event
  };
  var args = new DebugEventListener_postInspectionContextChangedEvent_args(params);
  try {
    output.writeMessageBegin('postInspectionContextChangedEvent', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DebugEventListenerClient.prototype.postBaseContextChangedEvent = function(event, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postBaseContextChangedEvent(event);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postBaseContextChangedEvent(event);
  }
};

DebugEventListenerClient.prototype.send_postBaseContextChangedEvent = function(event) {
  var output = new this.pClass(this.output);
  var params = {
    event: event
  };
  var args = new DebugEventListener_postBaseContextChangedEvent_args(params);
  try {
    output.writeMessageBegin('postBaseContextChangedEvent', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};
var DebugEventListenerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
DebugEventListenerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
DebugEventListenerProcessor.prototype.process_postDebugEvent = function(seqid, input, output) {
  var args = new DebugEventListener_postDebugEvent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.postDebugEvent(args.event);
};
DebugEventListenerProcessor.prototype.process_postLogEvent = function(seqid, input, output) {
  var args = new DebugEventListener_postLogEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.postLogEvent.length === 1) {
    Q.fcall(this._handler.postLogEvent.bind(this._handler),
      args.event
    ).then(function(result) {
      var result_obj = new DebugEventListener_postLogEvent_result({success: result});
      output.writeMessageBegin("postLogEvent", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("postLogEvent", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.postLogEvent(args.event, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new DebugEventListener_postLogEvent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("postLogEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postLogEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DebugEventListenerProcessor.prototype.process_postInspectionContextChangedEvent = function(seqid, input, output) {
  var args = new DebugEventListener_postInspectionContextChangedEvent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.postInspectionContextChangedEvent(args.event);
};
DebugEventListenerProcessor.prototype.process_postBaseContextChangedEvent = function(seqid, input, output) {
  var args = new DebugEventListener_postBaseContextChangedEvent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.postBaseContextChangedEvent(args.event);
};
